; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py
; RUN: opt < %s -disable-output "-passes=print<scalar-evolution>" -scalar-evolution-classify-expressions=0 -scalar-evolution-infer-max-trip-count-from-memory-access 2>&1 | FileCheck %s

define void @ComputeMaxTripCountFromArrayIdxWrap(i32 signext %len) {
; CHECK-LABEL: 'ComputeMaxTripCountFromArrayIdxWrap'
; CHECK-NEXT:  Determining loop execution counts for: @ComputeMaxTripCountFromArrayIdxWrap
; CHECK-NEXT:  Loop %for.body: backedge-taken count is (-1 + %len)
; CHECK-NEXT:  Loop %for.body: constant max backedge-taken count is 255
; CHECK-NEXT:  Loop %for.body: symbolic max backedge-taken count is (-1 + %len)
; CHECK-NEXT:  Loop %for.body: Predicated backedge-taken count is (-1 + %len)
; CHECK-NEXT:   Predicates:
; CHECK-NEXT:  Loop %for.body: Trip multiple is 1
; CHECK-NEXT:  Loop %for.body: Small constant max trip is 256
;
entry:
  %a = alloca [256 x i32], align 4
  %cmp4 = icmp sgt i32 %len, 0
  br i1 %cmp4, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:
  br label %for.body

for.cond.cleanup.loopexit:
  br label %for.cond.cleanup

for.cond.cleanup:
  ret void

for.body:
  %iv = phi i8 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %idxprom = zext i8 %iv to i64
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* %a, i64 0, i64 %idxprom
  store i32 0, i32* %arrayidx, align 4
  %inc = add nuw i8 %iv, 1
  %inc_zext = zext i8 %inc to i32
  %cmp = icmp slt i32 %inc_zext, %len
  br i1 %cmp, label %for.body, label %for.cond.cleanup.loopexit
}

define void @ComputeMaxTripCountFromArrayIdxWrap2(i32 signext %len) {
; CHECK-LABEL: 'ComputeMaxTripCountFromArrayIdxWrap2'
; CHECK-NEXT:  Determining loop execution counts for: @ComputeMaxTripCountFromArrayIdxWrap2
; CHECK-NEXT:  Loop %for.body: backedge-taken count is (-1 + %len)
; CHECK-NEXT:  Loop %for.body: constant max backedge-taken count is 127
; CHECK-NEXT:  Loop %for.body: symbolic max backedge-taken count is (-1 + %len)
; CHECK-NEXT:  Loop %for.body: Predicated backedge-taken count is (-1 + %len)
; CHECK-NEXT:   Predicates:
; CHECK-NEXT:  Loop %for.body: Trip multiple is 1
; CHECK-NEXT:  Loop %for.body: Small constant max trip is 128
;
entry:
  %a = alloca [127 x i32], align 4
  %cmp4 = icmp sgt i32 %len, 0
  br i1 %cmp4, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:
  br label %for.body

for.cond.cleanup.loopexit:
  br label %for.cond.cleanup

for.cond.cleanup:
  ret void

for.body:
  %iv = phi i8 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %idxprom = zext i8 %iv to i64
  %arrayidx = getelementptr inbounds [127 x i32], [127 x i32]* %a, i64 0, i64 %idxprom
  store i32 0, i32* %arrayidx, align 4
  %inc = add nuw i8 %iv, 1
  %inc_zext = zext i8 %inc to i32
  %cmp = icmp slt i32 %inc_zext, %len
  br i1 %cmp, label %for.body, label %for.cond.cleanup.loopexit
}

define void @ComputeMaxTripCountFromArrayIdxWrap3(i32 signext %len) {
; CHECK-LABEL: 'ComputeMaxTripCountFromArrayIdxWrap3'
; CHECK-NEXT:  Determining loop execution counts for: @ComputeMaxTripCountFromArrayIdxWrap3
; CHECK-NEXT:  Loop %for.body: backedge-taken count is (-1 + %len)
; CHECK-NEXT:  Loop %for.body: constant max backedge-taken count is 20
; CHECK-NEXT:  Loop %for.body: symbolic max backedge-taken count is (-1 + %len)
; CHECK-NEXT:  Loop %for.body: Predicated backedge-taken count is (-1 + %len)
; CHECK-NEXT:   Predicates:
; CHECK-NEXT:  Loop %for.body: Trip multiple is 1
; CHECK-NEXT:  Loop %for.body: Small constant max trip is 21
;
entry:
  %a = alloca [20 x i32], align 4
  %cmp4 = icmp sgt i32 %len, 0
  br i1 %cmp4, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:
  br label %for.body

for.cond.cleanup.loopexit:
  br label %for.cond.cleanup

for.cond.cleanup:
  ret void

for.body:
  %iv = phi i8 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %idxprom = zext i8 %iv to i64
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* %a, i64 0, i64 %idxprom
  store i32 0, i32* %arrayidx, align 4
  %inc = add nuw nsw i8 %iv, 1
  %inc_zext = zext i8 %inc to i32
  %cmp = icmp slt i32 %inc_zext, %len
  br i1 %cmp, label %for.body, label %for.cond.cleanup.loopexit
}
