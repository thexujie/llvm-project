; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -march=mips64 -mcpu=octeon -target-abi=n64 < %s -o - | FileCheck %s

define i64 @cins_zext(i32 signext %n) {
; CHECK-LABEL: cins_zext:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    cins $2, $4, 5, 26
entry:
  %shl = shl i32 %n, 5
  %conv = zext i32 %shl to i64
  ret i64 %conv


}

define i64 @cins_and_shl(i64 zeroext %n) {
; CHECK-LABEL: cins_and_shl:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    cins $2, $4, 8, 15
entry:
  %and = shl i64 %n, 8
  %shl = and i64 %and, 16776960
  ret i64 %shl


}

define i64 @cins_and_shl32(i64 zeroext %n) {
; CHECK-LABEL: cins_and_shl32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    cins32 $2, $4, 6, 15
entry:
  %and = shl i64 %n, 38
  %shl = and i64 %and, 18014123631575040
  ret i64 %shl


}

define zeroext i16 @cins_and_shl_16(i16 zeroext %n) {
; CHECK-LABEL: cins_and_shl_16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    cins $2, $4, 2, 3
entry:
  %0 = shl i16 %n, 2
  %1 = and i16 %0, 60
  ret i16 %1


}

define zeroext i8 @cins_and_shl_8(i8 zeroext %n) {
; CHECK-LABEL: cins_and_shl_8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    cins $2, $4, 2, 1
entry:
  %0 = shl i8 %n, 2
  %1 = and i8 %0, 12
  ret i8 %1


}

define i32 @cins_i32(i32 signext %a) {
; CHECK-LABEL: cins_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    cins $2, $4, 17, 11
entry:
  %and = shl i32 %a, 17
  %shl = and i32 %and, 536739840
  ret i32 %shl


}

define i64 @cins_shl_and(i32 signext %n) {
; CHECK-LABEL: cins_shl_and:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    cins $2, $4, 31, 15
entry:
  %and = and i32 %n, 65535
  %conv = zext i32 %and to i64
  %shl = shl nuw nsw i64 %conv, 31
  ret i64 %shl


}


define i64 @cins_shl_and32(i32 signext %n) {
; CHECK-LABEL: cins_shl_and32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    cins32 $2, $4, 15, 15
entry:
  %and = and i32 %n, 65535
  %conv = zext i32 %and to i64
  %shl = shl nuw nsw i64 %conv, 47
  ret i64 %shl


}
