; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: -p --function-signature
; RUN: opt -S --passes=expand-variadics < %s | FileCheck %s
target datalayout = "e-m:x-p:32:32-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32-a:0:32-S32"
target triple = "i686-unknown-windows-msvc19.33.0"

; Check the variables are lowered to the locations this target expects

; The types show the call frames
; CHECK: %single_i32.vararg = type <{ i32 }>
; CHECK: %single_double.vararg = type <{ double }>
; CHECK: %single_v4f32.vararg = type <{ <4 x float> }>
; CHECK: %single_v8f32.vararg = type <{ <8 x float> }>
; CHECK: %single_v16f32.vararg = type <{ <16 x float> }>
; CHECK: %single_v32f32.vararg = type <{ ptr }>
; CHECK: %i32_double.vararg = type <{ i32, [4 x i8], double }>
; CHECK: %double_i32.vararg = type <{ double, i32 }>
; CHECK: %i32_v4f32.vararg = type <{ i32, [12 x i8], <4 x float> }>
; CHECK: %v4f32_i32.vararg = type <{ <4 x float>, i32 }>
; CHECK: %i32_v8f32.vararg = type <{ i32, [28 x i8], <8 x float> }>
; CHECK: %v8f32_i32.vararg = type <{ <8 x float>, i32 }>
; CHECK: %i32_v16f32.vararg = type <{ i32, [60 x i8], <16 x float> }>
; CHECK: %v16f32_i32.vararg = type <{ <16 x float>, i32 }>
; CHECK: %i32_v32f32.vararg = type <{ i32, ptr }>
; CHECK: %v32f32_i32.vararg = type <{ ptr, i32 }>

%struct.libcS = type { i8, i16, i32, i32, float, double }

define void @codegen_for_copy(ptr noundef %x) #0 {
; CHECK-LABEL: define {{[^@]+}}@codegen_for_copy(ptr noundef %x) #0 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %x.addr = alloca ptr, align 4
; CHECK-NEXT:    %cp = alloca ptr, align 4
; CHECK-NEXT:    store ptr %x, ptr %x.addr, align 4, !tbaa !3
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %cp) #8
; CHECK-NEXT:    call void @llvm.va_copy(ptr nonnull %cp, ptr nonnull %x.addr)
; CHECK-NEXT:    %0 = load ptr, ptr %cp, align 4, !tbaa !3
; CHECK-NEXT:    call void @wrapped(ptr noundef %0) #9
; CHECK-NEXT:    call void @llvm.va_end(ptr %cp)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %cp) #8
; CHECK-NEXT:    ret void
;
entry:
  %x.addr = alloca ptr, align 4
  %cp = alloca ptr, align 4
  store ptr %x, ptr %x.addr, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %cp) #7
  call void @llvm.va_copy(ptr nonnull %cp, ptr nonnull %x.addr)
  %0 = load ptr, ptr %cp, align 4, !tbaa !4
  call void @wrapped(ptr noundef %0) #8
  call void @llvm.va_end(ptr %cp)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %cp) #7
  ret void
}

declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

declare void @llvm.va_copy(ptr, ptr) #2

declare void @wrapped(ptr noundef) #3

declare void @llvm.va_end(ptr) #2

declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

define void @vararg(...) #0 {
; CHECK-LABEL: define {{[^@]+}}@vararg(...) #0 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %va = alloca ptr, align 4
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %va) #8
; CHECK-NEXT:    call void @llvm.va_start(ptr nonnull %va)
; CHECK-NEXT:    %0 = load ptr, ptr %va, align 4, !tbaa !3
; CHECK-NEXT:    call void @wrapped(ptr noundef %0) #9
; CHECK-NEXT:    call void @llvm.va_end(ptr %va)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %va) #8
; CHECK-NEXT:    ret void
;
entry:
  %va = alloca ptr, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %va) #7
  call void @llvm.va_start(ptr nonnull %va)
  %0 = load ptr, ptr %va, align 4, !tbaa !4
  call void @wrapped(ptr noundef %0) #8
  call void @llvm.va_end(ptr %va)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %va) #7
  ret void
}

declare void @llvm.va_start(ptr) #2

define void @single_i32(i32 noundef %x) #0 {
; CHECK-LABEL: define {{[^@]+}}@single_i32(i32 noundef %x) #0 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %single_i32.vararg, align 4
; CHECK-NEXT:    %0 = getelementptr inbounds %single_i32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store i32 %x, ptr %0, align 4
; CHECK-NEXT:    call void @wrapped(ptr %vararg_buffer) #10
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x) #9
  ret void
}

define void @single_double(double noundef %x) #0 {
; CHECK-LABEL: define {{[^@]+}}@single_double(double noundef %x) #0 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %single_double.vararg, align 8
; CHECK-NEXT:    %0 = getelementptr inbounds %single_double.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store double %x, ptr %0, align 8
; CHECK-NEXT:    call void @wrapped(ptr %vararg_buffer) #10
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(double noundef %x) #9
  ret void
}

define void @single_v4f32(<4 x float> inreg noundef %x) #4 {
; CHECK-LABEL: define {{[^@]+}}@single_v4f32(<4 x float> inreg noundef %x) #4 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %single_v4f32.vararg, align 16
; CHECK-NEXT:    %0 = getelementptr inbounds %single_v4f32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store <4 x float> %x, ptr %0, align 16
; CHECK-NEXT:    call void @wrapped(ptr %vararg_buffer) #10
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(<4 x float> inreg noundef %x) #9
  ret void
}

define void @single_v8f32(<8 x float> inreg noundef %x) #5 {
; CHECK-LABEL: define {{[^@]+}}@single_v8f32(<8 x float> inreg noundef %x) #5 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %single_v8f32.vararg, align 32
; CHECK-NEXT:    %0 = getelementptr inbounds %single_v8f32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store <8 x float> %x, ptr %0, align 32
; CHECK-NEXT:    call void @wrapped(ptr %vararg_buffer) #10
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(<8 x float> inreg noundef %x) #9
  ret void
}

define void @single_v16f32(<16 x float> inreg noundef %x) #6 {
; CHECK-LABEL: define {{[^@]+}}@single_v16f32(<16 x float> inreg noundef %x) #6 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %single_v16f32.vararg, align 64
; CHECK-NEXT:    %0 = getelementptr inbounds %single_v16f32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store <16 x float> %x, ptr %0, align 64
; CHECK-NEXT:    call void @wrapped(ptr %vararg_buffer) #10
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(<16 x float> inreg noundef %x) #9
  ret void
}

define void @single_v32f32(ptr nocapture noundef readonly %0) #0 {
; CHECK-LABEL: define {{[^@]+}}@single_v32f32(ptr nocapture noundef readonly %0) #0 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %single_v32f32.vararg, align 4
; CHECK-NEXT:    %indirect-arg-temp = alloca <32 x float>, align 128
; CHECK-NEXT:    %x = load <32 x float>, ptr %0, align 128, !tbaa !7
; CHECK-NEXT:    store <32 x float> %x, ptr %indirect-arg-temp, align 128, !tbaa !7
; CHECK-NEXT:    %1 = getelementptr inbounds %single_v32f32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store ptr %indirect-arg-temp, ptr %1, align 4
; CHECK-NEXT:    call void @wrapped(ptr %vararg_buffer) #10
; CHECK-NEXT:    ret void
;
entry:
  %indirect-arg-temp = alloca <32 x float>, align 128
  %x = load <32 x float>, ptr %0, align 128, !tbaa !8
  store <32 x float> %x, ptr %indirect-arg-temp, align 128, !tbaa !8
  call void (...) @vararg(ptr noundef nonnull %indirect-arg-temp) #9
  ret void
}

define void @i32_double(i32 noundef %x, double noundef %y) #0 {
; CHECK-LABEL: define {{[^@]+}}@i32_double(i32 noundef %x, double noundef %y) #0 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %i32_double.vararg, align 8
; CHECK-NEXT:    %0 = getelementptr inbounds %i32_double.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store i32 %x, ptr %0, align 4
; CHECK-NEXT:    %1 = getelementptr inbounds %i32_double.vararg, ptr %vararg_buffer, i32 0, i32 2
; CHECK-NEXT:    store double %y, ptr %1, align 8
; CHECK-NEXT:    call void @wrapped(ptr %vararg_buffer) #10
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x, double noundef %y) #9
  ret void
}

define void @double_i32(double noundef %x, i32 noundef %y) #0 {
; CHECK-LABEL: define {{[^@]+}}@double_i32(double noundef %x, i32 noundef %y) #0 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %double_i32.vararg, align 8
; CHECK-NEXT:    %0 = getelementptr inbounds %double_i32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store double %x, ptr %0, align 8
; CHECK-NEXT:    %1 = getelementptr inbounds %double_i32.vararg, ptr %vararg_buffer, i32 0, i32 1
; CHECK-NEXT:    store i32 %y, ptr %1, align 4
; CHECK-NEXT:    call void @wrapped(ptr %vararg_buffer) #10
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(double noundef %x, i32 noundef %y) #9
  ret void
}

define void @i32_libcS(i32 noundef %x, ptr nocapture noundef readonly byval(%struct.libcS) align 4 %0) #0 {
; CHECK-LABEL: define {{[^@]+}}@i32_libcS(i32 noundef %x, ptr nocapture noundef readonly byval(%struct.libcS) align 4 %0) #0 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %i32_libcS.vararg, align 8
; CHECK-NEXT:    %1 = getelementptr inbounds %i32_libcS.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store i32 %x, ptr %1, align 4
; CHECK-NEXT:    %2 = getelementptr inbounds %i32_libcS.vararg, ptr %vararg_buffer, i32 0, i32 2
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr %2, ptr %0, i64 24, i1 false)
; CHECK-NEXT:    call void @wrapped(ptr %vararg_buffer) #10
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x, ptr noundef nonnull byval(%struct.libcS) align 4 %0) #9
  ret void
}

define void @libcS_i32(ptr nocapture noundef readonly byval(%struct.libcS) align 4 %0, i32 noundef %y) #0 {
; CHECK-LABEL: define {{[^@]+}}@libcS_i32(ptr nocapture noundef readonly byval(%struct.libcS) align 4 %0, i32 noundef %y) #0 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %libcS_i32.vararg, align 8
; CHECK-NEXT:    %1 = getelementptr inbounds %libcS_i32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr %1, ptr %0, i64 24, i1 false)
; CHECK-NEXT:    %2 = getelementptr inbounds %libcS_i32.vararg, ptr %vararg_buffer, i32 0, i32 1
; CHECK-NEXT:    store i32 %y, ptr %2, align 4
; CHECK-NEXT:    call void @wrapped(ptr %vararg_buffer) #10
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(ptr noundef nonnull byval(%struct.libcS) align 4 %0, i32 noundef %y) #9
  ret void
}

define void @i32_v4f32(i32 noundef %x, <4 x float> inreg noundef %y) #4 {
; CHECK-LABEL: define {{[^@]+}}@i32_v4f32(i32 noundef %x, <4 x float> inreg noundef %y) #4 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %i32_v4f32.vararg, align 16
; CHECK-NEXT:    %0 = getelementptr inbounds %i32_v4f32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store i32 %x, ptr %0, align 4
; CHECK-NEXT:    %1 = getelementptr inbounds %i32_v4f32.vararg, ptr %vararg_buffer, i32 0, i32 2
; CHECK-NEXT:    store <4 x float> %y, ptr %1, align 16
; CHECK-NEXT:    call void @wrapped(ptr %vararg_buffer) #10
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x, <4 x float> inreg noundef %y) #9
  ret void
}

define void @v4f32_i32(<4 x float> inreg noundef %x, i32 noundef %y) #4 {
; CHECK-LABEL: define {{[^@]+}}@v4f32_i32(<4 x float> inreg noundef %x, i32 noundef %y) #4 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %v4f32_i32.vararg, align 16
; CHECK-NEXT:    %0 = getelementptr inbounds %v4f32_i32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store <4 x float> %x, ptr %0, align 16
; CHECK-NEXT:    %1 = getelementptr inbounds %v4f32_i32.vararg, ptr %vararg_buffer, i32 0, i32 1
; CHECK-NEXT:    store i32 %y, ptr %1, align 4
; CHECK-NEXT:    call void @wrapped(ptr %vararg_buffer) #10
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(<4 x float> inreg noundef %x, i32 noundef %y) #9
  ret void
}

define void @i32_v8f32(i32 noundef %x, <8 x float> inreg noundef %y) #5 {
; CHECK-LABEL: define {{[^@]+}}@i32_v8f32(i32 noundef %x, <8 x float> inreg noundef %y) #5 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %i32_v8f32.vararg, align 32
; CHECK-NEXT:    %0 = getelementptr inbounds %i32_v8f32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store i32 %x, ptr %0, align 4
; CHECK-NEXT:    %1 = getelementptr inbounds %i32_v8f32.vararg, ptr %vararg_buffer, i32 0, i32 2
; CHECK-NEXT:    store <8 x float> %y, ptr %1, align 32
; CHECK-NEXT:    call void @wrapped(ptr %vararg_buffer) #10
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x, <8 x float> inreg noundef %y) #9
  ret void
}

define void @v8f32_i32(<8 x float> inreg noundef %x, i32 noundef %y) #5 {
; CHECK-LABEL: define {{[^@]+}}@v8f32_i32(<8 x float> inreg noundef %x, i32 noundef %y) #5 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %v8f32_i32.vararg, align 32
; CHECK-NEXT:    %0 = getelementptr inbounds %v8f32_i32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store <8 x float> %x, ptr %0, align 32
; CHECK-NEXT:    %1 = getelementptr inbounds %v8f32_i32.vararg, ptr %vararg_buffer, i32 0, i32 1
; CHECK-NEXT:    store i32 %y, ptr %1, align 4
; CHECK-NEXT:    call void @wrapped(ptr %vararg_buffer) #10
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(<8 x float> inreg noundef %x, i32 noundef %y) #9
  ret void
}

define void @i32_v16f32(i32 noundef %x, <16 x float> inreg noundef %y) #6 {
; CHECK-LABEL: define {{[^@]+}}@i32_v16f32(i32 noundef %x, <16 x float> inreg noundef %y) #6 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %i32_v16f32.vararg, align 64
; CHECK-NEXT:    %0 = getelementptr inbounds %i32_v16f32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store i32 %x, ptr %0, align 4
; CHECK-NEXT:    %1 = getelementptr inbounds %i32_v16f32.vararg, ptr %vararg_buffer, i32 0, i32 2
; CHECK-NEXT:    store <16 x float> %y, ptr %1, align 64
; CHECK-NEXT:    call void @wrapped(ptr %vararg_buffer) #10
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x, <16 x float> inreg noundef %y) #9
  ret void
}

define void @v16f32_i32(<16 x float> inreg noundef %x, i32 noundef %y) #6 {
; CHECK-LABEL: define {{[^@]+}}@v16f32_i32(<16 x float> inreg noundef %x, i32 noundef %y) #6 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %v16f32_i32.vararg, align 64
; CHECK-NEXT:    %0 = getelementptr inbounds %v16f32_i32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store <16 x float> %x, ptr %0, align 64
; CHECK-NEXT:    %1 = getelementptr inbounds %v16f32_i32.vararg, ptr %vararg_buffer, i32 0, i32 1
; CHECK-NEXT:    store i32 %y, ptr %1, align 4
; CHECK-NEXT:    call void @wrapped(ptr %vararg_buffer) #10
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(<16 x float> inreg noundef %x, i32 noundef %y) #9
  ret void
}

define void @i32_v32f32(i32 noundef %x, ptr nocapture noundef readonly %0) #0 {
; CHECK-LABEL: define {{[^@]+}}@i32_v32f32(i32 noundef %x, ptr nocapture noundef readonly %0) #0 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %i32_v32f32.vararg, align 4
; CHECK-NEXT:    %indirect-arg-temp = alloca <32 x float>, align 128
; CHECK-NEXT:    %y = load <32 x float>, ptr %0, align 128, !tbaa !7
; CHECK-NEXT:    store <32 x float> %y, ptr %indirect-arg-temp, align 128, !tbaa !7
; CHECK-NEXT:    %1 = getelementptr inbounds %i32_v32f32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store i32 %x, ptr %1, align 4
; CHECK-NEXT:    %2 = getelementptr inbounds %i32_v32f32.vararg, ptr %vararg_buffer, i32 0, i32 1
; CHECK-NEXT:    store ptr %indirect-arg-temp, ptr %2, align 4
; CHECK-NEXT:    call void @wrapped(ptr %vararg_buffer) #10
; CHECK-NEXT:    ret void
;
entry:
  %indirect-arg-temp = alloca <32 x float>, align 128
  %y = load <32 x float>, ptr %0, align 128, !tbaa !8
  store <32 x float> %y, ptr %indirect-arg-temp, align 128, !tbaa !8
  call void (...) @vararg(i32 noundef %x, ptr noundef nonnull %indirect-arg-temp) #9
  ret void
}

define void @v32f32_i32(ptr nocapture noundef readonly %0, i32 noundef %y) #0 {
; CHECK-LABEL: define {{[^@]+}}@v32f32_i32(ptr nocapture noundef readonly %0, i32 noundef %y) #0 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %v32f32_i32.vararg, align 4
; CHECK-NEXT:    %indirect-arg-temp = alloca <32 x float>, align 128
; CHECK-NEXT:    %x = load <32 x float>, ptr %0, align 128, !tbaa !7
; CHECK-NEXT:    store <32 x float> %x, ptr %indirect-arg-temp, align 128, !tbaa !7
; CHECK-NEXT:    %1 = getelementptr inbounds %v32f32_i32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store ptr %indirect-arg-temp, ptr %1, align 4
; CHECK-NEXT:    %2 = getelementptr inbounds %v32f32_i32.vararg, ptr %vararg_buffer, i32 0, i32 1
; CHECK-NEXT:    store i32 %y, ptr %2, align 4
; CHECK-NEXT:    call void @wrapped(ptr %vararg_buffer) #10
; CHECK-NEXT:    ret void
;
entry:
  %indirect-arg-temp = alloca <32 x float>, align 128
  %x = load <32 x float>, ptr %0, align 128, !tbaa !8
  store <32 x float> %x, ptr %indirect-arg-temp, align 128, !tbaa !8
  call void (...) @vararg(ptr noundef nonnull %indirect-arg-temp, i32 noundef %y) #9
  ret void
}

attributes #0 = { nounwind "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn }
attributes #3 = { "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "min-legal-vector-width"="128" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind "min-legal-vector-width"="256" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind "min-legal-vector-width"="512" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nounwind }
attributes #8 = { nobuiltin nounwind "no-builtins" }
attributes #9 = { nobuiltin "no-builtins" }

!llvm.module.flags = !{!0, !1, !2}

!0 = !{i32 1, !"NumRegisterParameters", i32 0}
!1 = !{i32 1, !"wchar_size", i32 2}
!2 = !{i32 1, !"MaxTLSAlign", i32 65536}
!4 = !{!5, !5, i64 0}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!6, !6, i64 0}
