; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: -p --function-signature
; RUN: opt -S --passes=expand-variadics --expand-variadics-override=lowering < %s | FileCheck %s
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.4.0"

; Check the variables are lowered to the locations this target expects

; The types show the call frames
; CHECK: %single_i32.vararg = type <{ i32 }>
; CHECK: %single_double.vararg = type <{ double }>
; CHECK: %single_v4f32.vararg = type <{ <4 x float> }>
; CHECK: %single_v8f32.vararg = type <{ <8 x float> }>
; CHECK: %single_v16f32.vararg = type <{ <16 x float> }>
; CHECK: %single_v32f32.vararg = type <{ <32 x float> }>
; CHECK: %i32_double.vararg = type <{ i32, [4 x i8], double }>
; CHECK: %double_i32.vararg = type <{ double, i32 }>
; CHECK: %i32_v4f32.vararg = type <{ i32, [4 x i8], <4 x float> }>
; CHECK: %v4f32_i32.vararg = type <{ <4 x float>, i32 }>
; CHECK: %i32_v8f32.vararg = type <{ i32, [4 x i8], <8 x float> }>
; CHECK: %v8f32_i32.vararg = type <{ <8 x float>, i32 }>
; CHECK: %i32_v16f32.vararg = type <{ i32, [4 x i8], <16 x float> }>
; CHECK: %v16f32_i32.vararg = type <{ <16 x float>, i32 }>
; CHECK: %i32_v32f32.vararg = type <{ i32, [4 x i8], <32 x float> }>
; CHECK: %v32f32_i32.vararg = type <{ <32 x float>, i32 }>

%struct.__va_list_tag = type { i32, i32, ptr, ptr }
%struct.libcS = type { i8, i16, i32, i64, float, double }

define void @copy(ptr noundef %va) {
; CHECK-LABEL: define {{[^@]+}}@copy(ptr noundef %va) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %cp = alloca [1 x %struct.__va_list_tag], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %cp) #2
; CHECK-NEXT:    call void @llvm.memcpy.inline.p0.p0.i32(ptr %cp, ptr %va, i32 24, i1 false)
; CHECK-NEXT:    call void @valist(ptr noundef nonnull %cp) #2
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %cp) #2
; CHECK-NEXT:    ret void
;
entry:
  %cp = alloca [1 x %struct.__va_list_tag], align 16
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %cp) #2
  call void @llvm.va_copy.p0(ptr nonnull %cp, ptr %va)
  call void @valist(ptr noundef nonnull %cp) #2
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %cp) #2
  ret void
}

declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #0

declare void @llvm.va_copy.p0(ptr, ptr) #1

declare void @valist(ptr noundef)

declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #0

define void @start_once(...) {
; CHECK-LABEL: define {{[^@]+}}@start_once(ptr noalias %varargs) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %s = alloca [1 x %struct.__va_list_tag], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %s) #2
; CHECK-NEXT:    call void @llvm.memcpy.inline.p0.p0.i32(ptr %s, ptr %varargs, i32 24, i1 false)
; CHECK-NEXT:    call void @valist(ptr noundef nonnull %s) #2
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %s) #2
; CHECK-NEXT:    ret void
;
entry:
  %s = alloca [1 x %struct.__va_list_tag], align 16
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %s) #2
  call void @llvm.va_start.p0(ptr nonnull %s)
  call void @valist(ptr noundef nonnull %s) #2
  call void @llvm.va_end.p0(ptr %s)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %s) #2
  ret void
}

declare void @llvm.va_start.p0(ptr) #1

declare void @llvm.va_end.p0(ptr) #1

define void @start_twice(...) {
; CHECK-LABEL: define {{[^@]+}}@start_twice(ptr noalias %varargs) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %s0 = alloca [1 x %struct.__va_list_tag], align 16
; CHECK-NEXT:    %s1 = alloca [1 x %struct.__va_list_tag], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %s0) #2
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %s1) #2
; CHECK-NEXT:    call void @llvm.memcpy.inline.p0.p0.i32(ptr %s0, ptr %varargs, i32 24, i1 false)
; CHECK-NEXT:    call void @valist(ptr noundef nonnull %s0) #2
; CHECK-NEXT:    call void @llvm.memcpy.inline.p0.p0.i32(ptr %s1, ptr %varargs, i32 24, i1 false)
; CHECK-NEXT:    call void @valist(ptr noundef nonnull %s1) #2
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %s1) #2
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %s0) #2
; CHECK-NEXT:    ret void
;
entry:
  %s0 = alloca [1 x %struct.__va_list_tag], align 16
  %s1 = alloca [1 x %struct.__va_list_tag], align 16
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %s0) #2
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %s1) #2
  call void @llvm.va_start.p0(ptr nonnull %s0)
  call void @valist(ptr noundef nonnull %s0) #2
  call void @llvm.va_end.p0(ptr %s0)
  call void @llvm.va_start.p0(ptr nonnull %s1)
  call void @valist(ptr noundef nonnull %s1) #2
  call void @llvm.va_end.p0(ptr %s1)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %s1) #2
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %s0) #2
  ret void
}

define void @single_i32(i32 noundef %x) {
; CHECK-LABEL: define {{[^@]+}}@single_i32(i32 noundef %x) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %single_i32.vararg, align 16
; CHECK-NEXT:    %va_list = alloca [1 x { i32, i32, ptr, ptr }], align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 4, ptr %vararg_buffer)
; CHECK-NEXT:    %0 = getelementptr inbounds %single_i32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store i32 %x, ptr %0, align 4
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    %gp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 0
; CHECK-NEXT:    store i32 48, ptr %gp_offset, align 4
; CHECK-NEXT:    %fp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 1
; CHECK-NEXT:    store i32 176, ptr %fp_offset, align 4
; CHECK-NEXT:    %overfow_arg_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 2
; CHECK-NEXT:    store ptr %vararg_buffer, ptr %overfow_arg_area, align 8
; CHECK-NEXT:    %reg_save_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 3
; CHECK-NEXT:    store ptr null, ptr %reg_save_area, align 8
; CHECK-NEXT:    call void @vararg(ptr %va_list) #2
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 4, ptr %vararg_buffer)
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x) #2
  ret void
}

declare void @vararg(...)

define void @single_double(double noundef %x) {
; CHECK-LABEL: define {{[^@]+}}@single_double(double noundef %x) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %single_double.vararg, align 16
; CHECK-NEXT:    %va_list = alloca [1 x { i32, i32, ptr, ptr }], align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr %vararg_buffer)
; CHECK-NEXT:    %0 = getelementptr inbounds %single_double.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store double %x, ptr %0, align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    %gp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 0
; CHECK-NEXT:    store i32 48, ptr %gp_offset, align 4
; CHECK-NEXT:    %fp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 1
; CHECK-NEXT:    store i32 176, ptr %fp_offset, align 4
; CHECK-NEXT:    %overfow_arg_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 2
; CHECK-NEXT:    store ptr %vararg_buffer, ptr %overfow_arg_area, align 8
; CHECK-NEXT:    %reg_save_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 3
; CHECK-NEXT:    store ptr null, ptr %reg_save_area, align 8
; CHECK-NEXT:    call void @vararg(ptr %va_list) #2
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr %vararg_buffer)
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(double noundef %x) #2
  ret void
}

define void @single_v4f32(<4 x float> noundef %x) {
; CHECK-LABEL: define {{[^@]+}}@single_v4f32(<4 x float> noundef %x) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %single_v4f32.vararg, align 16
; CHECK-NEXT:    %va_list = alloca [1 x { i32, i32, ptr, ptr }], align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr %vararg_buffer)
; CHECK-NEXT:    %0 = getelementptr inbounds %single_v4f32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store <4 x float> %x, ptr %0, align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    %gp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 0
; CHECK-NEXT:    store i32 48, ptr %gp_offset, align 4
; CHECK-NEXT:    %fp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 1
; CHECK-NEXT:    store i32 176, ptr %fp_offset, align 4
; CHECK-NEXT:    %overfow_arg_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 2
; CHECK-NEXT:    store ptr %vararg_buffer, ptr %overfow_arg_area, align 8
; CHECK-NEXT:    %reg_save_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 3
; CHECK-NEXT:    store ptr null, ptr %reg_save_area, align 8
; CHECK-NEXT:    call void @vararg(ptr %va_list) #2
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr %vararg_buffer)
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(<4 x float> noundef %x) #2
  ret void
}

define void @single_v8f32(ptr nocapture noundef readonly byval(<8 x float>) align 16 %0) {
; CHECK-LABEL: define {{[^@]+}}@single_v8f32(ptr nocapture noundef readonly byval(<8 x float>) align 16 %0) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %indirect-arg-temp = alloca <8 x float>, align 16
; CHECK-NEXT:    %vararg_buffer = alloca %single_v8f32.vararg, align 16
; CHECK-NEXT:    %va_list = alloca [1 x { i32, i32, ptr, ptr }], align 8
; CHECK-NEXT:    %x = load <8 x float>, ptr %0, align 16, !tbaa !3
; CHECK-NEXT:    store <8 x float> %x, ptr %indirect-arg-temp, align 16, !tbaa !3
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 32, ptr %vararg_buffer)
; CHECK-NEXT:    %1 = getelementptr inbounds %single_v8f32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr %1, ptr %indirect-arg-temp, i64 32, i1 false)
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    %gp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 0
; CHECK-NEXT:    store i32 48, ptr %gp_offset, align 4
; CHECK-NEXT:    %fp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 1
; CHECK-NEXT:    store i32 176, ptr %fp_offset, align 4
; CHECK-NEXT:    %overfow_arg_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 2
; CHECK-NEXT:    store ptr %vararg_buffer, ptr %overfow_arg_area, align 8
; CHECK-NEXT:    %reg_save_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 3
; CHECK-NEXT:    store ptr null, ptr %reg_save_area, align 8
; CHECK-NEXT:    call void @vararg(ptr %va_list) #2
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 32, ptr %vararg_buffer)
; CHECK-NEXT:    ret void
;
entry:
  %indirect-arg-temp = alloca <8 x float>, align 16
  %x = load <8 x float>, ptr %0, align 16, !tbaa !4
  store <8 x float> %x, ptr %indirect-arg-temp, align 16, !tbaa !4
  tail call void (...) @vararg(ptr noundef nonnull byval(<8 x float>) align 16 %indirect-arg-temp) #2
  ret void
}

define void @single_v16f32(ptr nocapture noundef readonly byval(<16 x float>) align 16 %0) {
; CHECK-LABEL: define {{[^@]+}}@single_v16f32(ptr nocapture noundef readonly byval(<16 x float>) align 16 %0) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %indirect-arg-temp = alloca <16 x float>, align 16
; CHECK-NEXT:    %vararg_buffer = alloca %single_v16f32.vararg, align 16
; CHECK-NEXT:    %va_list = alloca [1 x { i32, i32, ptr, ptr }], align 8
; CHECK-NEXT:    %x = load <16 x float>, ptr %0, align 16, !tbaa !3
; CHECK-NEXT:    store <16 x float> %x, ptr %indirect-arg-temp, align 16, !tbaa !3
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 64, ptr %vararg_buffer)
; CHECK-NEXT:    %1 = getelementptr inbounds %single_v16f32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr %1, ptr %indirect-arg-temp, i64 64, i1 false)
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    %gp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 0
; CHECK-NEXT:    store i32 48, ptr %gp_offset, align 4
; CHECK-NEXT:    %fp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 1
; CHECK-NEXT:    store i32 176, ptr %fp_offset, align 4
; CHECK-NEXT:    %overfow_arg_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 2
; CHECK-NEXT:    store ptr %vararg_buffer, ptr %overfow_arg_area, align 8
; CHECK-NEXT:    %reg_save_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 3
; CHECK-NEXT:    store ptr null, ptr %reg_save_area, align 8
; CHECK-NEXT:    call void @vararg(ptr %va_list) #2
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 64, ptr %vararg_buffer)
; CHECK-NEXT:    ret void
;
entry:
  %indirect-arg-temp = alloca <16 x float>, align 16
  %x = load <16 x float>, ptr %0, align 16, !tbaa !4
  store <16 x float> %x, ptr %indirect-arg-temp, align 16, !tbaa !4
  tail call void (...) @vararg(ptr noundef nonnull byval(<16 x float>) align 16 %indirect-arg-temp) #2
  ret void
}

define void @single_v32f32(ptr nocapture noundef readonly byval(<32 x float>) align 16 %0) {
; CHECK-LABEL: define {{[^@]+}}@single_v32f32(ptr nocapture noundef readonly byval(<32 x float>) align 16 %0) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %indirect-arg-temp = alloca <32 x float>, align 16
; CHECK-NEXT:    %vararg_buffer = alloca %single_v32f32.vararg, align 16
; CHECK-NEXT:    %va_list = alloca [1 x { i32, i32, ptr, ptr }], align 8
; CHECK-NEXT:    %x = load <32 x float>, ptr %0, align 16, !tbaa !3
; CHECK-NEXT:    store <32 x float> %x, ptr %indirect-arg-temp, align 16, !tbaa !3
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 128, ptr %vararg_buffer)
; CHECK-NEXT:    %1 = getelementptr inbounds %single_v32f32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr %1, ptr %indirect-arg-temp, i64 128, i1 false)
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    %gp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 0
; CHECK-NEXT:    store i32 48, ptr %gp_offset, align 4
; CHECK-NEXT:    %fp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 1
; CHECK-NEXT:    store i32 176, ptr %fp_offset, align 4
; CHECK-NEXT:    %overfow_arg_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 2
; CHECK-NEXT:    store ptr %vararg_buffer, ptr %overfow_arg_area, align 8
; CHECK-NEXT:    %reg_save_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 3
; CHECK-NEXT:    store ptr null, ptr %reg_save_area, align 8
; CHECK-NEXT:    call void @vararg(ptr %va_list) #2
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 128, ptr %vararg_buffer)
; CHECK-NEXT:    ret void
;
entry:
  %indirect-arg-temp = alloca <32 x float>, align 16
  %x = load <32 x float>, ptr %0, align 16, !tbaa !4
  store <32 x float> %x, ptr %indirect-arg-temp, align 16, !tbaa !4
  tail call void (...) @vararg(ptr noundef nonnull byval(<32 x float>) align 16 %indirect-arg-temp) #2
  ret void
}

define void @i32_double(i32 noundef %x, double noundef %y) {
; CHECK-LABEL: define {{[^@]+}}@i32_double(i32 noundef %x, double noundef %y) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %i32_double.vararg, align 16
; CHECK-NEXT:    %va_list = alloca [1 x { i32, i32, ptr, ptr }], align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr %vararg_buffer)
; CHECK-NEXT:    %0 = getelementptr inbounds %i32_double.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store i32 %x, ptr %0, align 4
; CHECK-NEXT:    %1 = getelementptr inbounds %i32_double.vararg, ptr %vararg_buffer, i32 0, i32 2
; CHECK-NEXT:    store double %y, ptr %1, align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    %gp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 0
; CHECK-NEXT:    store i32 48, ptr %gp_offset, align 4
; CHECK-NEXT:    %fp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 1
; CHECK-NEXT:    store i32 176, ptr %fp_offset, align 4
; CHECK-NEXT:    %overfow_arg_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 2
; CHECK-NEXT:    store ptr %vararg_buffer, ptr %overfow_arg_area, align 8
; CHECK-NEXT:    %reg_save_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 3
; CHECK-NEXT:    store ptr null, ptr %reg_save_area, align 8
; CHECK-NEXT:    call void @vararg(ptr %va_list) #2
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr %vararg_buffer)
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x, double noundef %y) #2
  ret void
}

define void @double_i32(double noundef %x, i32 noundef %y) {
; CHECK-LABEL: define {{[^@]+}}@double_i32(double noundef %x, i32 noundef %y) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %double_i32.vararg, align 16
; CHECK-NEXT:    %va_list = alloca [1 x { i32, i32, ptr, ptr }], align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 12, ptr %vararg_buffer)
; CHECK-NEXT:    %0 = getelementptr inbounds %double_i32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store double %x, ptr %0, align 8
; CHECK-NEXT:    %1 = getelementptr inbounds %double_i32.vararg, ptr %vararg_buffer, i32 0, i32 1
; CHECK-NEXT:    store i32 %y, ptr %1, align 4
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    %gp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 0
; CHECK-NEXT:    store i32 48, ptr %gp_offset, align 4
; CHECK-NEXT:    %fp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 1
; CHECK-NEXT:    store i32 176, ptr %fp_offset, align 4
; CHECK-NEXT:    %overfow_arg_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 2
; CHECK-NEXT:    store ptr %vararg_buffer, ptr %overfow_arg_area, align 8
; CHECK-NEXT:    %reg_save_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 3
; CHECK-NEXT:    store ptr null, ptr %reg_save_area, align 8
; CHECK-NEXT:    call void @vararg(ptr %va_list) #2
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 12, ptr %vararg_buffer)
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(double noundef %x, i32 noundef %y) #2
  ret void
}

define void @i32_libcS(i32 noundef %x, ptr noundef byval(%struct.libcS) align 8 %y) {
; CHECK-LABEL: define {{[^@]+}}@i32_libcS(i32 noundef %x, ptr noundef byval(%struct.libcS) align 8 %y) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %i32_libcS.vararg, align 16
; CHECK-NEXT:    %va_list = alloca [1 x { i32, i32, ptr, ptr }], align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 40, ptr %vararg_buffer)
; CHECK-NEXT:    %0 = getelementptr inbounds %i32_libcS.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store i32 %x, ptr %0, align 4
; CHECK-NEXT:    %1 = getelementptr inbounds %i32_libcS.vararg, ptr %vararg_buffer, i32 0, i32 2
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr %1, ptr %y, i64 32, i1 false)
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    %gp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 0
; CHECK-NEXT:    store i32 48, ptr %gp_offset, align 4
; CHECK-NEXT:    %fp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 1
; CHECK-NEXT:    store i32 176, ptr %fp_offset, align 4
; CHECK-NEXT:    %overfow_arg_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 2
; CHECK-NEXT:    store ptr %vararg_buffer, ptr %overfow_arg_area, align 8
; CHECK-NEXT:    %reg_save_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 3
; CHECK-NEXT:    store ptr null, ptr %reg_save_area, align 8
; CHECK-NEXT:    call void @vararg(ptr %va_list) #2
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 40, ptr %vararg_buffer)
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x, ptr noundef nonnull byval(%struct.libcS) align 8 %y) #2
  ret void
}

define void @libcS_i32(ptr noundef byval(%struct.libcS) align 8 %x, i32 noundef %y) {
; CHECK-LABEL: define {{[^@]+}}@libcS_i32(ptr noundef byval(%struct.libcS) align 8 %x, i32 noundef %y) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %libcS_i32.vararg, align 16
; CHECK-NEXT:    %va_list = alloca [1 x { i32, i32, ptr, ptr }], align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 36, ptr %vararg_buffer)
; CHECK-NEXT:    %0 = getelementptr inbounds %libcS_i32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr %0, ptr %x, i64 32, i1 false)
; CHECK-NEXT:    %1 = getelementptr inbounds %libcS_i32.vararg, ptr %vararg_buffer, i32 0, i32 1
; CHECK-NEXT:    store i32 %y, ptr %1, align 4
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    %gp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 0
; CHECK-NEXT:    store i32 48, ptr %gp_offset, align 4
; CHECK-NEXT:    %fp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 1
; CHECK-NEXT:    store i32 176, ptr %fp_offset, align 4
; CHECK-NEXT:    %overfow_arg_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 2
; CHECK-NEXT:    store ptr %vararg_buffer, ptr %overfow_arg_area, align 8
; CHECK-NEXT:    %reg_save_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 3
; CHECK-NEXT:    store ptr null, ptr %reg_save_area, align 8
; CHECK-NEXT:    call void @vararg(ptr %va_list) #2
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 36, ptr %vararg_buffer)
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(ptr noundef nonnull byval(%struct.libcS) align 8 %x, i32 noundef %y) #2
  ret void
}

define void @i32_v4f32(i32 noundef %x, <4 x float> noundef %y) {
; CHECK-LABEL: define {{[^@]+}}@i32_v4f32(i32 noundef %x, <4 x float> noundef %y) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %i32_v4f32.vararg, align 16
; CHECK-NEXT:    %va_list = alloca [1 x { i32, i32, ptr, ptr }], align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr %vararg_buffer)
; CHECK-NEXT:    %0 = getelementptr inbounds %i32_v4f32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store i32 %x, ptr %0, align 4
; CHECK-NEXT:    %1 = getelementptr inbounds %i32_v4f32.vararg, ptr %vararg_buffer, i32 0, i32 2
; CHECK-NEXT:    store <4 x float> %y, ptr %1, align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    %gp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 0
; CHECK-NEXT:    store i32 48, ptr %gp_offset, align 4
; CHECK-NEXT:    %fp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 1
; CHECK-NEXT:    store i32 176, ptr %fp_offset, align 4
; CHECK-NEXT:    %overfow_arg_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 2
; CHECK-NEXT:    store ptr %vararg_buffer, ptr %overfow_arg_area, align 8
; CHECK-NEXT:    %reg_save_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 3
; CHECK-NEXT:    store ptr null, ptr %reg_save_area, align 8
; CHECK-NEXT:    call void @vararg(ptr %va_list) #2
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr %vararg_buffer)
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x, <4 x float> noundef %y) #2
  ret void
}

define void @v4f32_i32(<4 x float> noundef %x, i32 noundef %y) {
; CHECK-LABEL: define {{[^@]+}}@v4f32_i32(<4 x float> noundef %x, i32 noundef %y) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %vararg_buffer = alloca %v4f32_i32.vararg, align 16
; CHECK-NEXT:    %va_list = alloca [1 x { i32, i32, ptr, ptr }], align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 20, ptr %vararg_buffer)
; CHECK-NEXT:    %0 = getelementptr inbounds %v4f32_i32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store <4 x float> %x, ptr %0, align 16
; CHECK-NEXT:    %1 = getelementptr inbounds %v4f32_i32.vararg, ptr %vararg_buffer, i32 0, i32 1
; CHECK-NEXT:    store i32 %y, ptr %1, align 4
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    %gp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 0
; CHECK-NEXT:    store i32 48, ptr %gp_offset, align 4
; CHECK-NEXT:    %fp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 1
; CHECK-NEXT:    store i32 176, ptr %fp_offset, align 4
; CHECK-NEXT:    %overfow_arg_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 2
; CHECK-NEXT:    store ptr %vararg_buffer, ptr %overfow_arg_area, align 8
; CHECK-NEXT:    %reg_save_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 3
; CHECK-NEXT:    store ptr null, ptr %reg_save_area, align 8
; CHECK-NEXT:    call void @vararg(ptr %va_list) #2
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 20, ptr %vararg_buffer)
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(<4 x float> noundef %x, i32 noundef %y) #2
  ret void
}

define void @i32_v8f32(i32 noundef %x, ptr nocapture noundef readonly byval(<8 x float>) align 16 %0) {
; CHECK-LABEL: define {{[^@]+}}@i32_v8f32(i32 noundef %x, ptr nocapture noundef readonly byval(<8 x float>) align 16 %0) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %indirect-arg-temp = alloca <8 x float>, align 16
; CHECK-NEXT:    %vararg_buffer = alloca %i32_v8f32.vararg, align 16
; CHECK-NEXT:    %va_list = alloca [1 x { i32, i32, ptr, ptr }], align 8
; CHECK-NEXT:    %y = load <8 x float>, ptr %0, align 16, !tbaa !3
; CHECK-NEXT:    store <8 x float> %y, ptr %indirect-arg-temp, align 16, !tbaa !3
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 40, ptr %vararg_buffer)
; CHECK-NEXT:    %1 = getelementptr inbounds %i32_v8f32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store i32 %x, ptr %1, align 4
; CHECK-NEXT:    %2 = getelementptr inbounds %i32_v8f32.vararg, ptr %vararg_buffer, i32 0, i32 2
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr %2, ptr %indirect-arg-temp, i64 32, i1 false)
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    %gp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 0
; CHECK-NEXT:    store i32 48, ptr %gp_offset, align 4
; CHECK-NEXT:    %fp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 1
; CHECK-NEXT:    store i32 176, ptr %fp_offset, align 4
; CHECK-NEXT:    %overfow_arg_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 2
; CHECK-NEXT:    store ptr %vararg_buffer, ptr %overfow_arg_area, align 8
; CHECK-NEXT:    %reg_save_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 3
; CHECK-NEXT:    store ptr null, ptr %reg_save_area, align 8
; CHECK-NEXT:    call void @vararg(ptr %va_list) #2
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 40, ptr %vararg_buffer)
; CHECK-NEXT:    ret void
;
entry:
  %indirect-arg-temp = alloca <8 x float>, align 16
  %y = load <8 x float>, ptr %0, align 16, !tbaa !4
  store <8 x float> %y, ptr %indirect-arg-temp, align 16, !tbaa !4
  tail call void (...) @vararg(i32 noundef %x, ptr noundef nonnull byval(<8 x float>) align 16 %indirect-arg-temp) #2
  ret void
}

define void @v8f32_i32(ptr nocapture noundef readonly byval(<8 x float>) align 16 %0, i32 noundef %y) {
; CHECK-LABEL: define {{[^@]+}}@v8f32_i32(ptr nocapture noundef readonly byval(<8 x float>) align 16 %0, i32 noundef %y) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %indirect-arg-temp = alloca <8 x float>, align 16
; CHECK-NEXT:    %vararg_buffer = alloca %v8f32_i32.vararg, align 16
; CHECK-NEXT:    %va_list = alloca [1 x { i32, i32, ptr, ptr }], align 8
; CHECK-NEXT:    %x = load <8 x float>, ptr %0, align 16, !tbaa !3
; CHECK-NEXT:    store <8 x float> %x, ptr %indirect-arg-temp, align 16, !tbaa !3
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 36, ptr %vararg_buffer)
; CHECK-NEXT:    %1 = getelementptr inbounds %v8f32_i32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr %1, ptr %indirect-arg-temp, i64 32, i1 false)
; CHECK-NEXT:    %2 = getelementptr inbounds %v8f32_i32.vararg, ptr %vararg_buffer, i32 0, i32 1
; CHECK-NEXT:    store i32 %y, ptr %2, align 4
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    %gp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 0
; CHECK-NEXT:    store i32 48, ptr %gp_offset, align 4
; CHECK-NEXT:    %fp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 1
; CHECK-NEXT:    store i32 176, ptr %fp_offset, align 4
; CHECK-NEXT:    %overfow_arg_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 2
; CHECK-NEXT:    store ptr %vararg_buffer, ptr %overfow_arg_area, align 8
; CHECK-NEXT:    %reg_save_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 3
; CHECK-NEXT:    store ptr null, ptr %reg_save_area, align 8
; CHECK-NEXT:    call void @vararg(ptr %va_list) #2
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 36, ptr %vararg_buffer)
; CHECK-NEXT:    ret void
;
entry:
  %indirect-arg-temp = alloca <8 x float>, align 16
  %x = load <8 x float>, ptr %0, align 16, !tbaa !4
  store <8 x float> %x, ptr %indirect-arg-temp, align 16, !tbaa !4
  tail call void (...) @vararg(ptr noundef nonnull byval(<8 x float>) align 16 %indirect-arg-temp, i32 noundef %y) #2
  ret void
}

define void @i32_v16f32(i32 noundef %x, ptr nocapture noundef readonly byval(<16 x float>) align 16 %0) {
; CHECK-LABEL: define {{[^@]+}}@i32_v16f32(i32 noundef %x, ptr nocapture noundef readonly byval(<16 x float>) align 16 %0) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %indirect-arg-temp = alloca <16 x float>, align 16
; CHECK-NEXT:    %vararg_buffer = alloca %i32_v16f32.vararg, align 16
; CHECK-NEXT:    %va_list = alloca [1 x { i32, i32, ptr, ptr }], align 8
; CHECK-NEXT:    %y = load <16 x float>, ptr %0, align 16, !tbaa !3
; CHECK-NEXT:    store <16 x float> %y, ptr %indirect-arg-temp, align 16, !tbaa !3
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 72, ptr %vararg_buffer)
; CHECK-NEXT:    %1 = getelementptr inbounds %i32_v16f32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store i32 %x, ptr %1, align 4
; CHECK-NEXT:    %2 = getelementptr inbounds %i32_v16f32.vararg, ptr %vararg_buffer, i32 0, i32 2
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr %2, ptr %indirect-arg-temp, i64 64, i1 false)
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    %gp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 0
; CHECK-NEXT:    store i32 48, ptr %gp_offset, align 4
; CHECK-NEXT:    %fp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 1
; CHECK-NEXT:    store i32 176, ptr %fp_offset, align 4
; CHECK-NEXT:    %overfow_arg_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 2
; CHECK-NEXT:    store ptr %vararg_buffer, ptr %overfow_arg_area, align 8
; CHECK-NEXT:    %reg_save_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 3
; CHECK-NEXT:    store ptr null, ptr %reg_save_area, align 8
; CHECK-NEXT:    call void @vararg(ptr %va_list) #2
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 72, ptr %vararg_buffer)
; CHECK-NEXT:    ret void
;
entry:
  %indirect-arg-temp = alloca <16 x float>, align 16
  %y = load <16 x float>, ptr %0, align 16, !tbaa !4
  store <16 x float> %y, ptr %indirect-arg-temp, align 16, !tbaa !4
  tail call void (...) @vararg(i32 noundef %x, ptr noundef nonnull byval(<16 x float>) align 16 %indirect-arg-temp) #2
  ret void
}

define void @v16f32_i32(ptr nocapture noundef readonly byval(<16 x float>) align 16 %0, i32 noundef %y) {
; CHECK-LABEL: define {{[^@]+}}@v16f32_i32(ptr nocapture noundef readonly byval(<16 x float>) align 16 %0, i32 noundef %y) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %indirect-arg-temp = alloca <16 x float>, align 16
; CHECK-NEXT:    %vararg_buffer = alloca %v16f32_i32.vararg, align 16
; CHECK-NEXT:    %va_list = alloca [1 x { i32, i32, ptr, ptr }], align 8
; CHECK-NEXT:    %x = load <16 x float>, ptr %0, align 16, !tbaa !3
; CHECK-NEXT:    store <16 x float> %x, ptr %indirect-arg-temp, align 16, !tbaa !3
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 68, ptr %vararg_buffer)
; CHECK-NEXT:    %1 = getelementptr inbounds %v16f32_i32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr %1, ptr %indirect-arg-temp, i64 64, i1 false)
; CHECK-NEXT:    %2 = getelementptr inbounds %v16f32_i32.vararg, ptr %vararg_buffer, i32 0, i32 1
; CHECK-NEXT:    store i32 %y, ptr %2, align 4
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    %gp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 0
; CHECK-NEXT:    store i32 48, ptr %gp_offset, align 4
; CHECK-NEXT:    %fp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 1
; CHECK-NEXT:    store i32 176, ptr %fp_offset, align 4
; CHECK-NEXT:    %overfow_arg_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 2
; CHECK-NEXT:    store ptr %vararg_buffer, ptr %overfow_arg_area, align 8
; CHECK-NEXT:    %reg_save_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 3
; CHECK-NEXT:    store ptr null, ptr %reg_save_area, align 8
; CHECK-NEXT:    call void @vararg(ptr %va_list) #2
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 68, ptr %vararg_buffer)
; CHECK-NEXT:    ret void
;
entry:
  %indirect-arg-temp = alloca <16 x float>, align 16
  %x = load <16 x float>, ptr %0, align 16, !tbaa !4
  store <16 x float> %x, ptr %indirect-arg-temp, align 16, !tbaa !4
  tail call void (...) @vararg(ptr noundef nonnull byval(<16 x float>) align 16 %indirect-arg-temp, i32 noundef %y) #2
  ret void
}

define void @i32_v32f32(i32 noundef %x, ptr nocapture noundef readonly byval(<32 x float>) align 16 %0) {
; CHECK-LABEL: define {{[^@]+}}@i32_v32f32(i32 noundef %x, ptr nocapture noundef readonly byval(<32 x float>) align 16 %0) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %indirect-arg-temp = alloca <32 x float>, align 16
; CHECK-NEXT:    %vararg_buffer = alloca %i32_v32f32.vararg, align 16
; CHECK-NEXT:    %va_list = alloca [1 x { i32, i32, ptr, ptr }], align 8
; CHECK-NEXT:    %y = load <32 x float>, ptr %0, align 16, !tbaa !3
; CHECK-NEXT:    store <32 x float> %y, ptr %indirect-arg-temp, align 16, !tbaa !3
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 136, ptr %vararg_buffer)
; CHECK-NEXT:    %1 = getelementptr inbounds %i32_v32f32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    store i32 %x, ptr %1, align 4
; CHECK-NEXT:    %2 = getelementptr inbounds %i32_v32f32.vararg, ptr %vararg_buffer, i32 0, i32 2
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr %2, ptr %indirect-arg-temp, i64 128, i1 false)
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    %gp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 0
; CHECK-NEXT:    store i32 48, ptr %gp_offset, align 4
; CHECK-NEXT:    %fp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 1
; CHECK-NEXT:    store i32 176, ptr %fp_offset, align 4
; CHECK-NEXT:    %overfow_arg_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 2
; CHECK-NEXT:    store ptr %vararg_buffer, ptr %overfow_arg_area, align 8
; CHECK-NEXT:    %reg_save_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 3
; CHECK-NEXT:    store ptr null, ptr %reg_save_area, align 8
; CHECK-NEXT:    call void @vararg(ptr %va_list) #2
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 136, ptr %vararg_buffer)
; CHECK-NEXT:    ret void
;
entry:
  %indirect-arg-temp = alloca <32 x float>, align 16
  %y = load <32 x float>, ptr %0, align 16, !tbaa !4
  store <32 x float> %y, ptr %indirect-arg-temp, align 16, !tbaa !4
  tail call void (...) @vararg(i32 noundef %x, ptr noundef nonnull byval(<32 x float>) align 16 %indirect-arg-temp) #2
  ret void
}

define void @v32f32_i32(ptr nocapture noundef readonly byval(<32 x float>) align 16 %0, i32 noundef %y) {
; CHECK-LABEL: define {{[^@]+}}@v32f32_i32(ptr nocapture noundef readonly byval(<32 x float>) align 16 %0, i32 noundef %y) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %indirect-arg-temp = alloca <32 x float>, align 16
; CHECK-NEXT:    %vararg_buffer = alloca %v32f32_i32.vararg, align 16
; CHECK-NEXT:    %va_list = alloca [1 x { i32, i32, ptr, ptr }], align 8
; CHECK-NEXT:    %x = load <32 x float>, ptr %0, align 16, !tbaa !3
; CHECK-NEXT:    store <32 x float> %x, ptr %indirect-arg-temp, align 16, !tbaa !3
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 132, ptr %vararg_buffer)
; CHECK-NEXT:    %1 = getelementptr inbounds %v32f32_i32.vararg, ptr %vararg_buffer, i32 0, i32 0
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr %1, ptr %indirect-arg-temp, i64 128, i1 false)
; CHECK-NEXT:    %2 = getelementptr inbounds %v32f32_i32.vararg, ptr %vararg_buffer, i32 0, i32 1
; CHECK-NEXT:    store i32 %y, ptr %2, align 4
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    %gp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 0
; CHECK-NEXT:    store i32 48, ptr %gp_offset, align 4
; CHECK-NEXT:    %fp_offset = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 1
; CHECK-NEXT:    store i32 176, ptr %fp_offset, align 4
; CHECK-NEXT:    %overfow_arg_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 2
; CHECK-NEXT:    store ptr %vararg_buffer, ptr %overfow_arg_area, align 8
; CHECK-NEXT:    %reg_save_area = getelementptr inbounds [1 x { i32, i32, ptr, ptr }], ptr %va_list, i64 0, i32 0, i32 3
; CHECK-NEXT:    store ptr null, ptr %reg_save_area, align 8
; CHECK-NEXT:    call void @vararg(ptr %va_list) #2
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr %va_list)
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 132, ptr %vararg_buffer)
; CHECK-NEXT:    ret void
;
entry:
  %indirect-arg-temp = alloca <32 x float>, align 16
  %x = load <32 x float>, ptr %0, align 16, !tbaa !4
  store <32 x float> %x, ptr %indirect-arg-temp, align 16, !tbaa !4
  tail call void (...) @vararg(ptr noundef nonnull byval(<32 x float>) align 16 %indirect-arg-temp, i32 noundef %y) #2
  ret void
}

attributes #0 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #1 = { nocallback nofree nosync nounwind willreturn }
attributes #2 = { mustprogress }

!llvm.module.flags = !{!0, !1, !2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"frame-pointer", i32 2}
!4 = !{!5, !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
