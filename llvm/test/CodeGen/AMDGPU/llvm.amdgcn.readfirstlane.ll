; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple=amdgcn--amdhsa -mcpu=fiji -verify-machineinstrs < %s | FileCheck -enable-var-scope %s

define void @test_readfirstlane(ptr addrspace(1) %out, i32 %src) {
; CHECK-LABEL: test_readfirstlane:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    v_readfirstlane_b32 s4, v2
; CHECK-NEXT:    v_mov_b32_e32 v2, s4
; CHECK-NEXT:    flat_store_dword v[0:1], v2
; CHECK-NEXT:    s_waitcnt vmcnt(0)
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %readfirstlane = call i32 @llvm.amdgcn.readfirstlane(i32 %src)
  store i32 %readfirstlane, ptr addrspace(1) %out, align 4
  ret void
}

define amdgpu_kernel void @test_readfirstlane_imm(ptr addrspace(1) %out) {
; CHECK-LABEL: test_readfirstlane_imm:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_mov_b32 s0, 32
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use s0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_endpgm
  %readfirstlane = call i32 @llvm.amdgcn.readfirstlane(i32 32)
  call void asm sideeffect "; use $0", "s"(i32 %readfirstlane)
  ret void
}

define amdgpu_kernel void @test_readfirstlane_imm_fold(ptr addrspace(1) %out) {
; CHECK-LABEL: test_readfirstlane_imm_fold:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x0
; CHECK-NEXT:    v_mov_b32_e32 v2, 32
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_mov_b32_e32 v0, s0
; CHECK-NEXT:    v_mov_b32_e32 v1, s1
; CHECK-NEXT:    flat_store_dword v[0:1], v2
; CHECK-NEXT:    s_endpgm
  %readfirstlane = call i32 @llvm.amdgcn.readfirstlane(i32 32)
  store i32 %readfirstlane, ptr addrspace(1) %out, align 4
  ret void
}

define amdgpu_kernel void @test_readfirstlane_m0(ptr addrspace(1) %out) {
; CHECK-LABEL: test_readfirstlane_m0:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x0
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    s_mov_b32 m0, -1
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    v_mov_b32_e32 v2, m0
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_mov_b32_e32 v0, s0
; CHECK-NEXT:    v_mov_b32_e32 v1, s1
; CHECK-NEXT:    flat_store_dword v[0:1], v2
; CHECK-NEXT:    s_endpgm
  %m0 = call i32 asm "s_mov_b32 m0, -1", "={m0}"()
  %readfirstlane = call i32 @llvm.amdgcn.readfirstlane(i32 %m0)
  store i32 %readfirstlane, ptr addrspace(1) %out, align 4
  ret void
}

define amdgpu_kernel void @test_readfirstlane_copy_from_sgpr(ptr addrspace(1) %out) {
; CHECK-LABEL: test_readfirstlane_copy_from_sgpr:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x0
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    s_mov_b32 s2, 0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    v_mov_b32_e32 v2, s2
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_mov_b32_e32 v0, s0
; CHECK-NEXT:    v_mov_b32_e32 v1, s1
; CHECK-NEXT:    flat_store_dword v[0:1], v2
; CHECK-NEXT:    s_endpgm
  %sgpr = call i32 asm "s_mov_b32 $0, 0", "=s"()
  %readfirstlane = call i32 @llvm.amdgcn.readfirstlane(i32 %sgpr)
  store i32 %readfirstlane, ptr addrspace(1) %out, align 4
  ret void
}

define amdgpu_kernel void @test_readfirstlane_fi(ptr addrspace(1) %out) {
; CHECK-LABEL: test_readfirstlane_fi:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_add_u32 s0, s0, s9
; CHECK-NEXT:    s_addc_u32 s1, s1, 0
; CHECK-NEXT:    s_mov_b32 s4, 0
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use s4
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_endpgm
  %alloca = alloca i32, addrspace(5)
  %int = ptrtoint ptr addrspace(5) %alloca to i32
  %readfirstlane = call i32 @llvm.amdgcn.readfirstlane(i32 %int)
  call void asm sideeffect "; use $0", "s"(i32 %readfirstlane)
  ret void
}

define void @test_readfirstlane2_i32(ptr addrspace(1) %out, i32 %src) {
; CHECK-LABEL: test_readfirstlane2_i32:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    v_readfirstlane_b32 s4, v2
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use s4
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %x = call i32 @llvm.amdgcn.readfirstlane2.i32(i32 %src)
  call void asm sideeffect "; use $0", "s"(i32 %x)
  ret void
}

define void @test_readfirstlane2_i64(ptr addrspace(1) %out, i64 %src) {
; CHECK-LABEL: test_readfirstlane2_i64:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    v_readfirstlane_b32 s5, v3
; CHECK-NEXT:    v_readfirstlane_b32 s4, v2
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use s[4:5]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %x = call i64 @llvm.amdgcn.readfirstlane2.i64(i64 %src)
  call void asm sideeffect "; use $0", "s"(i64 %x)
  ret void
}

define void @test_readfirstlane2_v7i32(ptr addrspace(1) %out, <7 x i32> %src) {
; CHECK-LABEL: test_readfirstlane2_v7i32:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    v_readfirstlane_b32 s10, v8
; CHECK-NEXT:    v_readfirstlane_b32 s9, v7
; CHECK-NEXT:    v_readfirstlane_b32 s8, v6
; CHECK-NEXT:    v_readfirstlane_b32 s7, v5
; CHECK-NEXT:    v_readfirstlane_b32 s6, v4
; CHECK-NEXT:    v_readfirstlane_b32 s5, v3
; CHECK-NEXT:    v_readfirstlane_b32 s4, v2
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use s[4:10]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %x = call <7 x i32> @llvm.amdgcn.readfirstlane2.v7i32(<7 x i32> %src)
  call void asm sideeffect "; use $0", "s"(<7 x i32> %x)
  ret void
}

define void @test_readfirstlane2_f16(ptr addrspace(1) %out, half %src) {
; CHECK-LABEL: test_readfirstlane2_f16:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    v_readfirstlane_b32 s4, v2
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use s4
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %x = call half @llvm.amdgcn.readfirstlane2.f16(half %src)
  call void asm sideeffect "; use $0", "s"(half %x)
  ret void
}

define void @test_readfirstlane2_v2f16(ptr addrspace(1) %out, <2 x half> %src) {
; CHECK-LABEL: test_readfirstlane2_v2f16:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    v_readfirstlane_b32 s4, v2
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use s4
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %x = call <2 x half> @llvm.amdgcn.readfirstlane2.v2f16(<2 x half> %src)
  call void asm sideeffect "; use $0", "s"(<2 x half> %x)
  ret void
}

define void @test_readfirstlane2_bf16(ptr addrspace(1) %out, bfloat %src) {
; CHECK-LABEL: test_readfirstlane2_bf16:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    v_readfirstlane_b32 s4, v2
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use s4
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %x = call bfloat @llvm.amdgcn.readfirstlane2.bf16(bfloat %src)
  call void asm sideeffect "; use $0", "s"(bfloat %x)
  ret void
}

define void @test_readfirstlane2_v4bf16(ptr addrspace(1) %out, <4 x bfloat> %src) {
; CHECK-LABEL: test_readfirstlane2_v4bf16:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    v_readfirstlane_b32 s5, v3
; CHECK-NEXT:    v_readfirstlane_b32 s4, v2
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use s[4:5]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %x = call <4 x bfloat> @llvm.amdgcn.readfirstlane2.v4bf16(<4 x bfloat> %src)
  call void asm sideeffect "; use $0", "s"(<4 x bfloat> %x)
  ret void
}

define void @test_readfirstlane2_float(ptr addrspace(1) %out, float %src) {
; CHECK-LABEL: test_readfirstlane2_float:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    v_readfirstlane_b32 s4, v2
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use s4
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %x = call float @llvm.amdgcn.readfirstlane2.f32(float %src)
  call void asm sideeffect "; use $0", "s"(float %x)
  ret void
}

define void @test_readfirstlane2_p0(ptr addrspace(1) %out, ptr %src) {
; CHECK-LABEL: test_readfirstlane2_p0:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    v_readfirstlane_b32 s5, v3
; CHECK-NEXT:    v_readfirstlane_b32 s4, v2
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use s[4:5]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %x = call ptr @llvm.amdgcn.readfirstlane2.p0(ptr %src)
  call void asm sideeffect "; use $0", "s"(ptr %x)
  ret void
}

define void @test_readfirstlane2_v3p0(ptr addrspace(1) %out, <3 x ptr> %src) {
; CHECK-LABEL: test_readfirstlane2_v3p0:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    v_readfirstlane_b32 s9, v7
; CHECK-NEXT:    v_readfirstlane_b32 s8, v6
; CHECK-NEXT:    v_readfirstlane_b32 s7, v5
; CHECK-NEXT:    v_readfirstlane_b32 s6, v4
; CHECK-NEXT:    v_readfirstlane_b32 s5, v3
; CHECK-NEXT:    v_readfirstlane_b32 s4, v2
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use s[4:9]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %x = call <3 x ptr> @llvm.amdgcn.readfirstlane2.v3p0(<3 x ptr> %src)
  call void asm sideeffect "; use $0", "s"(<3 x ptr> %x)
  ret void
}
