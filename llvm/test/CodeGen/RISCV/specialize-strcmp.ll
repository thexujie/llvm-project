; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple=riscv64 -riscv-max-strcmp-specialize-length=10 -verify-machineinstrs -stop-after=finalize-isel < %s | FileCheck %s

target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n32:64-S128"
target triple = "riscv64-unknown-linux-gnu"

@str1 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@str2 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@str3 = private unnamed_addr constant [4 x i8] c"abc\00", align 1
@str4 = private unnamed_addr constant [2 x i8] c"a\00", align 8

define i32 @test_1(ptr %x) {
  ; CHECK-LABEL: name: test_1
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.4(0x40000000)
  ; CHECK-NEXT:   liveins: $x10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $x10
  ; CHECK-NEXT:   [[LBU:%[0-9]+]]:gpr = LBU [[COPY]], 0 :: (load (s8) from %ir.x)
  ; CHECK-NEXT:   BEQ [[LBU]], $x0, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.3(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADDI:%[0-9]+]]:gpr = ADDI [[LBU]], -97
  ; CHECK-NEXT:   BNE [[ADDI]], $x0, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[LBU1:%[0-9]+]]:gpr = LBU [[COPY]], 1 :: (load (s8) from %ir.x + 1)
  ; CHECK-NEXT:   [[SUB:%[0-9]+]]:gpr = SUB $x0, [[LBU1]]
  ; CHECK-NEXT:   PseudoBR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADDI1:%[0-9]+]]:gpr = ADDI $x0, -1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.entry:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:gpr = PHI [[ADDI1]], %bb.2, [[SUB]], %bb.3, [[ADDI]], %bb.4
  ; CHECK-NEXT:   [[SUB1:%[0-9]+]]:gpr = SUB $x0, [[PHI]]
  ; CHECK-NEXT:   $x10 = COPY [[SUB1]]
  ; CHECK-NEXT:   PseudoRET implicit $x10
entry:
  %call = call i32 @strcmp(ptr @str1, ptr %x)
  ret i32 %call
}

define i32 @test_2(ptr %x) {
  ; CHECK-LABEL: name: test_2
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.4(0x40000000)
  ; CHECK-NEXT:   liveins: $x10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $x10
  ; CHECK-NEXT:   [[LBU:%[0-9]+]]:gpr = LBU [[COPY]], 0 :: (load (s8) from %ir.x)
  ; CHECK-NEXT:   BEQ [[LBU]], $x0, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.3(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADDI:%[0-9]+]]:gpr = ADDI [[LBU]], -97
  ; CHECK-NEXT:   BNE [[ADDI]], $x0, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[LBU1:%[0-9]+]]:gpr = LBU [[COPY]], 1 :: (load (s8) from %ir.x + 1)
  ; CHECK-NEXT:   [[SUB:%[0-9]+]]:gpr = SUB $x0, [[LBU1]]
  ; CHECK-NEXT:   PseudoBR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADDI1:%[0-9]+]]:gpr = ADDI $x0, -1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.entry:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:gpr = PHI [[ADDI1]], %bb.2, [[SUB]], %bb.3, [[ADDI]], %bb.4
  ; CHECK-NEXT:   $x10 = COPY [[PHI]]
  ; CHECK-NEXT:   PseudoRET implicit $x10
entry:
  %call = call i32 @strcmp(ptr %x, ptr @str1)
  ret i32 %call
}

define i32 @test_3(ptr %x) {
  ; CHECK-LABEL: name: test_3
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.5(0x40000000)
  ; CHECK-NEXT:   liveins: $x10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $x10
  ; CHECK-NEXT:   [[LBU:%[0-9]+]]:gpr = LBU [[COPY]], 0 :: (load (s8) from %ir.x)
  ; CHECK-NEXT:   BEQ [[LBU]], $x0, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.5.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.4(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADDI:%[0-9]+]]:gpr = ADDI [[LBU]], -97
  ; CHECK-NEXT:   BNE [[ADDI]], $x0, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.6(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[LBU1:%[0-9]+]]:gpr = LBU [[COPY]], 1 :: (load (s8) from %ir.x + 1)
  ; CHECK-NEXT:   BEQ [[LBU1]], $x0, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.6.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.3(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADDI1:%[0-9]+]]:gpr = ADDI [[LBU1]], -98
  ; CHECK-NEXT:   BNE [[ADDI1]], $x0, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[LBU2:%[0-9]+]]:gpr = LBU [[COPY]], 2 :: (load (s8) from %ir.x + 2)
  ; CHECK-NEXT:   [[SUB:%[0-9]+]]:gpr = SUB $x0, [[LBU2]]
  ; CHECK-NEXT:   PseudoBR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADDI2:%[0-9]+]]:gpr = ADDI $x0, -1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.entry:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:gpr = PHI [[ADDI2]], %bb.2, [[SUB]], %bb.3, [[ADDI]], %bb.5, [[ADDI1]], %bb.6
  ; CHECK-NEXT:   $x10 = COPY [[PHI]]
  ; CHECK-NEXT:   PseudoRET implicit $x10
entry:
  %call = call i32 @strcmp(ptr %x, ptr @str2)
  ret i32 %call
}

define i32 @test_4(ptr %x) {
  ; CHECK-LABEL: name: test_4
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.5(0x40000000)
  ; CHECK-NEXT:   liveins: $x10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $x10
  ; CHECK-NEXT:   [[LBU:%[0-9]+]]:gpr = LBU [[COPY]], 0 :: (load (s8) from %ir.x)
  ; CHECK-NEXT:   BEQ [[LBU]], $x0, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.5.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.4(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADDI:%[0-9]+]]:gpr = ADDI [[LBU]], -97
  ; CHECK-NEXT:   BNE [[ADDI]], $x0, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.6(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[LBU1:%[0-9]+]]:gpr = LBU [[COPY]], 1 :: (load (s8) from %ir.x + 1)
  ; CHECK-NEXT:   BEQ [[LBU1]], $x0, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.6.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.3(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADDI1:%[0-9]+]]:gpr = ADDI [[LBU1]], -98
  ; CHECK-NEXT:   BNE [[ADDI1]], $x0, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[LBU2:%[0-9]+]]:gpr = LBU [[COPY]], 2 :: (load (s8) from %ir.x + 2)
  ; CHECK-NEXT:   [[SUB:%[0-9]+]]:gpr = SUB $x0, [[LBU2]]
  ; CHECK-NEXT:   PseudoBR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADDI2:%[0-9]+]]:gpr = ADDI $x0, -1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.entry:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:gpr = PHI [[ADDI2]], %bb.2, [[SUB]], %bb.3, [[ADDI]], %bb.5, [[ADDI1]], %bb.6
  ; CHECK-NEXT:   [[SUB1:%[0-9]+]]:gpr = SUB $x0, [[PHI]]
  ; CHECK-NEXT:   $x10 = COPY [[SUB1]]
  ; CHECK-NEXT:   PseudoRET implicit $x10
entry:
  %call = call i32 @strcmp(ptr @str2, ptr %x)
  ret i32 %call
}

define i32 @test_5(ptr %x) {
  ; CHECK-LABEL: name: test_5
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.6(0x40000000)
  ; CHECK-NEXT:   liveins: $x10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $x10
  ; CHECK-NEXT:   [[LBU:%[0-9]+]]:gpr = LBU [[COPY]], 0 :: (load (s8) from %ir.x)
  ; CHECK-NEXT:   BEQ [[LBU]], $x0, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.6.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.5(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADDI:%[0-9]+]]:gpr = ADDI [[LBU]], -97
  ; CHECK-NEXT:   BNE [[ADDI]], $x0, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.5.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.7(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[LBU1:%[0-9]+]]:gpr = LBU [[COPY]], 1 :: (load (s8) from %ir.x + 1)
  ; CHECK-NEXT:   BEQ [[LBU1]], $x0, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.7.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.4(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADDI1:%[0-9]+]]:gpr = ADDI [[LBU1]], -98
  ; CHECK-NEXT:   BNE [[ADDI1]], $x0, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.8(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[LBU2:%[0-9]+]]:gpr = LBU [[COPY]], 2 :: (load (s8) from %ir.x + 2)
  ; CHECK-NEXT:   BEQ [[LBU2]], $x0, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.8.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.3(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADDI2:%[0-9]+]]:gpr = ADDI [[LBU2]], -99
  ; CHECK-NEXT:   BNE [[ADDI2]], $x0, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[LBU3:%[0-9]+]]:gpr = LBU [[COPY]], 3 :: (load (s8) from %ir.x + 3)
  ; CHECK-NEXT:   [[SUB:%[0-9]+]]:gpr = SUB $x0, [[LBU3]]
  ; CHECK-NEXT:   PseudoBR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADDI3:%[0-9]+]]:gpr = ADDI $x0, -1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.entry:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:gpr = PHI [[ADDI3]], %bb.2, [[SUB]], %bb.3, [[ADDI]], %bb.6, [[ADDI1]], %bb.7, [[ADDI2]], %bb.8
  ; CHECK-NEXT:   [[SUB1:%[0-9]+]]:gpr = SUB $x0, [[PHI]]
  ; CHECK-NEXT:   $x10 = COPY [[SUB1]]
  ; CHECK-NEXT:   PseudoRET implicit $x10
entry:
  %call = call i32 @strcmp(ptr @str3, ptr %x)
  ret i32 %call
}

define i32 @test_6(ptr %x) {
  ; CHECK-LABEL: name: test_6
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.6(0x40000000)
  ; CHECK-NEXT:   liveins: $x10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $x10
  ; CHECK-NEXT:   [[LBU:%[0-9]+]]:gpr = LBU [[COPY]], 0 :: (load (s8) from %ir.x)
  ; CHECK-NEXT:   BEQ [[LBU]], $x0, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.6.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.5(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADDI:%[0-9]+]]:gpr = ADDI [[LBU]], -97
  ; CHECK-NEXT:   BNE [[ADDI]], $x0, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.5.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.7(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[LBU1:%[0-9]+]]:gpr = LBU [[COPY]], 1 :: (load (s8) from %ir.x + 1)
  ; CHECK-NEXT:   BEQ [[LBU1]], $x0, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.7.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.4(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADDI1:%[0-9]+]]:gpr = ADDI [[LBU1]], -98
  ; CHECK-NEXT:   BNE [[ADDI1]], $x0, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.8(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[LBU2:%[0-9]+]]:gpr = LBU [[COPY]], 2 :: (load (s8) from %ir.x + 2)
  ; CHECK-NEXT:   BEQ [[LBU2]], $x0, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.8.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.3(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADDI2:%[0-9]+]]:gpr = ADDI [[LBU2]], -99
  ; CHECK-NEXT:   BNE [[ADDI2]], $x0, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[LBU3:%[0-9]+]]:gpr = LBU [[COPY]], 3 :: (load (s8) from %ir.x + 3)
  ; CHECK-NEXT:   [[SUB:%[0-9]+]]:gpr = SUB $x0, [[LBU3]]
  ; CHECK-NEXT:   PseudoBR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADDI3:%[0-9]+]]:gpr = ADDI $x0, -1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.entry:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:gpr = PHI [[ADDI3]], %bb.2, [[SUB]], %bb.3, [[ADDI]], %bb.6, [[ADDI1]], %bb.7, [[ADDI2]], %bb.8
  ; CHECK-NEXT:   $x10 = COPY [[PHI]]
  ; CHECK-NEXT:   PseudoRET implicit $x10
entry:
  %call = call i32 @strcmp(ptr %x, ptr @str3)
  ret i32 %call
}

define i32 @test_7(ptr align 8 %x) {
  ; CHECK-LABEL: name: test_7
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.6(0x40000000)
  ; CHECK-NEXT:   liveins: $x10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $x10
  ; CHECK-NEXT:   [[LBU:%[0-9]+]]:gpr = LBU [[COPY]], 0 :: (load (s8) from %ir.x)
  ; CHECK-NEXT:   BEQ [[LBU]], $x0, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.6.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.5(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADDI:%[0-9]+]]:gpr = ADDI [[LBU]], -97
  ; CHECK-NEXT:   BNE [[ADDI]], $x0, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.5.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.7(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[LBU1:%[0-9]+]]:gpr = LBU [[COPY]], 1 :: (load (s8) from %ir.x + 1)
  ; CHECK-NEXT:   BEQ [[LBU1]], $x0, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.7.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.4(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADDI1:%[0-9]+]]:gpr = ADDI [[LBU1]], -98
  ; CHECK-NEXT:   BNE [[ADDI1]], $x0, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.8(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[LBU2:%[0-9]+]]:gpr = LBU [[COPY]], 2 :: (load (s8) from %ir.x + 2)
  ; CHECK-NEXT:   BEQ [[LBU2]], $x0, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.8.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.3(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADDI2:%[0-9]+]]:gpr = ADDI [[LBU2]], -99
  ; CHECK-NEXT:   BNE [[ADDI2]], $x0, %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[LBU3:%[0-9]+]]:gpr = LBU [[COPY]], 3 :: (load (s8) from %ir.x + 3)
  ; CHECK-NEXT:   [[SUB:%[0-9]+]]:gpr = SUB $x0, [[LBU3]]
  ; CHECK-NEXT:   PseudoBR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[ADDI3:%[0-9]+]]:gpr = ADDI $x0, -1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.entry:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:gpr = PHI [[ADDI3]], %bb.2, [[SUB]], %bb.3, [[ADDI]], %bb.6, [[ADDI1]], %bb.7, [[ADDI2]], %bb.8
  ; CHECK-NEXT:   [[SUB1:%[0-9]+]]:gpr = SUB $x0, [[PHI]]
  ; CHECK-NEXT:   $x10 = COPY [[SUB1]]
  ; CHECK-NEXT:   PseudoRET implicit $x10
entry:
  %call = call i32 @strcmp(ptr @str3, ptr %x)
  ret i32 %call
}

declare i32 @strcmp(ptr nocapture noundef, ptr nocapture noundef)
