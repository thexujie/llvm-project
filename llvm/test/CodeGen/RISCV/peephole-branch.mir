# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
# RUN: llc -o - %s -mtriple=riscv32 -run-pass=riscv-mi-peephole-opt | FileCheck %s

--- |
  define void @peephole_bne(ptr %a, ptr %b, ptr %c) {
  entry:
    %e = load i32, ptr %a, align 4
    %p = icmp ne i32 %e, %e
    br i1 %p, label %block1, label %block2

  block1:                                           ; preds = %entry
    store i32 %e, ptr %b, align 4
    br label %end_block

  block2:                                           ; preds = %entry
    store i32 87, ptr %c, align 4
    br label %end_block

  end_block:                                        ; preds = %block2, %block1
    ret void
  }

  define void @peephole_beq(ptr %a, ptr %b, ptr %c) {
  entry:
    %e = load i32, ptr %a, align 4
    %p = icmp eq i32 %e, %e
    br i1 %p, label %block1, label %block2

  block1:                                           ; preds = %entry
    store i32 %e, ptr %b, align 4
    br label %end_block

  block2:                                           ; preds = %entry
    store i32 87, ptr %c, align 4
    br label %end_block

  end_block:                                        ; preds = %block2, %block1
    ret void
  }

  define void @peephole_blt(ptr %a, ptr %b, ptr %c) {
  entry:
    %e = load i32, ptr %a, align 4
    %p = icmp slt i32 %e, %e
    br i1 %p, label %block1, label %block2

  block1:                                           ; preds = %entry
    store i32 %e, ptr %b, align 4
    br label %end_block

  block2:                                           ; preds = %entry
    store i32 87, ptr %c, align 4
    br label %end_block

  end_block:                                        ; preds = %block2, %block1
    ret void
  }

  define void @peephole_bltu(ptr %a, ptr %b, ptr %c) {
  entry:
    %e = load i32, ptr %a, align 4
    %p = icmp ult i32 %e, %e
    br i1 %p, label %block1, label %block2

  block1:                                           ; preds = %entry
    store i32 %e, ptr %b, align 4
    br label %end_block

  block2:                                           ; preds = %entry
    store i32 87, ptr %c, align 4
    br label %end_block

  end_block:                                        ; preds = %block2, %block1
    ret void
  }

  define void @peephole_bge(ptr %a, ptr %b, ptr %c) {
  entry:
    %e = load i32, ptr %a, align 4
    %p = icmp sge i32 %e, %e
    br i1 %p, label %block1, label %block2

  block1:                                           ; preds = %entry
    store i32 %e, ptr %b, align 4
    br label %end_block

  block2:                                           ; preds = %entry
    store i32 87, ptr %c, align 4
    br label %end_block

  end_block:                                        ; preds = %block2, %block1
    ret void
  }

  define void @peephole_bgeu(ptr %a, ptr %b, ptr %c) {
  entry:
    %e = load i32, ptr %a, align 4
    %p = icmp uge i32 %e, %e
    br i1 %p, label %block1, label %block2

  block1:                                           ; preds = %entry
    store i32 %e, ptr %b, align 4
    br label %end_block

  block2:                                           ; preds = %entry
    store i32 87, ptr %c, align 4
    br label %end_block

  end_block:                                        ; preds = %block2, %block1
    ret void
  }

...
---
name:            peephole_bne
alignment:       4
tracksRegLiveness: true
liveins:
  - { reg: '$x10' }
  - { reg: '$x11' }
  - { reg: '$x12' }
body:             |
  ; CHECK-LABEL: name: peephole_bne
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $x10, $x11, $x12
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $x13 = ADDI $x0, 1
  ; CHECK-NEXT:   PseudoBR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.block1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $x10, $x11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $x10 = LW killed renamable $x10, 0
  ; CHECK-NEXT:   SW killed renamable $x10, killed renamable $x11, 0
  ; CHECK-NEXT:   PseudoBR %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.block2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $x12
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $x10 = ADDI $x0, 87
  ; CHECK-NEXT:   SW killed renamable $x10, killed renamable $x12, 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3.end_block:
  ; CHECK-NEXT:   PseudoRET
  bb.0.entry:
    successors: %bb.1, %bb.2
    liveins: $x10, $x11, $x12

    renamable $x13 = ADDI $x0, 1
    BNE killed renamable $x13, $x13, %bb.2
    PseudoBR %bb.1

  bb.1.block1:
    liveins: $x10, $x11

    renamable $x10 = LW killed renamable $x10, 0
    SW killed renamable $x10, killed renamable $x11, 0
    PseudoBR %bb.3

  bb.2.block2:
    liveins: $x12

    renamable $x10 = ADDI $x0, 87
    SW killed renamable $x10, killed renamable $x12, 0

  bb.3.end_block:
    PseudoRET

...
---
name:            peephole_beq
alignment:       4
tracksRegLiveness: true
liveins:
  - { reg: '$x10' }
  - { reg: '$x11' }
  - { reg: '$x12' }
body:             |
  ; CHECK-LABEL: name: peephole_beq
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $x10, $x11, $x12
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoBR %bb.2
  ; CHECK-NEXT:   PseudoBR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.block1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $x10, $x11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $x10 = LW killed renamable $x10, 0
  ; CHECK-NEXT:   SW killed renamable $x10, killed renamable $x11, 0
  ; CHECK-NEXT:   PseudoBR %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.block2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $x12
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $x10 = ADDI $x0, 87
  ; CHECK-NEXT:   SW killed renamable $x10, killed renamable $x12, 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3.end_block:
  ; CHECK-NEXT:   PseudoRET
  bb.0.entry:
    successors: %bb.1, %bb.2
    liveins: $x10, $x11, $x12

    BEQ $x0, $x0, %bb.2
    PseudoBR %bb.1

  bb.1.block1:
    liveins: $x10, $x11

    renamable $x10 = LW killed renamable $x10, 0
    SW killed renamable $x10, killed renamable $x11, 0
    PseudoBR %bb.3

  bb.2.block2:
    liveins: $x12

    renamable $x10 = ADDI $x0, 87
    SW killed renamable $x10, killed renamable $x12, 0

  bb.3.end_block:
    PseudoRET

...
---
name:            peephole_blt
alignment:       4
tracksRegLiveness: true
liveins:
  - { reg: '$x10' }
  - { reg: '$x11' }
  - { reg: '$x12' }
body:             |
  ; CHECK-LABEL: name: peephole_blt
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $x10, $x11, $x12
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $x13 = ADDI $x0, 1
  ; CHECK-NEXT:   PseudoBR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.block1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $x10, $x11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $x10 = LW killed renamable $x10, 0
  ; CHECK-NEXT:   SW killed renamable $x10, killed renamable $x11, 0
  ; CHECK-NEXT:   PseudoBR %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.block2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $x12
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $x10 = ADDI $x0, 87
  ; CHECK-NEXT:   SW killed renamable $x10, killed renamable $x12, 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3.end_block:
  ; CHECK-NEXT:   PseudoRET
  bb.0.entry:
    successors: %bb.1, %bb.2
    liveins: $x10, $x11, $x12

    renamable $x13 = ADDI $x0, 1
    BLT killed renamable $x13, $x13, %bb.2
    PseudoBR %bb.1

  bb.1.block1:
    liveins: $x10, $x11

    renamable $x10 = LW killed renamable $x10, 0
    SW killed renamable $x10, killed renamable $x11, 0
    PseudoBR %bb.3

  bb.2.block2:
    liveins: $x12

    renamable $x10 = ADDI $x0, 87
    SW killed renamable $x10, killed renamable $x12, 0

  bb.3.end_block:
    PseudoRET

...
---
name:            peephole_bltu
alignment:       4
tracksRegLiveness: true
liveins:
  - { reg: '$x10' }
  - { reg: '$x11' }
  - { reg: '$x12' }
body:             |
  ; CHECK-LABEL: name: peephole_bltu
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $x10, $x11, $x12
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $x13 = ADDI $x0, 1
  ; CHECK-NEXT:   PseudoBR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.block1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $x10, $x11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $x10 = LW killed renamable $x10, 0
  ; CHECK-NEXT:   SW killed renamable $x10, killed renamable $x11, 0
  ; CHECK-NEXT:   PseudoBR %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.block2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $x12
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $x10 = ADDI $x0, 87
  ; CHECK-NEXT:   SW killed renamable $x10, killed renamable $x12, 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3.end_block:
  ; CHECK-NEXT:   PseudoRET
  bb.0.entry:
    successors: %bb.1, %bb.2
    liveins: $x10, $x11, $x12

    renamable $x13 = ADDI $x0, 1
    BLTU killed renamable $x13, $x13, %bb.2
    PseudoBR %bb.1

  bb.1.block1:
    liveins: $x10, $x11

    renamable $x10 = LW killed renamable $x10, 0
    SW killed renamable $x10, killed renamable $x11, 0
    PseudoBR %bb.3

  bb.2.block2:
    liveins: $x12

    renamable $x10 = ADDI $x0, 87
    SW killed renamable $x10, killed renamable $x12, 0

  bb.3.end_block:
    PseudoRET

...
---
name:            peephole_bge
alignment:       4
tracksRegLiveness: true
liveins:
  - { reg: '$x10' }
  - { reg: '$x11' }
  - { reg: '$x12' }
body:             |
  ; CHECK-LABEL: name: peephole_bge
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $x10, $x11, $x12
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoBR %bb.2
  ; CHECK-NEXT:   PseudoBR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.block1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $x10, $x11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $x10 = LW killed renamable $x10, 0
  ; CHECK-NEXT:   SW killed renamable $x10, killed renamable $x11, 0
  ; CHECK-NEXT:   PseudoBR %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.block2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $x12
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $x10 = ADDI $x0, 87
  ; CHECK-NEXT:   SW killed renamable $x10, killed renamable $x12, 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3.end_block:
  ; CHECK-NEXT:   PseudoRET
  bb.0.entry:
    successors: %bb.1, %bb.2
    liveins: $x10, $x11, $x12

    BGE $x0, $x0, %bb.2
    PseudoBR %bb.1

  bb.1.block1:
    liveins: $x10, $x11

    renamable $x10 = LW killed renamable $x10, 0
    SW killed renamable $x10, killed renamable $x11, 0
    PseudoBR %bb.3

  bb.2.block2:
    liveins: $x12

    renamable $x10 = ADDI $x0, 87
    SW killed renamable $x10, killed renamable $x12, 0

  bb.3.end_block:
    PseudoRET

...
---
name:            peephole_bgeu
alignment:       4
tracksRegLiveness: true
liveins:
  - { reg: '$x10' }
  - { reg: '$x11' }
  - { reg: '$x12' }
body:             |
  ; CHECK-LABEL: name: peephole_bgeu
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $x10, $x11, $x12
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoBR %bb.2
  ; CHECK-NEXT:   PseudoBR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.block1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $x10, $x11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $x10 = LW killed renamable $x10, 0
  ; CHECK-NEXT:   SW killed renamable $x10, killed renamable $x11, 0
  ; CHECK-NEXT:   PseudoBR %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.block2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $x12
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $x10 = ADDI $x0, 87
  ; CHECK-NEXT:   SW killed renamable $x10, killed renamable $x12, 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3.end_block:
  ; CHECK-NEXT:   PseudoRET
  bb.0.entry:
    successors: %bb.1, %bb.2
    liveins: $x10, $x11, $x12

    BGEU $x0, $x0, %bb.2
    PseudoBR %bb.1

  bb.1.block1:
    liveins: $x10, $x11

    renamable $x10 = LW killed renamable $x10, 0
    SW killed renamable $x10, killed renamable $x11, 0
    PseudoBR %bb.3

  bb.2.block2:
    liveins: $x12

    renamable $x10 = ADDI $x0, 87
    SW killed renamable $x10, killed renamable $x12, 0

  bb.3.end_block:
    PseudoRET

...
