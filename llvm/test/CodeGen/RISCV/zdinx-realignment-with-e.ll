; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc --mtriple=riscv32 --mattr=+e,+zdinx --target-abi ilp32e \
; RUN:   --verify-machineinstrs < %s | FileCheck %s
define void @func(ptr %__first, ptr %__start, ptr %add.ptr23) #0 {
; CHECK-LABEL: func:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi sp, sp, -24
; CHECK-NEXT:    .cfi_def_cfa_offset 24
; CHECK-NEXT:    sw ra, 20(sp) # 4-byte Folded Spill
; CHECK-NEXT:    sw s0, 16(sp) # 4-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -4
; CHECK-NEXT:    .cfi_offset s0, -8
; CHECK-NEXT:    addi s0, sp, 24
; CHECK-NEXT:    .cfi_def_cfa s0, 0
; CHECK-NEXT:    andi sp, sp, -8
; CHECK-NEXT:    lui a1, %hi(.LCPI0_0)
; CHECK-NEXT:    lw a4, %lo(.LCPI0_0)(a1)
; CHECK-NEXT:    lw a5, %lo(.LCPI0_0+4)(a1)
; CHECK-NEXT:    sw a4, 8(sp)
; CHECK-NEXT:    sw a5, 12(sp)
; CHECK-NEXT:    lui a1, %hi(.LCPI0_1)
; CHECK-NEXT:    lw a4, %lo(.LCPI0_1)(a1)
; CHECK-NEXT:    lw a5, %lo(.LCPI0_1+4)(a1)
; CHECK-NEXT:    sw a4, 0(sp)
; CHECK-NEXT:    sw a5, 4(sp)
; CHECK-NEXT:  .LBB0_1: # %do.body
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    lw a4, 0(zero)
; CHECK-NEXT:    lw a5, 4(zero)
; CHECK-NEXT:    fcvt.d.w t1, zero
; CHECK-NEXT:    sw t1, 0(a0)
; CHECK-NEXT:    sw t2, 4(a0)
; CHECK-NEXT:    lw t1, 8(sp)
; CHECK-NEXT:    lw t2, 12(sp)
; CHECK-NEXT:    flt.d a1, t1, a4
; CHECK-NEXT:    neg a1, a1
; CHECK-NEXT:    and a1, a1, a2
; CHECK-NEXT:    lw a4, 0(a1)
; CHECK-NEXT:    lw a5, 4(a1)
; CHECK-NEXT:    lw t1, 0(sp)
; CHECK-NEXT:    lw t2, 4(sp)
; CHECK-NEXT:    flt.d a1, a4, t1
; CHECK-NEXT:    beqz a1, .LBB0_1
; CHECK-NEXT:  # %bb.2: # %do.end
; CHECK-NEXT:    addi sp, s0, -24
; CHECK-NEXT:    lw ra, 20(sp) # 4-byte Folded Reload
; CHECK-NEXT:    lw s0, 16(sp) # 4-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 24
; CHECK-NEXT:    ret
entry:
  br label %do.body

do.body:                                          ; preds = %do.body, %entry
  store double 0.000000e+00, ptr %__first, align 8
  %0 = load double, ptr null, align 8
  %cmp.i51 = fcmp olt double 0x7FF8000000000000, %0
  %__child_i.2 = select i1 %cmp.i51, ptr %add.ptr23, ptr null
  %1 = load double, ptr %__child_i.2, align 8
  %cmp.i52 = fcmp olt double %1, 1.000000e+00
  br i1 %cmp.i52, label %do.end, label %do.body

do.end:                                           ; preds = %do.body
  ret void
}
