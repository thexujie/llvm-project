; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=aarch64-linux-gnu | FileCheck %s

declare  i4  @llvm.smul.fix.sat.i4   (i4,  i4, i32)
declare  i32 @llvm.smul.fix.sat.i32  (i32, i32, i32)
declare  i64 @llvm.smul.fix.sat.i64  (i64, i64, i32)

define i32 @func(i32 %x, i32 %y) nounwind {
; CHECK-LABEL: func:
; CHECK:       // %bb.0:
; CHECK-NEXT:    smull x9, w0, w1
; CHECK-NEXT:    mov w8, #2147483647 // =0x7fffffff
; CHECK-NEXT:    lsr x10, x9, #32
; CHECK-NEXT:    extr w9, w10, w9, #2
; CHECK-NEXT:    cmp w10, #1
; CHECK-NEXT:    csel w8, w8, w9, gt
; CHECK-NEXT:    cmn w10, #2
; CHECK-NEXT:    mov w9, #-2147483648 // =0x80000000
; CHECK-NEXT:    csel w0, w9, w8, lt
; CHECK-NEXT:    ret
  %tmp = call i32 @llvm.smul.fix.sat.i32(i32 %x, i32 %y, i32 2)
  ret i32 %tmp
}

define i64 @func2(i64 %x, i64 %y) nounwind {
; CHECK-LABEL: func2:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mul x9, x0, x1
; CHECK-NEXT:    mov x8, #9223372036854775807 // =0x7fffffffffffffff
; CHECK-NEXT:    smulh x10, x0, x1
; CHECK-NEXT:    extr x9, x10, x9, #2
; CHECK-NEXT:    cmp x10, #1
; CHECK-NEXT:    csel x8, x8, x9, gt
; CHECK-NEXT:    cmn x10, #2
; CHECK-NEXT:    mov x9, #-9223372036854775808 // =0x8000000000000000
; CHECK-NEXT:    csel x0, x9, x8, lt
; CHECK-NEXT:    ret
  %tmp = call i64 @llvm.smul.fix.sat.i64(i64 %x, i64 %y, i32 2)
  ret i64 %tmp
}

define i4 @func3(i4 %x, i4 %y) nounwind {
; CHECK-LABEL: func3:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sbfx w9, w1, #0, #4
; CHECK-NEXT:    lsl w10, w0, #28
; CHECK-NEXT:    mov w8, #2147483647 // =0x7fffffff
; CHECK-NEXT:    smull x9, w10, w9
; CHECK-NEXT:    lsr x10, x9, #32
; CHECK-NEXT:    extr w9, w10, w9, #2
; CHECK-NEXT:    cmp w10, #1
; CHECK-NEXT:    csel w8, w8, w9, gt
; CHECK-NEXT:    cmn w10, #2
; CHECK-NEXT:    mov w9, #-2147483648 // =0x80000000
; CHECK-NEXT:    csel w8, w9, w8, lt
; CHECK-NEXT:    asr w0, w8, #28
; CHECK-NEXT:    ret
  %tmp = call i4 @llvm.smul.fix.sat.i4(i4 %x, i4 %y, i32 2)
  ret i4 %tmp
}

;; These result in regular integer multiplication with a saturation check.
define i32 @func4(i32 %x, i32 %y) nounwind {
; CHECK-LABEL: func4:
; CHECK:       // %bb.0:
; CHECK-NEXT:    smull x9, w0, w1
; CHECK-NEXT:    eor w10, w0, w1
; CHECK-NEXT:    mov w8, #-2147483648 // =0x80000000
; CHECK-NEXT:    cmp w10, #0
; CHECK-NEXT:    cinv w8, w8, ge
; CHECK-NEXT:    cmp x9, w9, sxtw
; CHECK-NEXT:    csel w0, w8, w9, ne
; CHECK-NEXT:    ret
  %tmp = call i32 @llvm.smul.fix.sat.i32(i32 %x, i32 %y, i32 0)
  ret i32 %tmp
}

define i64 @func5(i64 %x, i64 %y) {
; CHECK-LABEL: func5:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mul x9, x0, x1
; CHECK-NEXT:    eor x11, x0, x1
; CHECK-NEXT:    mov x8, #-9223372036854775808 // =0x8000000000000000
; CHECK-NEXT:    cmp x11, #0
; CHECK-NEXT:    smulh x10, x0, x1
; CHECK-NEXT:    cinv x8, x8, ge
; CHECK-NEXT:    cmp x10, x9, asr #63
; CHECK-NEXT:    csel x0, x8, x9, ne
; CHECK-NEXT:    ret
  %tmp = call i64 @llvm.smul.fix.sat.i64(i64 %x, i64 %y, i32 0)
  ret i64 %tmp
}

define i4 @func6(i4 %x, i4 %y) nounwind {
; CHECK-LABEL: func6:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sbfx w9, w1, #0, #4
; CHECK-NEXT:    lsl w10, w0, #28
; CHECK-NEXT:    mov w8, #-2147483648 // =0x80000000
; CHECK-NEXT:    smull x11, w10, w9
; CHECK-NEXT:    eor w9, w10, w9
; CHECK-NEXT:    cmp w9, #0
; CHECK-NEXT:    cinv w8, w8, ge
; CHECK-NEXT:    cmp x11, w11, sxtw
; CHECK-NEXT:    csel w8, w8, w11, ne
; CHECK-NEXT:    asr w0, w8, #28
; CHECK-NEXT:    ret
  %tmp = call i4 @llvm.smul.fix.sat.i4(i4 %x, i4 %y, i32 0)
  ret i4 %tmp
}

define i64 @func7(i64 %x, i64 %y) nounwind {
; CHECK-LABEL: func7:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mul x9, x0, x1
; CHECK-NEXT:    mov w8, #2147483647 // =0x7fffffff
; CHECK-NEXT:    mov x11, #-2147483648 // =0xffffffff80000000
; CHECK-NEXT:    smulh x10, x0, x1
; CHECK-NEXT:    extr x9, x10, x9, #32
; CHECK-NEXT:    cmp x10, x8
; CHECK-NEXT:    mov x8, #9223372036854775807 // =0x7fffffffffffffff
; CHECK-NEXT:    csel x8, x8, x9, gt
; CHECK-NEXT:    cmp x10, x11
; CHECK-NEXT:    mov x9, #-9223372036854775808 // =0x8000000000000000
; CHECK-NEXT:    csel x0, x9, x8, lt
; CHECK-NEXT:    ret
  %tmp = call i64 @llvm.smul.fix.sat.i64(i64 %x, i64 %y, i32 32)
  ret i64 %tmp
}

define i64 @func8(i64 %x, i64 %y) nounwind {
; CHECK-LABEL: func8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mul x9, x0, x1
; CHECK-NEXT:    mov x8, #4611686018427387903 // =0x3fffffffffffffff
; CHECK-NEXT:    mov x11, #-4611686018427387904 // =0xc000000000000000
; CHECK-NEXT:    smulh x10, x0, x1
; CHECK-NEXT:    extr x9, x10, x9, #63
; CHECK-NEXT:    cmp x10, x8
; CHECK-NEXT:    mov x8, #9223372036854775807 // =0x7fffffffffffffff
; CHECK-NEXT:    csel x8, x8, x9, gt
; CHECK-NEXT:    cmp x10, x11
; CHECK-NEXT:    mov x9, #-9223372036854775808 // =0x8000000000000000
; CHECK-NEXT:    csel x0, x9, x8, lt
; CHECK-NEXT:    ret
  %tmp = call i64 @llvm.smul.fix.sat.i64(i64 %x, i64 %y, i32 63)
  ret i64 %tmp
}
