# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -o - -mtriple=aarch64-unknown-unknown -run-pass=aarch64-prelegalizer-combiner -verify-machineinstrs  %s | FileCheck %s

---
name:            and_trunc
body:             |
  bb.0:
    liveins: $w0, $w1
    ; CHECK-LABEL: name: and_trunc
    ; CHECK: liveins: $w0, $w1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $w0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $w1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $w0 = COPY [[AND]](s32)
    %0:_(s32) = COPY $w0
    %1:_(s32) = COPY $w1
    %2:_(s16) = G_TRUNC %0
    %3:_(s16) = G_TRUNC %1
    %4:_(s16) = G_AND %2, %3
    %5:_(s32) = G_ANYEXT %4
    $w0 = COPY %5
...
---
name:            and_trunc_multiuse_1
body:             |
  bb.0:
    liveins: $w0, $w1, $x2
    ; CHECK-LABEL: name: and_trunc_multiuse_1
    ; CHECK: liveins: $w0, $w1, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $w0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $w1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(p0) = COPY $x2
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[COPY]](s32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(s16) = G_TRUNC [[COPY1]](s32)
    ; CHECK-NEXT: G_STORE [[TRUNC]](s16), [[COPY2]](p0) :: (store (s16))
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s16) = G_AND [[TRUNC]], [[TRUNC1]]
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[AND]](s16)
    ; CHECK-NEXT: $w0 = COPY [[ANYEXT]](s32)
    %0:_(s32) = COPY $w0
    %1:_(s32) = COPY $w1
    %5:_(p0) = COPY $x2
    %2:_(s16) = G_TRUNC %0
    %3:_(s16) = G_TRUNC %1
    G_STORE %2, %5 :: (store (s16))
    %4:_(s16) = G_AND %2, %3
    %6:_(s32) = G_ANYEXT %4
    $w0 = COPY %6
...
---
name:            and_trunc_multiuse_2
body:             |
  bb.0:
    liveins: $w0, $w1, $x2
    ; CHECK-LABEL: name: and_trunc_multiuse_2
    ; CHECK: liveins: $w0, $w1, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $w0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $w1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(p0) = COPY $x2
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[COPY]](s32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(s16) = G_TRUNC [[COPY1]](s32)
    ; CHECK-NEXT: G_STORE [[TRUNC]](s16), [[COPY2]](p0) :: (store (s16))
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s16) = G_AND [[TRUNC]], [[TRUNC1]]
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[AND]](s16)
    ; CHECK-NEXT: $w0 = COPY [[ANYEXT]](s32)
    %0:_(s32) = COPY $w0
    %1:_(s32) = COPY $w1
    %5:_(p0) = COPY $x2
    %2:_(s16) = G_TRUNC %0
    %3:_(s16) = G_TRUNC %1
    G_STORE %2, %5 :: (store (s16))
    %4:_(s16) = G_AND %2, %3
    %6:_(s32) = G_ANYEXT %4
    $w0 = COPY %6
...
---
name:            and_trunc_vector
body:             |
  bb.0:
    liveins: $q0, $q1
    ; CHECK-LABEL: name: and_trunc_vector
    ; CHECK: liveins: $q0, $q1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<4 x s32>) = COPY $q0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<4 x s32>) = COPY $q1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(<4 x s32>) = G_AND [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(<4 x s16>) = G_TRUNC [[AND]](<4 x s32>)
    ; CHECK-NEXT: $x0 = COPY [[TRUNC]](<4 x s16>)
    %0:_(<4 x s32>) = COPY $q0
    %1:_(<4 x s32>) = COPY $q1
    %2:_(<4 x s16>) = G_TRUNC %0
    %3:_(<4 x s16>) = G_TRUNC %1
    %4:_(<4 x s16>) = G_AND %2, %3
    $x0 = COPY %4
...
---
name:            and_trunc_vector_multiuse
body:             |
  bb.0:
    liveins: $q0, $q1, $x0
    ; CHECK-LABEL: name: and_trunc_vector_multiuse
    ; CHECK: liveins: $q0, $q1, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<4 x s32>) = COPY $q0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<4 x s32>) = COPY $q1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(p0) = COPY $x2
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(<4 x s16>) = G_TRUNC [[COPY]](<4 x s32>)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(<4 x s16>) = G_TRUNC [[COPY1]](<4 x s32>)
    ; CHECK-NEXT: G_STORE [[TRUNC]](<4 x s16>), [[COPY2]](p0) :: (store (<4 x s16>))
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(<4 x s16>) = G_AND [[TRUNC]], [[TRUNC1]]
    ; CHECK-NEXT: $x0 = COPY [[AND]](<4 x s16>)
    %0:_(<4 x s32>) = COPY $q0
    %1:_(<4 x s32>) = COPY $q1
    %5:_(p0) = COPY $x2
    %2:_(<4 x s16>) = G_TRUNC %0
    %3:_(<4 x s16>) = G_TRUNC %1
    G_STORE %2, %5 :: (store (<4 x s16>))
    %4:_(<4 x s16>) = G_AND %2, %3
    $x0 = COPY %4
...
---
name:            and_trunc_freeze
body:             |
  bb.0:
    liveins: $w0, $w1
    ; CHECK-LABEL: name: and_trunc_freeze
    ; CHECK: liveins: $w0, $w1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $w0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $w1
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[COPY]](s32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(s16) = G_TRUNC [[COPY1]](s32)
    ; CHECK-NEXT: [[FREEZE:%[0-9]+]]:_(s16) = G_FREEZE [[TRUNC]]
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s16) = G_AND [[FREEZE]], [[TRUNC1]]
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[AND]](s16)
    ; CHECK-NEXT: $w0 = COPY [[ANYEXT]](s32)
    %0:_(s32) = COPY $w0
    %1:_(s32) = COPY $w1
    %2:_(s16) = G_TRUNC %0
    %3:_(s16) = G_TRUNC %1
    %6:_(s16) = G_FREEZE %2
    %4:_(s16) = G_AND %6, %3
    %5:_(s32) = G_ANYEXT %4
    $w0 = COPY %5
...
---
name:            and_trunc_freeze_both
body:             |
  bb.0:
    liveins: $w0, $w1
    ; CHECK-LABEL: name: and_trunc_freeze_both
    ; CHECK: liveins: $w0, $w1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $w0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $w1
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[COPY]](s32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(s16) = G_TRUNC [[COPY1]](s32)
    ; CHECK-NEXT: [[FREEZE:%[0-9]+]]:_(s16) = G_FREEZE [[TRUNC]]
    ; CHECK-NEXT: [[FREEZE1:%[0-9]+]]:_(s16) = G_FREEZE [[TRUNC1]]
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s16) = G_AND [[FREEZE]], [[FREEZE1]]
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[AND]](s16)
    ; CHECK-NEXT: $w0 = COPY [[ANYEXT]](s32)
    %0:_(s32) = COPY $w0
    %1:_(s32) = COPY $w1
    %2:_(s16) = G_TRUNC %0
    %3:_(s16) = G_TRUNC %1
    %6:_(s16) = G_FREEZE %2
    %7:_(s16) = G_FREEZE %3
    %4:_(s16) = G_AND %6, %7
    %5:_(s32) = G_ANYEXT %4
    $w0 = COPY %5
