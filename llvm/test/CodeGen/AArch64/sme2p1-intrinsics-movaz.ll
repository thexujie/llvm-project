; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple=aarch64-linux-gnu -mattr=+sme2p1 -verify-machineinstrs < %s | FileCheck %s

;MOVAZ (tile to vector, single)

;;
; Horiz
;;
define <vscale x 16 x i8> @test_readz_hor_z8_i8(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_hor_z8_i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.b, za0h.b[w12, 0]
; CHECK-NEXT:    movaz z0.b, za0h.b[w12, 14]
; CHECK-NEXT:    ret
  %res = call  <vscale x 16 x i8> @llvm.aarch64.sme.readz.horiz.nxv16i8(i32 0, i32 %slice)
  %slice.max = add i32 %slice, 14
  %res2 = call <vscale x 16 x i8> @llvm.aarch64.sme.readz.horiz.nxv16i8(i32 0, i32 %slice.max)
  ret <vscale x 16 x i8> %res2
}

define <vscale x 8 x i16> @test_readz_hor_z16_i16(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_hor_z16_i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.h, za0h.h[w12, 0]
; CHECK-NEXT:    movaz z0.h, za1h.h[w12, 7]
; CHECK-NEXT:    ret
  %res = call  <vscale x 8 x i16> @llvm.aarch64.sme.readz.horiz.nxv8i16(i32 0, i32 %slice)
  %slice.max = add i32 %slice, 7
  %res2 = call <vscale x 8 x i16> @llvm.aarch64.sme.readz.horiz.nxv8i16(i32 1, i32 %slice.max)
  ret <vscale x 8 x i16> %res2
}

define <vscale x 4 x i32> @test_readz_hor_z32_i32(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_hor_z32_i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.s, za0h.s[w12, 0]
; CHECK-NEXT:    movaz z0.s, za3h.s[w12, 3]
; CHECK-NEXT:    ret
  %res = call  <vscale x 4 x i32> @llvm.aarch64.sme.readz.horiz.nxv4i32(i32 0, i32 %slice)
  %slice.max = add i32 %slice, 3
  %res2 = call <vscale x 4 x i32> @llvm.aarch64.sme.readz.horiz.nxv4i32(i32 3, i32 %slice.max)
  ret <vscale x 4 x i32> %res2
}

define <vscale x 2 x i64> @test_readz_hor_z64_i64(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_hor_z64_i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.d, za0h.d[w12, 0]
; CHECK-NEXT:    movaz z1.d, za7h.d[w12, 1]
; CHECK-NEXT:    ret
  %res = call  <vscale x 2 x i64> @llvm.aarch64.sme.readz.horiz.nxv2i64(i32 0, i32 %slice)
  %slice.max = add i32 %slice, 1
  %res2 = call <vscale x 2 x i64> @llvm.aarch64.sme.readz.horiz.nxv2i64(i32 7, i32 %slice.max)
  ret <vscale x 2 x i64> %res
}

define <vscale x 8 x bfloat> @test_readz_hor_z16_bf16(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_hor_z16_bf16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.h, za0h.h[w12, 0]
; CHECK-NEXT:    movaz z0.h, za1h.h[w12, 7]
; CHECK-NEXT:    ret
  %res = call  <vscale x 8 x bfloat> @llvm.aarch64.sme.readz.horiz.nxv8bf16(i32 0, i32 %slice)
  %slice.max = add i32 %slice, 7
  %res2 = call <vscale x 8 x bfloat> @llvm.aarch64.sme.readz.horiz.nxv8bf16(i32 1, i32 %slice.max)
  ret <vscale x 8 x bfloat> %res2
}

define <vscale x 8 x half> @test_readz_hor_z16_f16(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_hor_z16_f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.h, za0h.h[w12, 0]
; CHECK-NEXT:    movaz z0.h, za1h.h[w12, 7]
; CHECK-NEXT:    ret
  %res = call  <vscale x 8 x half> @llvm.aarch64.sme.readz.horiz.nxv8f16(i32 0, i32 %slice)
  %slice.max = add i32 %slice, 7
  %res2 = call <vscale x 8 x half> @llvm.aarch64.sme.readz.horiz.nxv8f16(i32 1, i32 %slice.max)
  ret <vscale x 8 x half> %res2
}

define <vscale x 4 x float> @test_readz_hor_z32_f32(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_hor_z32_f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.s, za0h.s[w12, 0]
; CHECK-NEXT:    movaz z0.s, za3h.s[w12, 3]
; CHECK-NEXT:    ret
  %res = call  <vscale x 4 x float> @llvm.aarch64.sme.readz.horiz.nxv4f32(i32 0, i32 %slice)
  %slice.max = add i32 %slice, 3
  %res2 = call <vscale x 4 x float> @llvm.aarch64.sme.readz.horiz.nxv4f32(i32 3, i32 %slice.max)
  ret <vscale x 4 x float> %res2
}

define <vscale x 2 x double> @test_readz_hor_z64_f64(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_hor_z64_f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.d, za0h.d[w12, 0]
; CHECK-NEXT:    movaz z1.d, za7h.d[w12, 1]
; CHECK-NEXT:    ret
  %res = call  <vscale x 2 x double> @llvm.aarch64.sme.readz.horiz.nxv2f64(i32 0, i32 %slice)
  %slice.max = add i32 %slice, 1
  %res2 = call <vscale x 2 x double> @llvm.aarch64.sme.readz.horiz.nxv2f64(i32 7, i32 %slice.max)
  ret <vscale x 2 x double> %res
}

define <vscale x 16 x i8> @test_readz_hor_z128_i8(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_hor_z128_i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.q, za0h.q[w12, 0]
; CHECK-NEXT:    movaz z0.q, za15h.q[w12, 0]
; CHECK-NEXT:    ret
  %res = call  <vscale x 16 x i8> @llvm.aarch64.sme.readz.q.horiz.nxv16i8(i32 0, i32 %slice)
  %res2 = call <vscale x 16 x i8> @llvm.aarch64.sme.readz.q.horiz.nxv16i8(i32 15, i32 %slice)
  ret <vscale x 16 x i8> %res2
}

define <vscale x 8 x i16> @test_readz_hor_z128_i16(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_hor_z128_i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.q, za0h.q[w12, 0]
; CHECK-NEXT:    movaz z0.q, za15h.q[w12, 0]
; CHECK-NEXT:    ret
  %res = call  <vscale x 8 x i16> @llvm.aarch64.sme.readz.q.horiz.nxv8i16(i32 0, i32 %slice)
  %res2 = call <vscale x 8 x i16> @llvm.aarch64.sme.readz.q.horiz.nxv8i16(i32 15, i32 %slice)
  ret <vscale x 8 x i16> %res2
}

define <vscale x 4 x i32> @test_readz_hor_z128_i32(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_hor_z128_i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.q, za0h.q[w12, 0]
; CHECK-NEXT:    movaz z0.q, za15h.q[w12, 0]
; CHECK-NEXT:    ret
  %res = call  <vscale x 4 x i32> @llvm.aarch64.sme.readz.q.horiz.nxv4i32(i32 0, i32 %slice)
  %res2 = call <vscale x 4 x i32> @llvm.aarch64.sme.readz.q.horiz.nxv4i32(i32 15, i32 %slice)
  ret <vscale x 4 x i32> %res2
}

define <vscale x 2 x i64> @test_readz_hor_z128_i64(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_hor_z128_i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.q, za0h.q[w12, 0]
; CHECK-NEXT:    movaz z1.q, za15h.q[w12, 0]
; CHECK-NEXT:    ret
  %res = call  <vscale x 2 x i64> @llvm.aarch64.sme.readz.q.horiz.nxv2i64(i32 0, i32 %slice)
  %res2 = call <vscale x 2 x i64> @llvm.aarch64.sme.readz.q.horiz.nxv2i64(i32 15, i32 %slice)
  ret <vscale x 2 x i64> %res
}

define <vscale x 8 x bfloat> @test_readz_hor_z128_bf16(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_hor_z128_bf16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.q, za0h.q[w12, 0]
; CHECK-NEXT:    movaz z0.q, za15h.q[w12, 0]
; CHECK-NEXT:    ret
  %res = call  <vscale x 8 x bfloat> @llvm.aarch64.sme.readz.q.horiz.nxv8bf16(i32 0, i32 %slice)
  %res2 = call <vscale x 8 x bfloat> @llvm.aarch64.sme.readz.q.horiz.nxv8bf16(i32 15, i32 %slice)
  ret <vscale x 8 x bfloat> %res2
}

define <vscale x 8 x half> @test_readz_hor_z128_f16(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_hor_z128_f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.q, za0h.q[w12, 0]
; CHECK-NEXT:    movaz z0.q, za15h.q[w12, 0]
; CHECK-NEXT:    ret
  %res = call  <vscale x 8 x half> @llvm.aarch64.sme.readz.q.horiz.nxv8f16(i32 0, i32 %slice)
  %res2 = call <vscale x 8 x half> @llvm.aarch64.sme.readz.q.horiz.nxv8f16(i32 15, i32 %slice)
  ret <vscale x 8 x half> %res2
}

define <vscale x 4 x float> @test_readz_hor_z128_f32(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_hor_z128_f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.q, za0h.q[w12, 0]
; CHECK-NEXT:    movaz z0.q, za15h.q[w12, 0]
; CHECK-NEXT:    ret
  %res = call  <vscale x 4 x float> @llvm.aarch64.sme.readz.q.horiz.nxv4f32(i32 0, i32 %slice)
  %res2 = call <vscale x 4 x float> @llvm.aarch64.sme.readz.q.horiz.nxv4f32(i32 15, i32 %slice)
  ret <vscale x 4 x float> %res2
}

define <vscale x 2 x double> @test_readz_hor_z128_f64(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_hor_z128_f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.q, za0h.q[w12, 0]
; CHECK-NEXT:    movaz z1.q, za15h.q[w12, 0]
; CHECK-NEXT:    ret
  %res = call  <vscale x 2 x double> @llvm.aarch64.sme.readz.q.horiz.nxv2f64(i32 0, i32 %slice)
  %res2 = call <vscale x 2 x double> @llvm.aarch64.sme.readz.q.horiz.nxv2f64(i32 15, i32 %slice)
  ret <vscale x 2 x double> %res
}

;;
; Vert
;;
define <vscale x 16 x i8> @test_readz_ver_z8_i8(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_ver_z8_i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.b, za0v.b[w12, 0]
; CHECK-NEXT:    movaz z0.b, za0v.b[w12, 14]
; CHECK-NEXT:    ret
  %res = call  <vscale x 16 x i8> @llvm.aarch64.sme.readz.vert.nxv16i8(i32 0, i32 %slice)
  %slice.max = add i32 %slice, 14
  %res2 = call <vscale x 16 x i8> @llvm.aarch64.sme.readz.vert.nxv16i8(i32 0, i32 %slice.max)
  ret <vscale x 16 x i8> %res2
}

define <vscale x 8 x i16> @test_readz_ver_z16_i16(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_ver_z16_i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.h, za0v.h[w12, 0]
; CHECK-NEXT:    movaz z0.h, za1v.h[w12, 7]
; CHECK-NEXT:    ret
  %res = call  <vscale x 8 x i16> @llvm.aarch64.sme.readz.vert.nxv8i16(i32 0, i32 %slice)
  %slice.max = add i32 %slice, 7
  %res2 = call <vscale x 8 x i16> @llvm.aarch64.sme.readz.vert.nxv8i16(i32 1, i32 %slice.max)
  ret <vscale x 8 x i16> %res2
}

define <vscale x 4 x i32> @test_readz_ver_z32_i32(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_ver_z32_i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.s, za0v.s[w12, 0]
; CHECK-NEXT:    movaz z0.s, za3v.s[w12, 3]
; CHECK-NEXT:    ret
  %res = call  <vscale x 4 x i32> @llvm.aarch64.sme.readz.vert.nxv4i32(i32 0, i32 %slice)
  %slice.max = add i32 %slice, 3
  %res2 = call <vscale x 4 x i32> @llvm.aarch64.sme.readz.vert.nxv4i32(i32 3, i32 %slice.max)
  ret <vscale x 4 x i32> %res2
}

define <vscale x 2 x i64> @test_readz_ver_z64_i64(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_ver_z64_i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.d, za0v.d[w12, 0]
; CHECK-NEXT:    movaz z1.d, za7v.d[w12, 1]
; CHECK-NEXT:    ret
  %res = call  <vscale x 2 x i64> @llvm.aarch64.sme.readz.vert.nxv2i64(i32 0, i32 %slice)
  %slice.max = add i32 %slice, 1
  %res2 = call <vscale x 2 x i64> @llvm.aarch64.sme.readz.vert.nxv2i64(i32 7, i32 %slice.max)
  ret <vscale x 2 x i64> %res
}

define <vscale x 8 x bfloat> @test_readz_ver_z16_bf16(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_ver_z16_bf16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.h, za0v.h[w12, 0]
; CHECK-NEXT:    movaz z0.h, za1v.h[w12, 7]
; CHECK-NEXT:    ret
  %res = call  <vscale x 8 x bfloat> @llvm.aarch64.sme.readz.vert.nxv8bf16(i32 0, i32 %slice)
  %slice.max = add i32 %slice, 7
  %res2 = call <vscale x 8 x bfloat> @llvm.aarch64.sme.readz.vert.nxv8bf16(i32 1, i32 %slice.max)
  ret <vscale x 8 x bfloat> %res2
}

define <vscale x 8 x half> @test_readz_ver_z16_f16(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_ver_z16_f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.h, za0v.h[w12, 0]
; CHECK-NEXT:    movaz z0.h, za1v.h[w12, 7]
; CHECK-NEXT:    ret
  %res = call  <vscale x 8 x half> @llvm.aarch64.sme.readz.vert.nxv8f16(i32 0, i32 %slice)
  %slice.max = add i32 %slice, 7
  %res2 = call <vscale x 8 x half> @llvm.aarch64.sme.readz.vert.nxv8f16(i32 1, i32 %slice.max)
  ret <vscale x 8 x half> %res2
}

define <vscale x 4 x float> @test_readz_ver_z32_f32(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_ver_z32_f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.s, za0v.s[w12, 0]
; CHECK-NEXT:    movaz z0.s, za3v.s[w12, 3]
; CHECK-NEXT:    ret
  %res = call  <vscale x 4 x float> @llvm.aarch64.sme.readz.vert.nxv4f32(i32 0, i32 %slice)
  %slice.max = add i32 %slice, 3
  %res2 = call <vscale x 4 x float> @llvm.aarch64.sme.readz.vert.nxv4f32(i32 3, i32 %slice.max)
  ret <vscale x 4 x float> %res2
}

define <vscale x 2 x double> @test_readz_ver_z64_f64(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_ver_z64_f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.d, za0v.d[w12, 0]
; CHECK-NEXT:    movaz z1.d, za7v.d[w12, 1]
; CHECK-NEXT:    ret
  %res = call  <vscale x 2 x double> @llvm.aarch64.sme.readz.vert.nxv2f64(i32 0, i32 %slice)
  %slice.max = add i32 %slice, 1
  %res2 = call <vscale x 2 x double> @llvm.aarch64.sme.readz.vert.nxv2f64(i32 7, i32 %slice.max)
  ret <vscale x 2 x double> %res
}

define <vscale x 16 x i8> @test_readz_ver_z128_i8(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_ver_z128_i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.q, za0v.q[w12, 0]
; CHECK-NEXT:    movaz z0.q, za15v.q[w12, 0]
; CHECK-NEXT:    ret
  %res = call  <vscale x 16 x i8> @llvm.aarch64.sme.readz.q.vert.nxv16i8(i32 0, i32 %slice)
  %res2 = call <vscale x 16 x i8> @llvm.aarch64.sme.readz.q.vert.nxv16i8(i32 15, i32 %slice)
  ret <vscale x 16 x i8> %res2
}

define <vscale x 8 x i16> @test_readz_ver_z128_i16(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_ver_z128_i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.q, za0v.q[w12, 0]
; CHECK-NEXT:    movaz z0.q, za15v.q[w12, 0]
; CHECK-NEXT:    ret
  %res = call  <vscale x 8 x i16> @llvm.aarch64.sme.readz.q.vert.nxv8i16(i32 0, i32 %slice)
  %res2 = call <vscale x 8 x i16> @llvm.aarch64.sme.readz.q.vert.nxv8i16(i32 15, i32 %slice)
  ret <vscale x 8 x i16> %res2
}

define <vscale x 4 x i32> @test_readz_ver_z128_i32(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_ver_z128_i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.q, za0v.q[w12, 0]
; CHECK-NEXT:    movaz z0.q, za15v.q[w12, 0]
; CHECK-NEXT:    ret
  %res = call  <vscale x 4 x i32> @llvm.aarch64.sme.readz.q.vert.nxv4i32(i32 0, i32 %slice)
  %res2 = call <vscale x 4 x i32> @llvm.aarch64.sme.readz.q.vert.nxv4i32(i32 15, i32 %slice)
  ret <vscale x 4 x i32> %res2
}

define <vscale x 2 x i64> @test_readz_ver_z128_i64(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_ver_z128_i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.q, za0v.q[w12, 0]
; CHECK-NEXT:    movaz z1.q, za15v.q[w12, 0]
; CHECK-NEXT:    ret
  %res = call  <vscale x 2 x i64> @llvm.aarch64.sme.readz.q.vert.nxv2i64(i32 0, i32 %slice)
  %res2 = call <vscale x 2 x i64> @llvm.aarch64.sme.readz.q.vert.nxv2i64(i32 15, i32 %slice)
  ret <vscale x 2 x i64> %res
}

define <vscale x 8 x bfloat> @test_readz_ver_z128_bf16(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_ver_z128_bf16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.q, za0v.q[w12, 0]
; CHECK-NEXT:    movaz z0.q, za15v.q[w12, 0]
; CHECK-NEXT:    ret
  %res = call  <vscale x 8 x bfloat> @llvm.aarch64.sme.readz.q.vert.nxv8bf16(i32 0, i32 %slice)
  %res2 = call <vscale x 8 x bfloat> @llvm.aarch64.sme.readz.q.vert.nxv8bf16(i32 15, i32 %slice)
  ret <vscale x 8 x bfloat> %res2
}

define <vscale x 8 x half> @test_readz_ver_z128_f16(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_ver_z128_f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.q, za0v.q[w12, 0]
; CHECK-NEXT:    movaz z0.q, za15v.q[w12, 0]
; CHECK-NEXT:    ret
  %res = call  <vscale x 8 x half> @llvm.aarch64.sme.readz.q.vert.nxv8f16(i32 0, i32 %slice)
  %res2 = call <vscale x 8 x half> @llvm.aarch64.sme.readz.q.vert.nxv8f16(i32 15, i32 %slice)
  ret <vscale x 8 x half> %res2
}

define <vscale x 4 x float> @test_readz_ver_z128_f32(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_ver_z128_f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.q, za0v.q[w12, 0]
; CHECK-NEXT:    movaz z0.q, za15v.q[w12, 0]
; CHECK-NEXT:    ret
  %res = call  <vscale x 4 x float> @llvm.aarch64.sme.readz.q.vert.nxv4f32(i32 0, i32 %slice)
  %res2 = call <vscale x 4 x float> @llvm.aarch64.sme.readz.q.vert.nxv4f32(i32 15, i32 %slice)
  ret <vscale x 4 x float> %res2
}

define <vscale x 2 x double> @test_readz_ver_z128_f64(i32 %tile, i32 %slice) {
; CHECK-LABEL: test_readz_ver_z128_f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w12, w1
; CHECK-NEXT:    movaz z0.q, za0v.q[w12, 0]
; CHECK-NEXT:    movaz z1.q, za15v.q[w12, 0]
; CHECK-NEXT:    ret
  %res = call  <vscale x 2 x double> @llvm.aarch64.sme.readz.q.vert.nxv2f64(i32 0, i32 %slice)
  %res2 = call <vscale x 2 x double> @llvm.aarch64.sme.readz.q.vert.nxv2f64(i32 15, i32 %slice)
  ret <vscale x 2 x double> %res
}

declare <vscale x 16 x i8> @llvm.aarch64.sme.readz.horiz.nxv16i8(i32, i32)
declare <vscale x 8 x i16> @llvm.aarch64.sme.readz.horiz.nxv8i16(i32, i32)
declare <vscale x 4 x i32> @llvm.aarch64.sme.readz.horiz.nxv4i32(i32, i32)
declare <vscale x 2 x i64> @llvm.aarch64.sme.readz.horiz.nxv2i64(i32, i32)
declare <vscale x 8 x bfloat> @llvm.aarch64.sme.readz.horiz.nxv8bf16(i32, i32)
declare <vscale x 8 x half> @llvm.aarch64.sme.readz.horiz.nxv8f16(i32, i32)
declare <vscale x 4 x float> @llvm.aarch64.sme.readz.horiz.nxv4f32(i32, i32)
declare <vscale x 2 x double> @llvm.aarch64.sme.readz.horiz.nxv2f64(i32, i32)
declare <vscale x 16 x i8> @llvm.aarch64.sme.readz.q.horiz.nxv16i8(i32, i32)
declare <vscale x 8 x i16> @llvm.aarch64.sme.readz.q.horiz.nxv8i16(i32, i32)
declare <vscale x 4 x i32> @llvm.aarch64.sme.readz.q.horiz.nxv4i32(i32, i32)
declare <vscale x 2 x i64> @llvm.aarch64.sme.readz.q.horiz.nxv2i64(i32, i32)
declare <vscale x 8 x bfloat> @llvm.aarch64.sme.readz.q.horiz.nxv8bf16(i32, i32)
declare <vscale x 8 x half> @llvm.aarch64.sme.readz.q.horiz.nxv8f16(i32, i32)
declare <vscale x 4 x float> @llvm.aarch64.sme.readz.q.horiz.nxv4f32(i32, i32)
declare <vscale x 2 x double> @llvm.aarch64.sme.readz.q.horiz.nxv2f64(i32, i32)


declare <vscale x 16 x i8> @llvm.aarch64.sme.readz.vert.nxv16i8(i32, i32)
declare <vscale x 8 x i16> @llvm.aarch64.sme.readz.vert.nxv8i16(i32, i32)
declare <vscale x 4 x i32> @llvm.aarch64.sme.readz.vert.nxv4i32(i32, i32)
declare <vscale x 2 x i64> @llvm.aarch64.sme.readz.vert.nxv2i64(i32, i32)
declare <vscale x 8 x bfloat> @llvm.aarch64.sme.readz.vert.nxv8bf16(i32, i32)
declare <vscale x 8 x half> @llvm.aarch64.sme.readz.vert.nxv8f16(i32, i32)
declare <vscale x 4 x float> @llvm.aarch64.sme.readz.vert.nxv4f32(i32, i32)
declare <vscale x 2 x double> @llvm.aarch64.sme.readz.vert.nxv2f64(i32, i32)
declare <vscale x 16 x i8> @llvm.aarch64.sme.readz.q.vert.nxv16i8(i32, i32)
declare <vscale x 8 x i16> @llvm.aarch64.sme.readz.q.vert.nxv8i16(i32, i32)
declare <vscale x 4 x i32> @llvm.aarch64.sme.readz.q.vert.nxv4i32(i32, i32)
declare <vscale x 2 x i64> @llvm.aarch64.sme.readz.q.vert.nxv2i64(i32, i32)
declare <vscale x 8 x bfloat> @llvm.aarch64.sme.readz.q.vert.nxv8bf16(i32, i32)
declare <vscale x 8 x half> @llvm.aarch64.sme.readz.q.vert.nxv8f16(i32, i32)
declare <vscale x 4 x float> @llvm.aarch64.sme.readz.q.vert.nxv4f32(i32, i32)
declare <vscale x 2 x double> @llvm.aarch64.sme.readz.q.vert.nxv2f64(i32, i32)
