; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt %s -passes=instcombine -S | FileCheck %s

define i32 @test_invert_bool(i32 %call, i32 %a) {
; CHECK-LABEL: define i32 @test_invert_bool(
; CHECK-SAME: i32 [[CALL:%.*]], i32 [[A:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i32 [[CALL]], 0
; CHECK-NEXT:    call void @llvm.dbg.value(metadata i1 [[TOBOOL_NOT]], metadata [[META3:![0-9]+]], metadata !DIExpression(DW_OP_constu, 18446744073709551615, DW_OP_xor, DW_OP_LLVM_convert, 1, DW_ATE_unsigned, DW_OP_LLVM_convert, 32, DW_ATE_unsigned, DW_OP_stack_value)), !dbg [[DBG8:![0-9]+]]
; CHECK-NEXT:    [[TMP0:%.*]] = and i32 [[A]], 1
; CHECK-NEXT:    [[AND:%.*]] = select i1 [[TOBOOL_NOT]], i32 0, i32 [[TMP0]]
; CHECK-NEXT:    ret i32 [[AND]]
;
entry:
  %tobool = icmp ne i32 %call, 0
  %land.ext = zext i1 %tobool to i32
  call void @llvm.dbg.value(metadata i32 %land.ext, metadata !11, metadata !DIExpression()), !dbg !16
  %and = and i32 %land.ext, %a
  ret i32 %and
}

declare void @llvm.dbg.value(metadata, metadata, metadata)

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!10}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "test.c", directory: "/")
!5 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!10 = !{i32 2, !"Debug Info Version", i32 3}
!11 = !DILocalVariable(name: "var", scope: !12, type: !5)
!12 = distinct !DISubprogram(name: "test", scope: !1, file: !1, type: !13, unit: !0)
!13 = !DISubroutineType(types: !14)
!14 = !{null}
!16 = !DILocation(scope: !12)
