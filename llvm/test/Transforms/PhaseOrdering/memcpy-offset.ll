; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt < %s -passes=memcpyopt,dse,instcombine -S -verify-memoryssa | FileCheck --check-prefix=CUSTOM %s
; RUN: opt < %s -O2 -S | FileCheck --check-prefix=O2 %s

%buf = type [7 x i8]

; Check that we eliminate all `memcpy` calls in this function.
define void @forward_offset_and_store(ptr %dep_src) {
; CUSTOM-LABEL: define void @forward_offset_and_store(
; CUSTOM-SAME: ptr [[DEP_SRC:%.*]]) {
; CUSTOM-NEXT:    store i8 1, ptr [[DEP_SRC]], align 1
; CUSTOM-NEXT:    [[DEP_SRC_END:%.*]] = getelementptr inbounds i8, ptr [[DEP_SRC]], i64 6
; CUSTOM-NEXT:    store i8 1, ptr [[DEP_SRC_END]], align 1
; CUSTOM-NEXT:    ret void
;
; O2-LABEL: define void @forward_offset_and_store(
; O2-SAME: ptr nocapture writeonly [[DEP_SRC:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] {
; O2-NEXT:    store i8 1, ptr [[DEP_SRC]], align 1
; O2-NEXT:    [[DEP_SRC_END:%.*]] = getelementptr inbounds i8, ptr [[DEP_SRC]], i64 6
; O2-NEXT:    store i8 1, ptr [[DEP_SRC_END]], align 1
; O2-NEXT:    ret void
;
  %dep_dest = alloca %buf, align 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %dep_dest, ptr align 1 %dep_src, i64 7, i1 false)
  store i8 1, ptr %dep_src, align 1
  %dep_src_end = getelementptr inbounds i8, ptr %dep_src, i64 6
  store i8 1, ptr %dep_src_end, align 1
  %src = getelementptr inbounds i8, ptr %dep_dest, i64 1
  %dest = getelementptr inbounds i8, ptr %dep_src, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %dest, ptr align 1 %src, i64 5, i1 false)
  ret void
}
