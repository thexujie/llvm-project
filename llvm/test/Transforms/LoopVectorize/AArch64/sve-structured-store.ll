; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -mtriple=aarch64 -mattr=+sve -S -passes=loop-vectorize,interleaved-access  -enable-masked-interleaved-mem-accesses=true -enable-shuffle-padding=true -aarch64-sve-vector-bits-min=256 < %s -o - | FileCheck %s --check-prefixes=ENABLE-SHUFFLE-PADDING
; RUN: opt -mtriple=aarch64 -mattr=+sve -S -passes=loop-vectorize,interleaved-access  -enable-masked-interleaved-mem-accesses=true -enable-shuffle-padding=false  -aarch64-sve-vector-bits-min=256 < %s -o - | FileCheck %s --check-prefixes=DISABLE-SHUFFLE-PADDING

%struct.patic = type { float, float, float }

; for (int i = 0; i < num; i++) {
;   ps[i].x = factor * ps[i].x;
;   ps[i].y = factor * ps[i].y;
; }
;
define void @test(i32 noundef %num, ptr nocapture noundef %ps) {
; ENABLE-SHUFFLE-PADDING-LABEL: define void @test(
; ENABLE-SHUFFLE-PADDING-SAME: i32 noundef [[NUM:%.*]], ptr nocapture noundef [[PS:%.*]]) #[[ATTR0:[0-9]+]] {
; ENABLE-SHUFFLE-PADDING-NEXT:  entry:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[CMP19:%.*]] = icmp sgt i32 [[NUM]], 0
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[CMP19]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; ENABLE-SHUFFLE-PADDING:       for.body.preheader:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[NUM]] to i64
; ENABLE-SHUFFLE-PADDING-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ule i64 [[WIDE_TRIP_COUNT]], 8
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; ENABLE-SHUFFLE-PADDING:       vector.ph:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[WIDE_TRIP_COUNT]], 8
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP0:%.*]] = icmp eq i64 [[N_MOD_VF]], 0
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP1:%.*]] = select i1 [[TMP0]], i64 8, i64 [[N_MOD_VF]]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[N_VEC:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[TMP1]]
; ENABLE-SHUFFLE-PADDING-NEXT:    br label [[VECTOR_BODY:%.*]]
; ENABLE-SHUFFLE-PADDING:       vector.body:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP2:%.*]] = add i64 [[INDEX]], 0
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_PATIC:%.*]], ptr [[PS]], i64 [[TMP2]]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP4:%.*]] = getelementptr inbounds float, ptr [[TMP3]], i32 0
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP5:%.*]] = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 8)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[LDN:%.*]] = call { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } @llvm.aarch64.sve.ld3.sret.nxv4f32(<vscale x 4 x i1> [[TMP5]], ptr [[TMP4]])
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP6:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN]], 2
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP7:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP6]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP8:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN]], 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP9:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP8]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP10:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN]], 0
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP11:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP10]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP12:%.*]] = fmul fast <8 x float> [[TMP11]], <float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP3]], i64 0, i32 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP14:%.*]] = fmul fast <8 x float> [[TMP9]], <float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP15:%.*]] = getelementptr inbounds float, ptr [[TMP13]], i32 -1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP16:%.*]] = shufflevector <8 x float> [[TMP12]], <8 x float> [[TMP14]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP17:%.*]] = shufflevector <8 x float> [[TMP7]], <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP18:%.*]] = shufflevector <16 x float> [[TMP16]], <16 x float> [[TMP17]], <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP19:%.*]] = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 8)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP20:%.*]] = shufflevector <24 x float> [[TMP18]], <24 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP21:%.*]] = call <vscale x 4 x float> @llvm.vector.insert.nxv4f32.v8f32(<vscale x 4 x float> undef, <8 x float> [[TMP20]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP22:%.*]] = shufflevector <24 x float> [[TMP18]], <24 x float> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP23:%.*]] = call <vscale x 4 x float> @llvm.vector.insert.nxv4f32.v8f32(<vscale x 4 x float> undef, <8 x float> [[TMP22]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP24:%.*]] = shufflevector <24 x float> [[TMP18]], <24 x float> poison, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP25:%.*]] = call <vscale x 4 x float> @llvm.vector.insert.nxv4f32.v8f32(<vscale x 4 x float> undef, <8 x float> [[TMP24]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    call void @llvm.aarch64.sve.st3.nxv4f32(<vscale x 4 x float> [[TMP21]], <vscale x 4 x float> [[TMP23]], <vscale x 4 x float> [[TMP25]], <vscale x 4 x i1> [[TMP19]], ptr [[TMP15]])
; ENABLE-SHUFFLE-PADDING-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 8
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP26:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[TMP26]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; ENABLE-SHUFFLE-PADDING:       middle.block:
; ENABLE-SHUFFLE-PADDING-NEXT:    br label [[SCALAR_PH]]
; ENABLE-SHUFFLE-PADDING:       scalar.ph:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; ENABLE-SHUFFLE-PADDING-NEXT:    br label [[FOR_BODY:%.*]]
; ENABLE-SHUFFLE-PADDING:       for.cond.cleanup.loopexit:
; ENABLE-SHUFFLE-PADDING-NEXT:    br label [[FOR_COND_CLEANUP]]
; ENABLE-SHUFFLE-PADDING:       for.cond.cleanup:
; ENABLE-SHUFFLE-PADDING-NEXT:    ret void
; ENABLE-SHUFFLE-PADDING:       for.body:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[INDVARS_IV]]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP27:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[MUL:%.*]] = fmul fast float [[TMP27]], 0x40019999A0000000
; ENABLE-SHUFFLE-PADDING-NEXT:    store float [[MUL]], ptr [[ARRAYIDX]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[Y:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[ARRAYIDX]], i64 0, i32 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP28:%.*]] = load float, ptr [[Y]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[MUL6:%.*]] = fmul fast float [[TMP28]], 0x40019999A0000000
; ENABLE-SHUFFLE-PADDING-NEXT:    store float [[MUL6]], ptr [[Y]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
;
; DISABLE-SHUFFLE-PADDING-LABEL: define void @test(
; DISABLE-SHUFFLE-PADDING-SAME: i32 noundef [[NUM:%.*]], ptr nocapture noundef [[PS:%.*]]) #[[ATTR0:[0-9]+]] {
; DISABLE-SHUFFLE-PADDING-NEXT:  entry:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[CMP19:%.*]] = icmp sgt i32 [[NUM]], 0
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[CMP19]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DISABLE-SHUFFLE-PADDING:       for.body.preheader:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[NUM]] to i64
; DISABLE-SHUFFLE-PADDING-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ule i64 [[WIDE_TRIP_COUNT]], 8
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; DISABLE-SHUFFLE-PADDING:       vector.ph:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[WIDE_TRIP_COUNT]], 8
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP0:%.*]] = icmp eq i64 [[N_MOD_VF]], 0
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP1:%.*]] = select i1 [[TMP0]], i64 8, i64 [[N_MOD_VF]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[N_VEC:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[TMP1]]
; DISABLE-SHUFFLE-PADDING-NEXT:    br label [[VECTOR_BODY:%.*]]
; DISABLE-SHUFFLE-PADDING:       vector.body:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP2:%.*]] = add i64 [[INDEX]], 0
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP3:%.*]] = add i64 [[INDEX]], 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP4:%.*]] = add i64 [[INDEX]], 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP5:%.*]] = add i64 [[INDEX]], 3
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP6:%.*]] = add i64 [[INDEX]], 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP7:%.*]] = add i64 [[INDEX]], 5
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP8:%.*]] = add i64 [[INDEX]], 6
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP9:%.*]] = add i64 [[INDEX]], 7
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT_PATIC:%.*]], ptr [[PS]], i64 [[TMP2]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP3]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP4]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP5]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP6]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP7]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP8]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP9]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP18:%.*]] = getelementptr inbounds float, ptr [[TMP10]], i32 0
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP19:%.*]] = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 8)
; DISABLE-SHUFFLE-PADDING-NEXT:    [[LDN:%.*]] = call { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } @llvm.aarch64.sve.ld3.sret.nxv4f32(<vscale x 4 x i1> [[TMP19]], ptr [[TMP18]])
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP20:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN]], 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP21:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP20]], i64 0)
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP22:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN]], 0
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP23:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP22]], i64 0)
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP24:%.*]] = fmul fast <8 x float> [[TMP23]], <float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000>
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP25:%.*]] = extractelement <8 x float> [[TMP24]], i32 0
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP25]], ptr [[TMP10]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP26:%.*]] = extractelement <8 x float> [[TMP24]], i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP26]], ptr [[TMP11]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP27:%.*]] = extractelement <8 x float> [[TMP24]], i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP27]], ptr [[TMP12]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP28:%.*]] = extractelement <8 x float> [[TMP24]], i32 3
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP28]], ptr [[TMP13]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP29:%.*]] = extractelement <8 x float> [[TMP24]], i32 4
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP29]], ptr [[TMP14]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP30:%.*]] = extractelement <8 x float> [[TMP24]], i32 5
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP30]], ptr [[TMP15]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP31:%.*]] = extractelement <8 x float> [[TMP24]], i32 6
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP31]], ptr [[TMP16]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP32:%.*]] = extractelement <8 x float> [[TMP24]], i32 7
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP32]], ptr [[TMP17]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP33:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP10]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP34:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP11]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP35:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP12]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP36:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP13]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP37:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP14]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP38:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP15]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP39:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP16]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP40:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP17]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP41:%.*]] = fmul fast <8 x float> [[TMP21]], <float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000>
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP42:%.*]] = extractelement <8 x float> [[TMP41]], i32 0
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP42]], ptr [[TMP33]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP43:%.*]] = extractelement <8 x float> [[TMP41]], i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP43]], ptr [[TMP34]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP44:%.*]] = extractelement <8 x float> [[TMP41]], i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP44]], ptr [[TMP35]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP45:%.*]] = extractelement <8 x float> [[TMP41]], i32 3
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP45]], ptr [[TMP36]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP46:%.*]] = extractelement <8 x float> [[TMP41]], i32 4
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP46]], ptr [[TMP37]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP47:%.*]] = extractelement <8 x float> [[TMP41]], i32 5
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP47]], ptr [[TMP38]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP48:%.*]] = extractelement <8 x float> [[TMP41]], i32 6
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP48]], ptr [[TMP39]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP49:%.*]] = extractelement <8 x float> [[TMP41]], i32 7
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP49]], ptr [[TMP40]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 8
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP50:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[TMP50]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; DISABLE-SHUFFLE-PADDING:       middle.block:
; DISABLE-SHUFFLE-PADDING-NEXT:    br label [[SCALAR_PH]]
; DISABLE-SHUFFLE-PADDING:       scalar.ph:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; DISABLE-SHUFFLE-PADDING-NEXT:    br label [[FOR_BODY:%.*]]
; DISABLE-SHUFFLE-PADDING:       for.cond.cleanup.loopexit:
; DISABLE-SHUFFLE-PADDING-NEXT:    br label [[FOR_COND_CLEANUP]]
; DISABLE-SHUFFLE-PADDING:       for.cond.cleanup:
; DISABLE-SHUFFLE-PADDING-NEXT:    ret void
; DISABLE-SHUFFLE-PADDING:       for.body:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[INDVARS_IV]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP51:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[MUL:%.*]] = fmul fast float [[TMP51]], 0x40019999A0000000
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[MUL]], ptr [[ARRAYIDX]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[Y:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[ARRAYIDX]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP52:%.*]] = load float, ptr [[Y]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[MUL6:%.*]] = fmul fast float [[TMP52]], 0x40019999A0000000
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[MUL6]], ptr [[Y]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
;

entry:
  %cmp19 = icmp sgt i32 %num, 0
  br i1 %cmp19, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %num to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds %struct.patic, ptr %ps, i64 %indvars.iv
  %0 = load float, ptr %arrayidx, align 4
  %mul = fmul fast float %0, 0x40019999A0000000
  store float %mul, ptr %arrayidx, align 4
  %y = getelementptr inbounds %struct.patic, ptr %arrayidx, i64 0, i32 1
  %1 = load float, ptr %y, align 4
  %mul6 = fmul fast float %1, 0x40019999A0000000
  store float %mul6, ptr %y, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

; for (int i = 0; i < num; i++) {
;   ps[i].x = factor * ps[i].x;
;   ps[i].z = factor * ps[i].z;
; }
;
define void @test1(i32 noundef %num, ptr nocapture noundef %ps) {
; ENABLE-SHUFFLE-PADDING-LABEL: define void @test1(
; ENABLE-SHUFFLE-PADDING-SAME: i32 noundef [[NUM:%.*]], ptr nocapture noundef [[PS:%.*]]) #[[ATTR0]] {
; ENABLE-SHUFFLE-PADDING-NEXT:  entry:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[CMP19:%.*]] = icmp sgt i32 [[NUM]], 0
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[CMP19]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; ENABLE-SHUFFLE-PADDING:       for.body.preheader:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[NUM]] to i64
; ENABLE-SHUFFLE-PADDING-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[WIDE_TRIP_COUNT]], 8
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; ENABLE-SHUFFLE-PADDING:       vector.ph:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[WIDE_TRIP_COUNT]], 8
; ENABLE-SHUFFLE-PADDING-NEXT:    [[N_VEC:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[N_MOD_VF]]
; ENABLE-SHUFFLE-PADDING-NEXT:    br label [[VECTOR_BODY:%.*]]
; ENABLE-SHUFFLE-PADDING:       vector.body:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP0:%.*]] = add i64 [[INDEX]], 0
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT_PATIC:%.*]], ptr [[PS]], i64 [[TMP0]]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP2:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i32 0
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP3:%.*]] = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 8)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[LDN:%.*]] = call { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } @llvm.aarch64.sve.ld3.sret.nxv4f32(<vscale x 4 x i1> [[TMP3]], ptr [[TMP2]])
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP4:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN]], 2
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP5:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP4]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP6:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN]], 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP7:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP6]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP8:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN]], 0
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP9:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP8]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP10:%.*]] = fmul fast <8 x float> [[TMP9]], <float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP1]], i64 0, i32 2
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP12:%.*]] = fmul fast <8 x float> [[TMP5]], <float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP13:%.*]] = getelementptr inbounds float, ptr [[TMP11]], i32 -2
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP14:%.*]] = shufflevector <8 x float> [[TMP10]], <8 x float> [[TMP7]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP15:%.*]] = shufflevector <8 x float> [[TMP12]], <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP16:%.*]] = shufflevector <16 x float> [[TMP14]], <16 x float> [[TMP15]], <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP17:%.*]] = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 8)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP18:%.*]] = shufflevector <24 x float> [[TMP16]], <24 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP19:%.*]] = call <vscale x 4 x float> @llvm.vector.insert.nxv4f32.v8f32(<vscale x 4 x float> undef, <8 x float> [[TMP18]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP20:%.*]] = shufflevector <24 x float> [[TMP16]], <24 x float> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP21:%.*]] = call <vscale x 4 x float> @llvm.vector.insert.nxv4f32.v8f32(<vscale x 4 x float> undef, <8 x float> [[TMP20]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP22:%.*]] = shufflevector <24 x float> [[TMP16]], <24 x float> poison, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP23:%.*]] = call <vscale x 4 x float> @llvm.vector.insert.nxv4f32.v8f32(<vscale x 4 x float> undef, <8 x float> [[TMP22]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    call void @llvm.aarch64.sve.st3.nxv4f32(<vscale x 4 x float> [[TMP19]], <vscale x 4 x float> [[TMP21]], <vscale x 4 x float> [[TMP23]], <vscale x 4 x i1> [[TMP17]], ptr [[TMP13]])
; ENABLE-SHUFFLE-PADDING-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 8
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP24:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[TMP24]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP4:![0-9]+]]
; ENABLE-SHUFFLE-PADDING:       middle.block:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[WIDE_TRIP_COUNT]], [[N_VEC]]
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; ENABLE-SHUFFLE-PADDING:       scalar.ph:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; ENABLE-SHUFFLE-PADDING-NEXT:    br label [[FOR_BODY:%.*]]
; ENABLE-SHUFFLE-PADDING:       for.cond.cleanup.loopexit:
; ENABLE-SHUFFLE-PADDING-NEXT:    br label [[FOR_COND_CLEANUP]]
; ENABLE-SHUFFLE-PADDING:       for.cond.cleanup:
; ENABLE-SHUFFLE-PADDING-NEXT:    ret void
; ENABLE-SHUFFLE-PADDING:       for.body:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[INDVARS_IV]]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP25:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[MUL:%.*]] = fmul fast float [[TMP25]], 0x40019999A0000000
; ENABLE-SHUFFLE-PADDING-NEXT:    store float [[MUL]], ptr [[ARRAYIDX]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[Z:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[ARRAYIDX]], i64 0, i32 2
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP26:%.*]] = load float, ptr [[Z]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[MUL6:%.*]] = fmul fast float [[TMP26]], 0x40019999A0000000
; ENABLE-SHUFFLE-PADDING-NEXT:    store float [[MUL6]], ptr [[Z]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP5:![0-9]+]]
;
; DISABLE-SHUFFLE-PADDING-LABEL: define void @test1(
; DISABLE-SHUFFLE-PADDING-SAME: i32 noundef [[NUM:%.*]], ptr nocapture noundef [[PS:%.*]]) #[[ATTR0]] {
; DISABLE-SHUFFLE-PADDING-NEXT:  entry:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[CMP19:%.*]] = icmp sgt i32 [[NUM]], 0
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[CMP19]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DISABLE-SHUFFLE-PADDING:       for.body.preheader:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[NUM]] to i64
; DISABLE-SHUFFLE-PADDING-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[WIDE_TRIP_COUNT]], 8
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; DISABLE-SHUFFLE-PADDING:       vector.ph:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[WIDE_TRIP_COUNT]], 8
; DISABLE-SHUFFLE-PADDING-NEXT:    [[N_VEC:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[N_MOD_VF]]
; DISABLE-SHUFFLE-PADDING-NEXT:    br label [[VECTOR_BODY:%.*]]
; DISABLE-SHUFFLE-PADDING:       vector.body:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP0:%.*]] = add i64 [[INDEX]], 0
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP1:%.*]] = add i64 [[INDEX]], 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP2:%.*]] = add i64 [[INDEX]], 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP3:%.*]] = add i64 [[INDEX]], 3
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP4:%.*]] = add i64 [[INDEX]], 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP5:%.*]] = add i64 [[INDEX]], 5
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP6:%.*]] = add i64 [[INDEX]], 6
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP7:%.*]] = add i64 [[INDEX]], 7
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT_PATIC:%.*]], ptr [[PS]], i64 [[TMP0]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP1]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP2]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP3]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP4]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP5]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP6]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP7]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP16:%.*]] = getelementptr inbounds float, ptr [[TMP8]], i32 0
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP17:%.*]] = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 8)
; DISABLE-SHUFFLE-PADDING-NEXT:    [[LDN:%.*]] = call { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } @llvm.aarch64.sve.ld3.sret.nxv4f32(<vscale x 4 x i1> [[TMP17]], ptr [[TMP16]])
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP18:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN]], 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP19:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP18]], i64 0)
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP20:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN]], 0
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP21:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP20]], i64 0)
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP22:%.*]] = fmul fast <8 x float> [[TMP21]], <float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000>
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP23:%.*]] = extractelement <8 x float> [[TMP22]], i32 0
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP23]], ptr [[TMP8]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP24:%.*]] = extractelement <8 x float> [[TMP22]], i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP24]], ptr [[TMP9]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP25:%.*]] = extractelement <8 x float> [[TMP22]], i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP25]], ptr [[TMP10]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP26:%.*]] = extractelement <8 x float> [[TMP22]], i32 3
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP26]], ptr [[TMP11]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP27:%.*]] = extractelement <8 x float> [[TMP22]], i32 4
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP27]], ptr [[TMP12]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP28:%.*]] = extractelement <8 x float> [[TMP22]], i32 5
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP28]], ptr [[TMP13]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP29:%.*]] = extractelement <8 x float> [[TMP22]], i32 6
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP29]], ptr [[TMP14]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP30:%.*]] = extractelement <8 x float> [[TMP22]], i32 7
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP30]], ptr [[TMP15]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP31:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP8]], i64 0, i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP32:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP9]], i64 0, i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP33:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP10]], i64 0, i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP34:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP11]], i64 0, i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP35:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP12]], i64 0, i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP36:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP13]], i64 0, i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP37:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP14]], i64 0, i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP38:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP15]], i64 0, i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP39:%.*]] = fmul fast <8 x float> [[TMP19]], <float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000>
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP40:%.*]] = extractelement <8 x float> [[TMP39]], i32 0
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP40]], ptr [[TMP31]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP41:%.*]] = extractelement <8 x float> [[TMP39]], i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP41]], ptr [[TMP32]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP42:%.*]] = extractelement <8 x float> [[TMP39]], i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP42]], ptr [[TMP33]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP43:%.*]] = extractelement <8 x float> [[TMP39]], i32 3
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP43]], ptr [[TMP34]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP44:%.*]] = extractelement <8 x float> [[TMP39]], i32 4
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP44]], ptr [[TMP35]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP45:%.*]] = extractelement <8 x float> [[TMP39]], i32 5
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP45]], ptr [[TMP36]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP46:%.*]] = extractelement <8 x float> [[TMP39]], i32 6
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP46]], ptr [[TMP37]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP47:%.*]] = extractelement <8 x float> [[TMP39]], i32 7
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP47]], ptr [[TMP38]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 8
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP48:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[TMP48]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP4:![0-9]+]]
; DISABLE-SHUFFLE-PADDING:       middle.block:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[WIDE_TRIP_COUNT]], [[N_VEC]]
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; DISABLE-SHUFFLE-PADDING:       scalar.ph:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; DISABLE-SHUFFLE-PADDING-NEXT:    br label [[FOR_BODY:%.*]]
; DISABLE-SHUFFLE-PADDING:       for.cond.cleanup.loopexit:
; DISABLE-SHUFFLE-PADDING-NEXT:    br label [[FOR_COND_CLEANUP]]
; DISABLE-SHUFFLE-PADDING:       for.cond.cleanup:
; DISABLE-SHUFFLE-PADDING-NEXT:    ret void
; DISABLE-SHUFFLE-PADDING:       for.body:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[INDVARS_IV]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP49:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[MUL:%.*]] = fmul fast float [[TMP49]], 0x40019999A0000000
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[MUL]], ptr [[ARRAYIDX]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[Z:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[ARRAYIDX]], i64 0, i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP50:%.*]] = load float, ptr [[Z]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[MUL6:%.*]] = fmul fast float [[TMP50]], 0x40019999A0000000
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[MUL6]], ptr [[Z]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP5:![0-9]+]]
;

entry:
  %cmp19 = icmp sgt i32 %num, 0
  br i1 %cmp19, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %num to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds %struct.patic, ptr %ps, i64 %indvars.iv
  %0 = load float, ptr %arrayidx, align 4
  %mul = fmul fast float %0, 0x40019999A0000000
  store float %mul, ptr %arrayidx, align 4
  %z = getelementptr inbounds %struct.patic, ptr %arrayidx, i64 0, i32 2
  %1 = load float, ptr %z, align 4
  %mul6 = fmul fast float %1, 0x40019999A0000000
  store float %mul6, ptr %z, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

; for (int i = 0; i < num; i++) {
;   ps[i].y = factor * ps[i].y;
;   ps[i].z = factor * ps[i].z;
; }
;
define void @test2(i32 noundef %num, ptr nocapture noundef %ps) {
; ENABLE-SHUFFLE-PADDING-LABEL: define void @test2(
; ENABLE-SHUFFLE-PADDING-SAME: i32 noundef [[NUM:%.*]], ptr nocapture noundef [[PS:%.*]]) #[[ATTR0]] {
; ENABLE-SHUFFLE-PADDING-NEXT:  entry:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[CMP19:%.*]] = icmp sgt i32 [[NUM]], 0
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[CMP19]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; ENABLE-SHUFFLE-PADDING:       for.body.preheader:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[NUM]] to i64
; ENABLE-SHUFFLE-PADDING-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ule i64 [[WIDE_TRIP_COUNT]], 8
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; ENABLE-SHUFFLE-PADDING:       vector.ph:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[WIDE_TRIP_COUNT]], 8
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP0:%.*]] = icmp eq i64 [[N_MOD_VF]], 0
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP1:%.*]] = select i1 [[TMP0]], i64 8, i64 [[N_MOD_VF]]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[N_VEC:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[TMP1]]
; ENABLE-SHUFFLE-PADDING-NEXT:    br label [[VECTOR_BODY:%.*]]
; ENABLE-SHUFFLE-PADDING:       vector.body:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP2:%.*]] = add i64 [[INDEX]], 0
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_PATIC:%.*]], ptr [[PS]], i64 [[TMP2]]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP3]], i64 0, i32 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP5:%.*]] = getelementptr inbounds float, ptr [[TMP4]], i32 0
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP6:%.*]] = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 8)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[LDN:%.*]] = call { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } @llvm.aarch64.sve.ld3.sret.nxv4f32(<vscale x 4 x i1> [[TMP6]], ptr [[TMP5]])
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP7:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN]], 2
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP8:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP7]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP9:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN]], 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP10:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP9]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP11:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN]], 0
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP12:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP11]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP13:%.*]] = fmul fast <8 x float> [[TMP12]], <float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP3]], i64 0, i32 2
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP15:%.*]] = fmul fast <8 x float> [[TMP10]], <float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP16:%.*]] = getelementptr inbounds float, ptr [[TMP14]], i32 -1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP17:%.*]] = shufflevector <8 x float> [[TMP13]], <8 x float> [[TMP15]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP18:%.*]] = shufflevector <8 x float> [[TMP8]], <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP19:%.*]] = shufflevector <16 x float> [[TMP17]], <16 x float> [[TMP18]], <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP20:%.*]] = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 8)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP21:%.*]] = shufflevector <24 x float> [[TMP19]], <24 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP22:%.*]] = call <vscale x 4 x float> @llvm.vector.insert.nxv4f32.v8f32(<vscale x 4 x float> undef, <8 x float> [[TMP21]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP23:%.*]] = shufflevector <24 x float> [[TMP19]], <24 x float> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP24:%.*]] = call <vscale x 4 x float> @llvm.vector.insert.nxv4f32.v8f32(<vscale x 4 x float> undef, <8 x float> [[TMP23]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP25:%.*]] = shufflevector <24 x float> [[TMP19]], <24 x float> poison, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP26:%.*]] = call <vscale x 4 x float> @llvm.vector.insert.nxv4f32.v8f32(<vscale x 4 x float> undef, <8 x float> [[TMP25]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    call void @llvm.aarch64.sve.st3.nxv4f32(<vscale x 4 x float> [[TMP22]], <vscale x 4 x float> [[TMP24]], <vscale x 4 x float> [[TMP26]], <vscale x 4 x i1> [[TMP20]], ptr [[TMP16]])
; ENABLE-SHUFFLE-PADDING-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 8
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP27:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[TMP27]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP6:![0-9]+]]
; ENABLE-SHUFFLE-PADDING:       middle.block:
; ENABLE-SHUFFLE-PADDING-NEXT:    br label [[SCALAR_PH]]
; ENABLE-SHUFFLE-PADDING:       scalar.ph:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; ENABLE-SHUFFLE-PADDING-NEXT:    br label [[FOR_BODY:%.*]]
; ENABLE-SHUFFLE-PADDING:       for.cond.cleanup.loopexit:
; ENABLE-SHUFFLE-PADDING-NEXT:    br label [[FOR_COND_CLEANUP]]
; ENABLE-SHUFFLE-PADDING:       for.cond.cleanup:
; ENABLE-SHUFFLE-PADDING-NEXT:    ret void
; ENABLE-SHUFFLE-PADDING:       for.body:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[INDVARS_IV]]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[Y:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[ARRAYIDX]], i64 0, i32 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP28:%.*]] = load float, ptr [[Y]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[MUL:%.*]] = fmul fast float [[TMP28]], 0x40019999A0000000
; ENABLE-SHUFFLE-PADDING-NEXT:    store float [[MUL]], ptr [[Y]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[Z:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[ARRAYIDX]], i64 0, i32 2
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP29:%.*]] = load float, ptr [[Z]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[MUL6:%.*]] = fmul fast float [[TMP29]], 0x40019999A0000000
; ENABLE-SHUFFLE-PADDING-NEXT:    store float [[MUL6]], ptr [[Z]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[FOR_BODY]], !llvm.loop [[LOOP7:![0-9]+]]
;
; DISABLE-SHUFFLE-PADDING-LABEL: define void @test2(
; DISABLE-SHUFFLE-PADDING-SAME: i32 noundef [[NUM:%.*]], ptr nocapture noundef [[PS:%.*]]) #[[ATTR0]] {
; DISABLE-SHUFFLE-PADDING-NEXT:  entry:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[CMP19:%.*]] = icmp sgt i32 [[NUM]], 0
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[CMP19]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DISABLE-SHUFFLE-PADDING:       for.body.preheader:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[NUM]] to i64
; DISABLE-SHUFFLE-PADDING-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ule i64 [[WIDE_TRIP_COUNT]], 8
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; DISABLE-SHUFFLE-PADDING:       vector.ph:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[WIDE_TRIP_COUNT]], 8
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP0:%.*]] = icmp eq i64 [[N_MOD_VF]], 0
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP1:%.*]] = select i1 [[TMP0]], i64 8, i64 [[N_MOD_VF]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[N_VEC:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[TMP1]]
; DISABLE-SHUFFLE-PADDING-NEXT:    br label [[VECTOR_BODY:%.*]]
; DISABLE-SHUFFLE-PADDING:       vector.body:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP2:%.*]] = add i64 [[INDEX]], 0
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP3:%.*]] = add i64 [[INDEX]], 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP4:%.*]] = add i64 [[INDEX]], 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP5:%.*]] = add i64 [[INDEX]], 3
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP6:%.*]] = add i64 [[INDEX]], 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP7:%.*]] = add i64 [[INDEX]], 5
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP8:%.*]] = add i64 [[INDEX]], 6
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP9:%.*]] = add i64 [[INDEX]], 7
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT_PATIC:%.*]], ptr [[PS]], i64 [[TMP2]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP3]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP4]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP5]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP6]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP7]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP8]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP9]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP18:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP10]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP19:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP11]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP20:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP12]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP21:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP13]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP22:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP14]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP23:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP15]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP24:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP16]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP25:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP17]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP26:%.*]] = getelementptr inbounds float, ptr [[TMP18]], i32 0
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP27:%.*]] = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 8)
; DISABLE-SHUFFLE-PADDING-NEXT:    [[LDN:%.*]] = call { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } @llvm.aarch64.sve.ld3.sret.nxv4f32(<vscale x 4 x i1> [[TMP27]], ptr [[TMP26]])
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP28:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN]], 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP29:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP28]], i64 0)
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP30:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN]], 0
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP31:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP30]], i64 0)
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP32:%.*]] = fmul fast <8 x float> [[TMP31]], <float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000>
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP33:%.*]] = extractelement <8 x float> [[TMP32]], i32 0
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP33]], ptr [[TMP18]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP34:%.*]] = extractelement <8 x float> [[TMP32]], i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP34]], ptr [[TMP19]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP35:%.*]] = extractelement <8 x float> [[TMP32]], i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP35]], ptr [[TMP20]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP36:%.*]] = extractelement <8 x float> [[TMP32]], i32 3
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP36]], ptr [[TMP21]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP37:%.*]] = extractelement <8 x float> [[TMP32]], i32 4
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP37]], ptr [[TMP22]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP38:%.*]] = extractelement <8 x float> [[TMP32]], i32 5
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP38]], ptr [[TMP23]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP39:%.*]] = extractelement <8 x float> [[TMP32]], i32 6
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP39]], ptr [[TMP24]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP40:%.*]] = extractelement <8 x float> [[TMP32]], i32 7
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP40]], ptr [[TMP25]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP41:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP10]], i64 0, i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP42:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP11]], i64 0, i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP43:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP12]], i64 0, i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP44:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP13]], i64 0, i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP45:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP14]], i64 0, i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP46:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP15]], i64 0, i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP47:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP16]], i64 0, i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP48:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP17]], i64 0, i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP49:%.*]] = fmul fast <8 x float> [[TMP29]], <float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000>
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP50:%.*]] = extractelement <8 x float> [[TMP49]], i32 0
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP50]], ptr [[TMP41]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP51:%.*]] = extractelement <8 x float> [[TMP49]], i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP51]], ptr [[TMP42]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP52:%.*]] = extractelement <8 x float> [[TMP49]], i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP52]], ptr [[TMP43]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP53:%.*]] = extractelement <8 x float> [[TMP49]], i32 3
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP53]], ptr [[TMP44]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP54:%.*]] = extractelement <8 x float> [[TMP49]], i32 4
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP54]], ptr [[TMP45]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP55:%.*]] = extractelement <8 x float> [[TMP49]], i32 5
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP55]], ptr [[TMP46]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP56:%.*]] = extractelement <8 x float> [[TMP49]], i32 6
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP56]], ptr [[TMP47]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP57:%.*]] = extractelement <8 x float> [[TMP49]], i32 7
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP57]], ptr [[TMP48]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 8
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP58:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[TMP58]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP6:![0-9]+]]
; DISABLE-SHUFFLE-PADDING:       middle.block:
; DISABLE-SHUFFLE-PADDING-NEXT:    br label [[SCALAR_PH]]
; DISABLE-SHUFFLE-PADDING:       scalar.ph:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; DISABLE-SHUFFLE-PADDING-NEXT:    br label [[FOR_BODY:%.*]]
; DISABLE-SHUFFLE-PADDING:       for.cond.cleanup.loopexit:
; DISABLE-SHUFFLE-PADDING-NEXT:    br label [[FOR_COND_CLEANUP]]
; DISABLE-SHUFFLE-PADDING:       for.cond.cleanup:
; DISABLE-SHUFFLE-PADDING-NEXT:    ret void
; DISABLE-SHUFFLE-PADDING:       for.body:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[INDVARS_IV]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[Y:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[ARRAYIDX]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP59:%.*]] = load float, ptr [[Y]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[MUL:%.*]] = fmul fast float [[TMP59]], 0x40019999A0000000
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[MUL]], ptr [[Y]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[Z:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[ARRAYIDX]], i64 0, i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP60:%.*]] = load float, ptr [[Z]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[MUL6:%.*]] = fmul fast float [[TMP60]], 0x40019999A0000000
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[MUL6]], ptr [[Z]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[FOR_BODY]], !llvm.loop [[LOOP7:![0-9]+]]
;

entry:
  %cmp19 = icmp sgt i32 %num, 0
  br i1 %cmp19, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %num to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds %struct.patic, ptr %ps, i64 %indvars.iv
  %y = getelementptr inbounds %struct.patic, ptr %arrayidx, i64 0, i32 1
  %0 = load float, ptr %y, align 4
  %mul = fmul fast float %0, 0x40019999A0000000
  store float %mul, ptr %y, align 4
  %z = getelementptr inbounds %struct.patic, ptr %arrayidx, i64 0, i32 2
  %1 = load float, ptr %z, align 4
  %mul6 = fmul fast float %1, 0x40019999A0000000
  store float %mul6, ptr %z, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

; Currently, we don't support the following scenario, as shuffle padding
; requires stored values should be loaded from itself (with some operation on
; them).
;
; for (int i = 0; i < num; i++) {
;   ps[i].x = i;
;   ps[i].y = i + 1;
; }
;
define dso_local void @test3(i32 noundef %num, ptr nocapture noundef writeonly %ps) {
; ENABLE-SHUFFLE-PADDING-LABEL: define dso_local void @test3(
; ENABLE-SHUFFLE-PADDING-SAME: i32 noundef [[NUM:%.*]], ptr nocapture noundef writeonly [[PS:%.*]]) #[[ATTR0]] {
; ENABLE-SHUFFLE-PADDING-NEXT:  entry:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[CMP10:%.*]] = icmp sgt i32 [[NUM]], 0
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[CMP10]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; ENABLE-SHUFFLE-PADDING:       for.body.preheader:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[NUM]] to i64
; ENABLE-SHUFFLE-PADDING-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[WIDE_TRIP_COUNT]], 2
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; ENABLE-SHUFFLE-PADDING:       vector.ph:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[WIDE_TRIP_COUNT]], 2
; ENABLE-SHUFFLE-PADDING-NEXT:    [[N_VEC:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[N_MOD_VF]]
; ENABLE-SHUFFLE-PADDING-NEXT:    br label [[VECTOR_BODY:%.*]]
; ENABLE-SHUFFLE-PADDING:       vector.body:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[OFFSET_IDX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP0:%.*]] = trunc i64 [[OFFSET_IDX]] to i32
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP1:%.*]] = add i32 [[TMP0]], 0
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP2:%.*]] = add i32 [[TMP0]], 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP3:%.*]] = add i64 [[OFFSET_IDX]], 0
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP4:%.*]] = add i64 [[OFFSET_IDX]], 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP5:%.*]] = sitofp i32 [[TMP1]] to float
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP6:%.*]] = sitofp i32 [[TMP2]] to float
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT_PATIC:%.*]], ptr [[PS]], i64 [[TMP3]]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP4]]
; ENABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP5]], ptr [[TMP7]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP6]], ptr [[TMP8]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP9:%.*]] = add nuw nsw i64 [[TMP3]], 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP10:%.*]] = add nuw nsw i64 [[TMP4]], 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP11:%.*]] = trunc i64 [[TMP9]] to i32
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP12:%.*]] = trunc i64 [[TMP10]] to i32
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP13:%.*]] = sitofp i32 [[TMP11]] to float
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP14:%.*]] = sitofp i32 [[TMP12]] to float
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP7]], i64 0, i32 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP8]], i64 0, i32 1
; ENABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP13]], ptr [[TMP15]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP14]], ptr [[TMP16]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[OFFSET_IDX]], 2
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP17:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[TMP17]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP8:![0-9]+]]
; ENABLE-SHUFFLE-PADDING:       middle.block:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[WIDE_TRIP_COUNT]], [[N_VEC]]
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; ENABLE-SHUFFLE-PADDING:       scalar.ph:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; ENABLE-SHUFFLE-PADDING-NEXT:    br label [[FOR_BODY:%.*]]
; ENABLE-SHUFFLE-PADDING:       for.cond.cleanup.loopexit:
; ENABLE-SHUFFLE-PADDING-NEXT:    br label [[FOR_COND_CLEANUP]]
; ENABLE-SHUFFLE-PADDING:       for.cond.cleanup:
; ENABLE-SHUFFLE-PADDING-NEXT:    ret void
; ENABLE-SHUFFLE-PADDING:       for.body:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP18:%.*]] = trunc i64 [[INDVARS_IV]] to i32
; ENABLE-SHUFFLE-PADDING-NEXT:    [[CONV:%.*]] = sitofp i32 [[TMP18]] to float
; ENABLE-SHUFFLE-PADDING-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[INDVARS_IV]]
; ENABLE-SHUFFLE-PADDING-NEXT:    store float [[CONV]], ptr [[ARRAYIDX]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP19:%.*]] = trunc i64 [[INDVARS_IV_NEXT]] to i32
; ENABLE-SHUFFLE-PADDING-NEXT:    [[CONV1:%.*]] = sitofp i32 [[TMP19]] to float
; ENABLE-SHUFFLE-PADDING-NEXT:    [[Y:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[ARRAYIDX]], i64 0, i32 1
; ENABLE-SHUFFLE-PADDING-NEXT:    store float [[CONV1]], ptr [[Y]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP9:![0-9]+]]
;
; DISABLE-SHUFFLE-PADDING-LABEL: define dso_local void @test3(
; DISABLE-SHUFFLE-PADDING-SAME: i32 noundef [[NUM:%.*]], ptr nocapture noundef writeonly [[PS:%.*]]) #[[ATTR0]] {
; DISABLE-SHUFFLE-PADDING-NEXT:  entry:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[CMP10:%.*]] = icmp sgt i32 [[NUM]], 0
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[CMP10]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DISABLE-SHUFFLE-PADDING:       for.body.preheader:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[NUM]] to i64
; DISABLE-SHUFFLE-PADDING-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[WIDE_TRIP_COUNT]], 2
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; DISABLE-SHUFFLE-PADDING:       vector.ph:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[WIDE_TRIP_COUNT]], 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[N_VEC:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[N_MOD_VF]]
; DISABLE-SHUFFLE-PADDING-NEXT:    br label [[VECTOR_BODY:%.*]]
; DISABLE-SHUFFLE-PADDING:       vector.body:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[OFFSET_IDX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP0:%.*]] = trunc i64 [[OFFSET_IDX]] to i32
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP1:%.*]] = add i32 [[TMP0]], 0
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP2:%.*]] = add i32 [[TMP0]], 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP3:%.*]] = add i64 [[OFFSET_IDX]], 0
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP4:%.*]] = add i64 [[OFFSET_IDX]], 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP5:%.*]] = sitofp i32 [[TMP1]] to float
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP6:%.*]] = sitofp i32 [[TMP2]] to float
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT_PATIC:%.*]], ptr [[PS]], i64 [[TMP3]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP4]]
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP5]], ptr [[TMP7]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP6]], ptr [[TMP8]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP9:%.*]] = add nuw nsw i64 [[TMP3]], 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP10:%.*]] = add nuw nsw i64 [[TMP4]], 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP11:%.*]] = trunc i64 [[TMP9]] to i32
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP12:%.*]] = trunc i64 [[TMP10]] to i32
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP13:%.*]] = sitofp i32 [[TMP11]] to float
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP14:%.*]] = sitofp i32 [[TMP12]] to float
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP7]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP8]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP13]], ptr [[TMP15]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP14]], ptr [[TMP16]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[OFFSET_IDX]], 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP17:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[TMP17]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP8:![0-9]+]]
; DISABLE-SHUFFLE-PADDING:       middle.block:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[WIDE_TRIP_COUNT]], [[N_VEC]]
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; DISABLE-SHUFFLE-PADDING:       scalar.ph:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; DISABLE-SHUFFLE-PADDING-NEXT:    br label [[FOR_BODY:%.*]]
; DISABLE-SHUFFLE-PADDING:       for.cond.cleanup.loopexit:
; DISABLE-SHUFFLE-PADDING-NEXT:    br label [[FOR_COND_CLEANUP]]
; DISABLE-SHUFFLE-PADDING:       for.cond.cleanup:
; DISABLE-SHUFFLE-PADDING-NEXT:    ret void
; DISABLE-SHUFFLE-PADDING:       for.body:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP18:%.*]] = trunc i64 [[INDVARS_IV]] to i32
; DISABLE-SHUFFLE-PADDING-NEXT:    [[CONV:%.*]] = sitofp i32 [[TMP18]] to float
; DISABLE-SHUFFLE-PADDING-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[INDVARS_IV]]
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[CONV]], ptr [[ARRAYIDX]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP19:%.*]] = trunc i64 [[INDVARS_IV_NEXT]] to i32
; DISABLE-SHUFFLE-PADDING-NEXT:    [[CONV1:%.*]] = sitofp i32 [[TMP19]] to float
; DISABLE-SHUFFLE-PADDING-NEXT:    [[Y:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[ARRAYIDX]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[CONV1]], ptr [[Y]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP9:![0-9]+]]
;
entry:
  %cmp10 = icmp sgt i32 %num, 0
  br i1 %cmp10, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %num to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %0 = trunc i64 %indvars.iv to i32
  %conv = sitofp i32 %0 to float
  %arrayidx = getelementptr inbounds %struct.patic, ptr %ps, i64 %indvars.iv
  store float %conv, ptr %arrayidx, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %1 = trunc i64 %indvars.iv.next to i32
  %conv1 = sitofp i32 %1 to float
  %y = getelementptr inbounds %struct.patic, ptr %arrayidx, i64 0, i32 1
  store float %conv1, ptr %y, align 4
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

; The feature of the case is the load group has no gap (all member is used),
; but the store group has gap (ps[i].z is not stored).
;
; for (int i = 0; i < num; i++) {
;   ps[i].x += ps[i].y;
;   ps[i].y += ps[i].z;
; }
;
define dso_local void @test4(i32 noundef %num, ptr nocapture noundef %ps, i32 noundef %x, i32 noundef %y, i32 noundef %z) {
; ENABLE-SHUFFLE-PADDING-LABEL: define dso_local void @test4(
; ENABLE-SHUFFLE-PADDING-SAME: i32 noundef [[NUM:%.*]], ptr nocapture noundef [[PS:%.*]], i32 noundef [[X:%.*]], i32 noundef [[Y:%.*]], i32 noundef [[Z:%.*]]) #[[ATTR0]] {
; ENABLE-SHUFFLE-PADDING-NEXT:  entry:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[CMP20:%.*]] = icmp sgt i32 [[NUM]], 0
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[CMP20]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; ENABLE-SHUFFLE-PADDING:       for.body.preheader:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[NUM]] to i64
; ENABLE-SHUFFLE-PADDING-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[WIDE_TRIP_COUNT]], 16
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; ENABLE-SHUFFLE-PADDING:       vector.ph:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[WIDE_TRIP_COUNT]], 16
; ENABLE-SHUFFLE-PADDING-NEXT:    [[N_VEC:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[N_MOD_VF]]
; ENABLE-SHUFFLE-PADDING-NEXT:    br label [[VECTOR_BODY:%.*]]
; ENABLE-SHUFFLE-PADDING:       vector.body:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP0:%.*]] = add i64 [[INDEX]], 0
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP1:%.*]] = add i64 [[INDEX]], 8
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_PATIC:%.*]], ptr [[PS]], i64 [[TMP0]]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP1]]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP2]], i64 0, i32 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP3]], i64 0, i32 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP6:%.*]] = getelementptr inbounds float, ptr [[TMP4]], i32 -1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP7:%.*]] = getelementptr inbounds float, ptr [[TMP5]], i32 -1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP8:%.*]] = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 8)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[LDN:%.*]] = call { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } @llvm.aarch64.sve.ld3.sret.nxv4f32(<vscale x 4 x i1> [[TMP8]], ptr [[TMP6]])
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP9:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN]], 2
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP10:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP9]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP11:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN]], 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP12:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP11]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP13:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN]], 0
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP14:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP13]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP15:%.*]] = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 8)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[LDN8:%.*]] = call { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } @llvm.aarch64.sve.ld3.sret.nxv4f32(<vscale x 4 x i1> [[TMP15]], ptr [[TMP7]])
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP16:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN8]], 2
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP17:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP16]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP18:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN8]], 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP19:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP18]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP20:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN8]], 0
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP21:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP20]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP22:%.*]] = fadd contract <8 x float> [[TMP12]], [[TMP14]]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP23:%.*]] = fadd contract <8 x float> [[TMP19]], [[TMP21]]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP24:%.*]] = fadd contract <8 x float> [[TMP12]], [[TMP10]]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP25:%.*]] = fadd contract <8 x float> [[TMP19]], [[TMP17]]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP26:%.*]] = shufflevector <8 x float> [[TMP22]], <8 x float> [[TMP24]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP27:%.*]] = shufflevector <8 x float> [[TMP10]], <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP28:%.*]] = shufflevector <16 x float> [[TMP26]], <16 x float> [[TMP27]], <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP29:%.*]] = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 8)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP30:%.*]] = shufflevector <24 x float> [[TMP28]], <24 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP31:%.*]] = call <vscale x 4 x float> @llvm.vector.insert.nxv4f32.v8f32(<vscale x 4 x float> undef, <8 x float> [[TMP30]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP32:%.*]] = shufflevector <24 x float> [[TMP28]], <24 x float> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP33:%.*]] = call <vscale x 4 x float> @llvm.vector.insert.nxv4f32.v8f32(<vscale x 4 x float> undef, <8 x float> [[TMP32]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP34:%.*]] = shufflevector <24 x float> [[TMP28]], <24 x float> poison, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP35:%.*]] = call <vscale x 4 x float> @llvm.vector.insert.nxv4f32.v8f32(<vscale x 4 x float> undef, <8 x float> [[TMP34]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    call void @llvm.aarch64.sve.st3.nxv4f32(<vscale x 4 x float> [[TMP31]], <vscale x 4 x float> [[TMP33]], <vscale x 4 x float> [[TMP35]], <vscale x 4 x i1> [[TMP29]], ptr [[TMP6]])
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP36:%.*]] = shufflevector <8 x float> [[TMP23]], <8 x float> [[TMP25]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP37:%.*]] = shufflevector <8 x float> [[TMP17]], <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP38:%.*]] = shufflevector <16 x float> [[TMP36]], <16 x float> [[TMP37]], <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP39:%.*]] = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 8)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP40:%.*]] = shufflevector <24 x float> [[TMP38]], <24 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP41:%.*]] = call <vscale x 4 x float> @llvm.vector.insert.nxv4f32.v8f32(<vscale x 4 x float> undef, <8 x float> [[TMP40]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP42:%.*]] = shufflevector <24 x float> [[TMP38]], <24 x float> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP43:%.*]] = call <vscale x 4 x float> @llvm.vector.insert.nxv4f32.v8f32(<vscale x 4 x float> undef, <8 x float> [[TMP42]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP44:%.*]] = shufflevector <24 x float> [[TMP38]], <24 x float> poison, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP45:%.*]] = call <vscale x 4 x float> @llvm.vector.insert.nxv4f32.v8f32(<vscale x 4 x float> undef, <8 x float> [[TMP44]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    call void @llvm.aarch64.sve.st3.nxv4f32(<vscale x 4 x float> [[TMP41]], <vscale x 4 x float> [[TMP43]], <vscale x 4 x float> [[TMP45]], <vscale x 4 x i1> [[TMP39]], ptr [[TMP7]])
; ENABLE-SHUFFLE-PADDING-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 16
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP46:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[TMP46]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP10:![0-9]+]]
; ENABLE-SHUFFLE-PADDING:       middle.block:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[WIDE_TRIP_COUNT]], [[N_VEC]]
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; ENABLE-SHUFFLE-PADDING:       scalar.ph:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; ENABLE-SHUFFLE-PADDING-NEXT:    br label [[FOR_BODY:%.*]]
; ENABLE-SHUFFLE-PADDING:       for.cond.cleanup.loopexit:
; ENABLE-SHUFFLE-PADDING-NEXT:    br label [[FOR_COND_CLEANUP]]
; ENABLE-SHUFFLE-PADDING:       for.cond.cleanup:
; ENABLE-SHUFFLE-PADDING-NEXT:    ret void
; ENABLE-SHUFFLE-PADDING:       for.body:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[INDVARS_IV]]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[Y1:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[ARRAYIDX]], i64 0, i32 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP47:%.*]] = load float, ptr [[Y1]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP48:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[ADD:%.*]] = fadd contract float [[TMP47]], [[TMP48]]
; ENABLE-SHUFFLE-PADDING-NEXT:    store float [[ADD]], ptr [[ARRAYIDX]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[Z7:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[ARRAYIDX]], i64 0, i32 2
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP49:%.*]] = load float, ptr [[Z7]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[ADD11:%.*]] = fadd contract float [[TMP47]], [[TMP49]]
; ENABLE-SHUFFLE-PADDING-NEXT:    store float [[ADD11]], ptr [[Y1]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP11:![0-9]+]]
;
; DISABLE-SHUFFLE-PADDING-LABEL: define dso_local void @test4(
; DISABLE-SHUFFLE-PADDING-SAME: i32 noundef [[NUM:%.*]], ptr nocapture noundef [[PS:%.*]], i32 noundef [[X:%.*]], i32 noundef [[Y:%.*]], i32 noundef [[Z:%.*]]) #[[ATTR0]] {
; DISABLE-SHUFFLE-PADDING-NEXT:  entry:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[CMP20:%.*]] = icmp sgt i32 [[NUM]], 0
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[CMP20]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DISABLE-SHUFFLE-PADDING:       for.body.preheader:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[NUM]] to i64
; DISABLE-SHUFFLE-PADDING-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[WIDE_TRIP_COUNT]], 8
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; DISABLE-SHUFFLE-PADDING:       vector.ph:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[WIDE_TRIP_COUNT]], 8
; DISABLE-SHUFFLE-PADDING-NEXT:    [[N_VEC:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[N_MOD_VF]]
; DISABLE-SHUFFLE-PADDING-NEXT:    br label [[VECTOR_BODY:%.*]]
; DISABLE-SHUFFLE-PADDING:       vector.body:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP0:%.*]] = add i64 [[INDEX]], 0
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP1:%.*]] = add i64 [[INDEX]], 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP2:%.*]] = add i64 [[INDEX]], 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP3:%.*]] = add i64 [[INDEX]], 3
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP4:%.*]] = add i64 [[INDEX]], 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP5:%.*]] = add i64 [[INDEX]], 5
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP6:%.*]] = add i64 [[INDEX]], 6
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP7:%.*]] = add i64 [[INDEX]], 7
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT_PATIC:%.*]], ptr [[PS]], i64 [[TMP0]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP1]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP2]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP3]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP4]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP5]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP6]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP7]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP8]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP9]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP18:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP10]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP19:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP11]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP20:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP12]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP21:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP13]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP22:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP14]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP23:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP15]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP24:%.*]] = getelementptr inbounds float, ptr [[TMP16]], i32 -1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP25:%.*]] = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 8)
; DISABLE-SHUFFLE-PADDING-NEXT:    [[LDN:%.*]] = call { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } @llvm.aarch64.sve.ld3.sret.nxv4f32(<vscale x 4 x i1> [[TMP25]], ptr [[TMP24]])
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP26:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN]], 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP27:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP26]], i64 0)
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP28:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN]], 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP29:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP28]], i64 0)
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP30:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN]], 0
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP31:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP30]], i64 0)
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP32:%.*]] = fadd contract <8 x float> [[TMP29]], [[TMP31]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP33:%.*]] = extractelement <8 x float> [[TMP32]], i32 0
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP33]], ptr [[TMP8]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP34:%.*]] = extractelement <8 x float> [[TMP32]], i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP34]], ptr [[TMP9]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP35:%.*]] = extractelement <8 x float> [[TMP32]], i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP35]], ptr [[TMP10]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP36:%.*]] = extractelement <8 x float> [[TMP32]], i32 3
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP36]], ptr [[TMP11]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP37:%.*]] = extractelement <8 x float> [[TMP32]], i32 4
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP37]], ptr [[TMP12]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP38:%.*]] = extractelement <8 x float> [[TMP32]], i32 5
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP38]], ptr [[TMP13]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP39:%.*]] = extractelement <8 x float> [[TMP32]], i32 6
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP39]], ptr [[TMP14]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP40:%.*]] = extractelement <8 x float> [[TMP32]], i32 7
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP40]], ptr [[TMP15]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP41:%.*]] = fadd contract <8 x float> [[TMP29]], [[TMP27]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP42:%.*]] = extractelement <8 x float> [[TMP41]], i32 0
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP42]], ptr [[TMP16]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP43:%.*]] = extractelement <8 x float> [[TMP41]], i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP43]], ptr [[TMP17]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP44:%.*]] = extractelement <8 x float> [[TMP41]], i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP44]], ptr [[TMP18]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP45:%.*]] = extractelement <8 x float> [[TMP41]], i32 3
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP45]], ptr [[TMP19]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP46:%.*]] = extractelement <8 x float> [[TMP41]], i32 4
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP46]], ptr [[TMP20]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP47:%.*]] = extractelement <8 x float> [[TMP41]], i32 5
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP47]], ptr [[TMP21]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP48:%.*]] = extractelement <8 x float> [[TMP41]], i32 6
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP48]], ptr [[TMP22]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP49:%.*]] = extractelement <8 x float> [[TMP41]], i32 7
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[TMP49]], ptr [[TMP23]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 8
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP50:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[TMP50]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP10:![0-9]+]]
; DISABLE-SHUFFLE-PADDING:       middle.block:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[WIDE_TRIP_COUNT]], [[N_VEC]]
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; DISABLE-SHUFFLE-PADDING:       scalar.ph:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; DISABLE-SHUFFLE-PADDING-NEXT:    br label [[FOR_BODY:%.*]]
; DISABLE-SHUFFLE-PADDING:       for.cond.cleanup.loopexit:
; DISABLE-SHUFFLE-PADDING-NEXT:    br label [[FOR_COND_CLEANUP]]
; DISABLE-SHUFFLE-PADDING:       for.cond.cleanup:
; DISABLE-SHUFFLE-PADDING-NEXT:    ret void
; DISABLE-SHUFFLE-PADDING:       for.body:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[INDVARS_IV]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[Y1:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[ARRAYIDX]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP51:%.*]] = load float, ptr [[Y1]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP52:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[ADD:%.*]] = fadd contract float [[TMP51]], [[TMP52]]
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[ADD]], ptr [[ARRAYIDX]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[Z7:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[ARRAYIDX]], i64 0, i32 2
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP53:%.*]] = load float, ptr [[Z7]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[ADD11:%.*]] = fadd contract float [[TMP51]], [[TMP53]]
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[ADD11]], ptr [[Y1]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP11:![0-9]+]]
;
entry:
  %cmp20 = icmp sgt i32 %num, 0
  br i1 %cmp20, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %num to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds %struct.patic, ptr %ps, i64 %indvars.iv
  %y1 = getelementptr inbounds %struct.patic, ptr %arrayidx, i64 0, i32 1
  %0 = load float, ptr %y1, align 4
  %1 = load float, ptr %arrayidx, align 4
  %add = fadd contract float %0, %1
  store float %add, ptr %arrayidx, align 4
  %z7 = getelementptr inbounds %struct.patic, ptr %arrayidx, i64 0, i32 2
  %2 = load float, ptr %z7, align 4
  %add11 = fadd contract float %0, %2
  store float %add11, ptr %y1, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

; The feature of the case is struct member is cross used by each other, it is
; also supported.
;
; for (int i = 0; i < num; i++) {
;   ps[i].x += ps[i].y;
;   ps[i].y += ps[i].x;
; }
;
define dso_local void @test5(i32 noundef %num, ptr nocapture noundef %ps, i32 noundef %x, i32 noundef %y, i32 noundef %z) {
; ENABLE-SHUFFLE-PADDING-LABEL: define dso_local void @test5(
; ENABLE-SHUFFLE-PADDING-SAME: i32 noundef [[NUM:%.*]], ptr nocapture noundef [[PS:%.*]], i32 noundef [[X:%.*]], i32 noundef [[Y:%.*]], i32 noundef [[Z:%.*]]) #[[ATTR0]] {
; ENABLE-SHUFFLE-PADDING-NEXT:  entry:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[CMP20:%.*]] = icmp sgt i32 [[NUM]], 0
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[CMP20]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; ENABLE-SHUFFLE-PADDING:       for.body.preheader:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[NUM]] to i64
; ENABLE-SHUFFLE-PADDING-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ule i64 [[WIDE_TRIP_COUNT]], 16
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; ENABLE-SHUFFLE-PADDING:       vector.ph:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[WIDE_TRIP_COUNT]], 16
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP0:%.*]] = icmp eq i64 [[N_MOD_VF]], 0
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP1:%.*]] = select i1 [[TMP0]], i64 16, i64 [[N_MOD_VF]]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[N_VEC:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[TMP1]]
; ENABLE-SHUFFLE-PADDING-NEXT:    br label [[VECTOR_BODY:%.*]]
; ENABLE-SHUFFLE-PADDING:       vector.body:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP2:%.*]] = add i64 [[INDEX]], 0
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP3:%.*]] = add i64 [[INDEX]], 8
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_PATIC:%.*]], ptr [[PS]], i64 [[TMP2]]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[TMP3]]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP4]], i64 0, i32 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[TMP5]], i64 0, i32 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP8:%.*]] = getelementptr inbounds float, ptr [[TMP6]], i32 -1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP9:%.*]] = getelementptr inbounds float, ptr [[TMP7]], i32 -1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP10:%.*]] = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 8)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[LDN:%.*]] = call { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } @llvm.aarch64.sve.ld3.sret.nxv4f32(<vscale x 4 x i1> [[TMP10]], ptr [[TMP8]])
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP11:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN]], 2
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP12:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP11]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP13:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN]], 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP14:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP13]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP15:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN]], 0
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP16:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP15]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP17:%.*]] = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 8)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[LDN8:%.*]] = call { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } @llvm.aarch64.sve.ld3.sret.nxv4f32(<vscale x 4 x i1> [[TMP17]], ptr [[TMP9]])
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP18:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN8]], 2
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP19:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP18]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP20:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN8]], 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP21:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP20]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP22:%.*]] = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } [[LDN8]], 0
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP23:%.*]] = call <8 x float> @llvm.vector.extract.v8f32.nxv4f32(<vscale x 4 x float> [[TMP22]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP24:%.*]] = fadd contract <8 x float> [[TMP14]], [[TMP16]]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP25:%.*]] = fadd contract <8 x float> [[TMP21]], [[TMP23]]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP26:%.*]] = fadd contract <8 x float> [[TMP14]], [[TMP24]]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP27:%.*]] = fadd contract <8 x float> [[TMP21]], [[TMP25]]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP28:%.*]] = shufflevector <8 x float> [[TMP24]], <8 x float> [[TMP26]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP29:%.*]] = shufflevector <8 x float> [[TMP12]], <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP30:%.*]] = shufflevector <16 x float> [[TMP28]], <16 x float> [[TMP29]], <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP31:%.*]] = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 8)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP32:%.*]] = shufflevector <24 x float> [[TMP30]], <24 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP33:%.*]] = call <vscale x 4 x float> @llvm.vector.insert.nxv4f32.v8f32(<vscale x 4 x float> undef, <8 x float> [[TMP32]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP34:%.*]] = shufflevector <24 x float> [[TMP30]], <24 x float> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP35:%.*]] = call <vscale x 4 x float> @llvm.vector.insert.nxv4f32.v8f32(<vscale x 4 x float> undef, <8 x float> [[TMP34]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP36:%.*]] = shufflevector <24 x float> [[TMP30]], <24 x float> poison, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP37:%.*]] = call <vscale x 4 x float> @llvm.vector.insert.nxv4f32.v8f32(<vscale x 4 x float> undef, <8 x float> [[TMP36]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    call void @llvm.aarch64.sve.st3.nxv4f32(<vscale x 4 x float> [[TMP33]], <vscale x 4 x float> [[TMP35]], <vscale x 4 x float> [[TMP37]], <vscale x 4 x i1> [[TMP31]], ptr [[TMP8]])
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP38:%.*]] = shufflevector <8 x float> [[TMP25]], <8 x float> [[TMP27]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP39:%.*]] = shufflevector <8 x float> [[TMP19]], <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP40:%.*]] = shufflevector <16 x float> [[TMP38]], <16 x float> [[TMP39]], <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP41:%.*]] = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 8)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP42:%.*]] = shufflevector <24 x float> [[TMP40]], <24 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP43:%.*]] = call <vscale x 4 x float> @llvm.vector.insert.nxv4f32.v8f32(<vscale x 4 x float> undef, <8 x float> [[TMP42]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP44:%.*]] = shufflevector <24 x float> [[TMP40]], <24 x float> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP45:%.*]] = call <vscale x 4 x float> @llvm.vector.insert.nxv4f32.v8f32(<vscale x 4 x float> undef, <8 x float> [[TMP44]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP46:%.*]] = shufflevector <24 x float> [[TMP40]], <24 x float> poison, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP47:%.*]] = call <vscale x 4 x float> @llvm.vector.insert.nxv4f32.v8f32(<vscale x 4 x float> undef, <8 x float> [[TMP46]], i64 0)
; ENABLE-SHUFFLE-PADDING-NEXT:    call void @llvm.aarch64.sve.st3.nxv4f32(<vscale x 4 x float> [[TMP43]], <vscale x 4 x float> [[TMP45]], <vscale x 4 x float> [[TMP47]], <vscale x 4 x i1> [[TMP41]], ptr [[TMP9]])
; ENABLE-SHUFFLE-PADDING-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 16
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP48:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[TMP48]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP12:![0-9]+]]
; ENABLE-SHUFFLE-PADDING:       middle.block:
; ENABLE-SHUFFLE-PADDING-NEXT:    br label [[SCALAR_PH]]
; ENABLE-SHUFFLE-PADDING:       scalar.ph:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; ENABLE-SHUFFLE-PADDING-NEXT:    br label [[FOR_BODY:%.*]]
; ENABLE-SHUFFLE-PADDING:       for.cond.cleanup.loopexit:
; ENABLE-SHUFFLE-PADDING-NEXT:    br label [[FOR_COND_CLEANUP]]
; ENABLE-SHUFFLE-PADDING:       for.cond.cleanup:
; ENABLE-SHUFFLE-PADDING-NEXT:    ret void
; ENABLE-SHUFFLE-PADDING:       for.body:
; ENABLE-SHUFFLE-PADDING-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[PS]], i64 [[INDVARS_IV]]
; ENABLE-SHUFFLE-PADDING-NEXT:    [[Y1:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[ARRAYIDX]], i64 0, i32 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP49:%.*]] = load float, ptr [[Y1]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[TMP50:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[ADD:%.*]] = fadd contract float [[TMP49]], [[TMP50]]
; ENABLE-SHUFFLE-PADDING-NEXT:    store float [[ADD]], ptr [[ARRAYIDX]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[ADD11:%.*]] = fadd contract float [[TMP49]], [[ADD]]
; ENABLE-SHUFFLE-PADDING-NEXT:    store float [[ADD11]], ptr [[Y1]], align 4
; ENABLE-SHUFFLE-PADDING-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; ENABLE-SHUFFLE-PADDING-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; ENABLE-SHUFFLE-PADDING-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[FOR_BODY]], !llvm.loop [[LOOP13:![0-9]+]]
;
; DISABLE-SHUFFLE-PADDING-LABEL: define dso_local void @test5(
; DISABLE-SHUFFLE-PADDING-SAME: i32 noundef [[NUM:%.*]], ptr nocapture noundef [[PS:%.*]], i32 noundef [[X:%.*]], i32 noundef [[Y:%.*]], i32 noundef [[Z:%.*]]) #[[ATTR0]] {
; DISABLE-SHUFFLE-PADDING-NEXT:  entry:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[CMP20:%.*]] = icmp sgt i32 [[NUM]], 0
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[CMP20]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DISABLE-SHUFFLE-PADDING:       for.body.preheader:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[NUM]] to i64
; DISABLE-SHUFFLE-PADDING-NEXT:    br label [[FOR_BODY:%.*]]
; DISABLE-SHUFFLE-PADDING:       for.cond.cleanup.loopexit:
; DISABLE-SHUFFLE-PADDING-NEXT:    br label [[FOR_COND_CLEANUP]]
; DISABLE-SHUFFLE-PADDING:       for.cond.cleanup:
; DISABLE-SHUFFLE-PADDING-NEXT:    ret void
; DISABLE-SHUFFLE-PADDING:       for.body:
; DISABLE-SHUFFLE-PADDING-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [[STRUCT_PATIC:%.*]], ptr [[PS]], i64 [[INDVARS_IV]]
; DISABLE-SHUFFLE-PADDING-NEXT:    [[Y1:%.*]] = getelementptr inbounds [[STRUCT_PATIC]], ptr [[ARRAYIDX]], i64 0, i32 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP0:%.*]] = load float, ptr [[Y1]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[TMP1:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[ADD:%.*]] = fadd contract float [[TMP0]], [[TMP1]]
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[ADD]], ptr [[ARRAYIDX]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[ADD11:%.*]] = fadd contract float [[TMP0]], [[ADD]]
; DISABLE-SHUFFLE-PADDING-NEXT:    store float [[ADD11]], ptr [[Y1]], align 4
; DISABLE-SHUFFLE-PADDING-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DISABLE-SHUFFLE-PADDING-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DISABLE-SHUFFLE-PADDING-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[FOR_BODY]]
;
entry:
  %cmp20 = icmp sgt i32 %num, 0
  br i1 %cmp20, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %num to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds %struct.patic, ptr %ps, i64 %indvars.iv
  %y1 = getelementptr inbounds %struct.patic, ptr %arrayidx, i64 0, i32 1
  %0 = load float, ptr %y1, align 4
  %1 = load float, ptr %arrayidx, align 4
  %add = fadd contract float %0, %1
  store float %add, ptr %arrayidx, align 4
  %add11 = fadd contract float %0, %add
  store float %add11, ptr %y1, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}
