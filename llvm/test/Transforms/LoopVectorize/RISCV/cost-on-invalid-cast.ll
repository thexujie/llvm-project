; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt < %s -passes=loop-vectorize -mtriple=riscv64 -mattr=+v -S 2>&1 | FileCheck %s

define void @c() {
; CHECK-LABEL: define void @c(
; CHECK-SAME: ) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[FOR_COND:%.*]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[F_0:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[ADD:%.*]], [[COND_END:%.*]] ]
; CHECK-NEXT:    [[ADD]] = add i32 [[F_0]], 1
; CHECK-NEXT:    br i1 false, label [[COND_FALSE:%.*]], label [[COND_TRUE:%.*]]
; CHECK:       cond.true:
; CHECK-NEXT:    [[CONV10:%.*]] = trunc i64 0 to i32
; CHECK-NEXT:    br label [[COND_END]]
; CHECK:       cond.false:
; CHECK-NEXT:    [[TOBOOL15:%.*]] = zext i8 0 to i32
; CHECK-NEXT:    br label [[COND_END]]
; CHECK:       cond.end:
; CHECK-NEXT:    [[COND:%.*]] = phi i32 [ [[CONV10]], [[COND_TRUE]] ], [ 0, [[COND_FALSE]] ]
; CHECK-NEXT:    [[TMP0:%.*]] = trunc i32 [[COND]] to i8
; CHECK-NEXT:    [[CONV17:%.*]] = and i8 [[TMP0]], 0
; CHECK-NEXT:    store i8 [[CONV17]], ptr null, align 1
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[F_0]], 1
; CHECK-NEXT:    br i1 [[CMP]], label [[FOR_COND]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    ret void
;
entry:
  br label %for.cond

for.cond:
  %f.0 = phi i32 [ 0, %entry ], [ %add, %cond.end ]
  %add = add i32 %f.0, 1
  br i1 false, label %cond.false, label %cond.true

cond.true:
  %conv10 = trunc i64 0 to i32
  br label %cond.end

cond.false:
  %tobool15 = zext i8 0 to i32
  br label %cond.end

cond.end:
  %cond = phi i32 [ %conv10, %cond.true ], [ 0, %cond.false ]
  %0 = trunc i32 %cond to i8
  %conv17 = and i8 %0, 0
  store i8 %conv17, ptr null, align 1
  %cmp = icmp slt i32 %f.0, 1
  br i1 %cmp, label %for.cond, label %for.cond.cleanup

for.cond.cleanup:
  ret void
}
