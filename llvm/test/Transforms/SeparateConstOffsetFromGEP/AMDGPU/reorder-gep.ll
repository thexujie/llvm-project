; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -S -mtriple=amdgcn-amd-amdhsa -mcpu=gfx90a --passes=separate-const-offset-from-gep < %s | FileCheck %s

define void @sink_addr(ptr addrspace(3) %in.ptr, i32 %in.idx0, i32 %in.idx1) {
; CHECK-LABEL: define void @sink_addr(
; CHECK-SAME: ptr addrspace(3) [[IN_PTR:%.*]], i32 [[IN_IDX0:%.*]], i32 [[IN_IDX1:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[BASE:%.*]] = getelementptr half, ptr addrspace(3) [[IN_PTR]], i32 [[IN_IDX0]]
; CHECK-NEXT:    [[IDX0:%.*]] = getelementptr half, ptr addrspace(3) [[BASE]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr half, ptr addrspace(3) [[BASE]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr half, ptr addrspace(3) [[TMP0]], i32 256
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr half, ptr addrspace(3) [[BASE]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr half, ptr addrspace(3) [[TMP2]], i32 512
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr half, ptr addrspace(3) [[BASE]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr half, ptr addrspace(3) [[TMP4]], i32 768
; CHECK-NEXT:    ret void
;
entry:
  %base = getelementptr half, ptr addrspace(3) %in.ptr, i32 %in.idx0
  %idx0 = getelementptr half, ptr addrspace(3) %base, i32 %in.idx1
  %const1 = getelementptr half, ptr addrspace(3) %base, i32 256
  %idx1 = getelementptr half, ptr addrspace(3) %const1, i32 %in.idx1
  %const2 = getelementptr half, ptr addrspace(3) %base, i32 512
  %idx2 = getelementptr half, ptr addrspace(3) %const2, i32 %in.idx1
  %const3 = getelementptr half, ptr addrspace(3) %base, i32 768
  %idx3 = getelementptr half, ptr addrspace(3) %const3, i32 %in.idx1
  ret void
}

define void @illegal_addr_mode(ptr addrspace(3) %in.ptr, i32 %in.idx0, i32 %in.idx1) {
; CHECK-LABEL: define void @illegal_addr_mode(
; CHECK-SAME: ptr addrspace(3) [[IN_PTR:%.*]], i32 [[IN_IDX0:%.*]], i32 [[IN_IDX1:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[BASE:%.*]] = getelementptr half, ptr addrspace(3) [[IN_PTR]], i32 [[IN_IDX0]]
; CHECK-NEXT:    [[IDX0:%.*]] = getelementptr half, ptr addrspace(3) [[BASE]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[CONST1:%.*]] = getelementptr half, ptr addrspace(3) [[BASE]], i32 38192
; CHECK-NEXT:    [[IDX1:%.*]] = getelementptr half, ptr addrspace(3) [[CONST1]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[CONST2:%.*]] = getelementptr half, ptr addrspace(3) [[BASE]], i32 38448
; CHECK-NEXT:    [[IDX2:%.*]] = getelementptr half, ptr addrspace(3) [[CONST2]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[CONST3:%.*]] = getelementptr half, ptr addrspace(3) [[BASE]], i32 38764
; CHECK-NEXT:    [[IDX3:%.*]] = getelementptr half, ptr addrspace(3) [[CONST3]], i32 [[IN_IDX1]]
; CHECK-NEXT:    ret void
;
entry:
  %base = getelementptr half, ptr addrspace(3) %in.ptr, i32 %in.idx0
  %idx0 = getelementptr half, ptr addrspace(3) %base, i32 %in.idx1
  %const1 = getelementptr half, ptr addrspace(3) %base, i32 38192
  %idx1 = getelementptr half, ptr addrspace(3) %const1, i32 %in.idx1
  %const2 = getelementptr half, ptr addrspace(3) %base, i32 38448
  %idx2 = getelementptr half, ptr addrspace(3) %const2, i32 %in.idx1
  %const3 = getelementptr half, ptr addrspace(3) %base, i32 38764
  %idx3 = getelementptr half, ptr addrspace(3) %const3, i32 %in.idx1
  ret void
}


define void @reorder_expand(ptr addrspace(3) %in.ptr, i32 %in.idx0, i32 %in.idx1) {
; CHECK-LABEL: define void @reorder_expand(
; CHECK-SAME: ptr addrspace(3) [[IN_PTR:%.*]], i32 [[IN_IDX0:%.*]], i32 [[IN_IDX1:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[BASE:%.*]] = getelementptr i8, ptr addrspace(3) [[IN_PTR]], i32 [[IN_IDX0]]
; CHECK-NEXT:    [[IDX0:%.*]] = getelementptr half, ptr addrspace(3) [[BASE]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr half, ptr addrspace(3) [[BASE]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr half, ptr addrspace(3) [[TMP0]], i32 128
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr half, ptr addrspace(3) [[BASE]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr half, ptr addrspace(3) [[TMP2]], i32 256
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr half, ptr addrspace(3) [[BASE]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr half, ptr addrspace(3) [[TMP4]], i32 384
; CHECK-NEXT:    ret void
;
entry:
  %base = getelementptr i8, ptr addrspace(3) %in.ptr, i32 %in.idx0
  %idx0 = getelementptr half, ptr addrspace(3) %base, i32 %in.idx1
  %const1 = getelementptr i8, ptr addrspace(3) %base, i32 256
  %idx1 = getelementptr half, ptr addrspace(3) %const1, i32 %in.idx1
  %const2 = getelementptr i8, ptr addrspace(3) %base, i32 512
  %idx2 = getelementptr half, ptr addrspace(3) %const2, i32 %in.idx1
  %const3 = getelementptr i8, ptr addrspace(3) %base, i32 768
  %idx3 = getelementptr half, ptr addrspace(3) %const3, i32 %in.idx1
  ret void
}

define void @reorder_shrink(ptr addrspace(3) %in.ptr, i32 %in.idx0, i32 %in.idx1) {
; CHECK-LABEL: define void @reorder_shrink(
; CHECK-SAME: ptr addrspace(3) [[IN_PTR:%.*]], i32 [[IN_IDX0:%.*]], i32 [[IN_IDX1:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[BASE:%.*]] = getelementptr i64, ptr addrspace(3) [[IN_PTR]], i32 [[IN_IDX0]]
; CHECK-NEXT:    [[IDX0:%.*]] = getelementptr half, ptr addrspace(3) [[BASE]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr half, ptr addrspace(3) [[BASE]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr half, ptr addrspace(3) [[TMP0]], i32 1024
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr half, ptr addrspace(3) [[BASE]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr half, ptr addrspace(3) [[TMP2]], i32 2048
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr half, ptr addrspace(3) [[BASE]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr half, ptr addrspace(3) [[TMP4]], i32 3072
; CHECK-NEXT:    ret void
;
entry:
  %base = getelementptr i64, ptr addrspace(3) %in.ptr, i32 %in.idx0
  %idx0 = getelementptr half, ptr addrspace(3) %base, i32 %in.idx1
  %const1 = getelementptr i64, ptr addrspace(3) %base, i32 256
  %idx1 = getelementptr half, ptr addrspace(3) %const1, i32 %in.idx1
  %const2 = getelementptr i64, ptr addrspace(3) %base, i32 512
  %idx2 = getelementptr half, ptr addrspace(3) %const2, i32 %in.idx1
  %const3 = getelementptr i64, ptr addrspace(3) %base, i32 768
  %idx3 = getelementptr half, ptr addrspace(3) %const3, i32 %in.idx1
  ret void
}

define void @reorder_shrink2(ptr addrspace(3) %in.ptr, i32 %in.idx0, i32 %in.idx1) {
; CHECK-LABEL: define void @reorder_shrink2(
; CHECK-SAME: ptr addrspace(3) [[IN_PTR:%.*]], i32 [[IN_IDX0:%.*]], i32 [[IN_IDX1:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[BASE:%.*]] = getelementptr half, ptr addrspace(3) [[IN_PTR]], i32 [[IN_IDX0]]
; CHECK-NEXT:    [[IDX0:%.*]] = getelementptr i8, ptr addrspace(3) [[BASE]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr i8, ptr addrspace(3) [[BASE]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr addrspace(3) [[TMP0]], i32 512
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr addrspace(3) [[BASE]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr addrspace(3) [[TMP2]], i32 1024
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr addrspace(3) [[BASE]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr addrspace(3) [[TMP4]], i32 1536
; CHECK-NEXT:    ret void
;
entry:
  %base = getelementptr half, ptr addrspace(3) %in.ptr, i32 %in.idx0
  %idx0 = getelementptr i8, ptr addrspace(3) %base, i32 %in.idx1
  %const1 = getelementptr half, ptr addrspace(3) %base, i32 256
  %idx1 = getelementptr i8, ptr addrspace(3) %const1, i32 %in.idx1
  %const2 = getelementptr half, ptr addrspace(3) %base, i32 512
  %idx2 = getelementptr i8, ptr addrspace(3) %const2, i32 %in.idx1
  %const3 = getelementptr half, ptr addrspace(3) %base, i32 768
  %idx3 = getelementptr i8, ptr addrspace(3) %const3, i32 %in.idx1
  ret void
}



define void @bad_index(ptr addrspace(3) %in.ptr, i32 %in.idx0, i32 %in.idx1) {
; CHECK-LABEL: define void @bad_index(
; CHECK-SAME: ptr addrspace(3) [[IN_PTR:%.*]], i32 [[IN_IDX0:%.*]], i32 [[IN_IDX1:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[BASE:%.*]] = getelementptr half, ptr addrspace(3) [[IN_PTR]], i32 [[IN_IDX0]]
; CHECK-NEXT:    [[IDX0:%.*]] = getelementptr half, ptr addrspace(3) [[BASE]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[CONST1:%.*]] = getelementptr i8, ptr addrspace(3) [[BASE]], i32 1
; CHECK-NEXT:    [[IDX1:%.*]] = getelementptr half, ptr addrspace(3) [[CONST1]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr half, ptr addrspace(3) [[BASE]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr half, ptr addrspace(3) [[TMP0]], i32 1
; CHECK-NEXT:    [[CONST3:%.*]] = getelementptr i8, ptr addrspace(3) [[BASE]], i32 3
; CHECK-NEXT:    [[IDX3:%.*]] = getelementptr half, ptr addrspace(3) [[CONST3]], i32 [[IN_IDX1]]
; CHECK-NEXT:    ret void
;
entry:
  %base = getelementptr half, ptr addrspace(3) %in.ptr, i32 %in.idx0
  %idx0 = getelementptr half, ptr addrspace(3) %base, i32 %in.idx1
  %const1 = getelementptr i8, ptr addrspace(3) %base, i32 1
  %idx1 = getelementptr half, ptr addrspace(3) %const1, i32 %in.idx1
  %const2 = getelementptr i8, ptr addrspace(3) %base, i32 2
  %idx2 = getelementptr half, ptr addrspace(3) %const2, i32 %in.idx1
  %const3 = getelementptr i8, ptr addrspace(3) %base, i32 3
  %idx3 = getelementptr half, ptr addrspace(3) %const3, i32 %in.idx1
  ret void
}


%struct.Packed = type <{ [8 x i8], [4 x half] }>
define void @struct_type(ptr addrspace(3) %in.ptr, i32 %in.idx0, i32 %in.idx1) {
; CHECK-LABEL: define void @struct_type(
; CHECK-SAME: ptr addrspace(3) [[IN_PTR:%.*]], i32 [[IN_IDX0:%.*]], i32 [[IN_IDX1:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[BASE:%.*]] = getelementptr [1024 x %struct.Packed], ptr addrspace(3) [[IN_PTR]], i32 [[IN_IDX0]]
; CHECK-NEXT:    [[IDX0:%.*]] = getelementptr i8, ptr addrspace(3) [[BASE]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[CONST1:%.*]] = getelementptr [1024 x %struct.Packed], ptr addrspace(3) [[BASE]], i32 256
; CHECK-NEXT:    [[IDX1:%.*]] = getelementptr i8, ptr addrspace(3) [[CONST1]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[CONST2:%.*]] = getelementptr [1024 x %struct.Packed], ptr addrspace(3) [[BASE]], i32 512
; CHECK-NEXT:    [[IDX2:%.*]] = getelementptr i8, ptr addrspace(3) [[CONST2]], i32 [[IN_IDX1]]
; CHECK-NEXT:    [[CONST3:%.*]] = getelementptr [1024 x %struct.Packed], ptr addrspace(3) [[BASE]], i32 768
; CHECK-NEXT:    [[IDX3:%.*]] = getelementptr i8, ptr addrspace(3) [[CONST3]], i32 [[IN_IDX1]]
; CHECK-NEXT:    ret void
;
entry:
  %base = getelementptr [1024 x %struct.Packed], ptr addrspace(3) %in.ptr, i32 %in.idx0
  %idx0 = getelementptr i8, ptr addrspace(3) %base, i32 %in.idx1
  %const1 = getelementptr [1024 x %struct.Packed], ptr addrspace(3) %base, i32 256
  %idx1 = getelementptr i8, ptr addrspace(3) %const1, i32 %in.idx1
  %const2 = getelementptr [1024 x %struct.Packed], ptr addrspace(3) %base, i32 512
  %idx2 = getelementptr i8, ptr addrspace(3) %const2, i32 %in.idx1
  %const3 = getelementptr [1024 x %struct.Packed], ptr addrspace(3) %base, i32 768
  %idx3 = getelementptr i8, ptr addrspace(3) %const3, i32 %in.idx1
  ret void
}
