; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -p=gvn < %s | FileCheck %s -check-prefixes=GVN,OLDGVN
; RUN: opt -S -p=newgvn < %s | FileCheck %s -check-prefixes=GVN,NEWGVN

define i8 @test1(ptr %P) {
; GVN-LABEL: @test1(
; GVN-NEXT:    [[V1:%.*]] = load i32, ptr [[P:%.*]], align 1
; GVN-NEXT:    [[TMP1:%.*]] = trunc i32 [[V1]] to i8
; GVN-NEXT:    [[V4:%.*]] = add i8 [[TMP1]], [[TMP1]]
; GVN-NEXT:    ret i8 [[V4]]
;
  %V1 = load i32, ptr %P, align 1
  %V2 = load i8, ptr %P, align 1
  %V3 = trunc i32 %V1 to i8
  %V4 = add i8 %V2, %V3
  ret i8 %V4
}

define i32 @test2(ptr %P) {
; GVN-LABEL: @test2(
; GVN-NEXT:  Entry:
; GVN-NEXT:    [[V1:%.*]] = load <2 x i32>, ptr [[P:%.*]], align 1
; GVN-NEXT:    [[TMP0:%.*]] = bitcast <2 x i32> [[V1]] to i64
; GVN-NEXT:    [[TMP1:%.*]] = trunc i64 [[TMP0]] to i32
; GVN-NEXT:    [[V5:%.*]] = add i32 [[TMP1]], [[TMP1]]
; GVN-NEXT:    ret i32 [[V5]]
;
Entry:
  %V1 = load <2 x i32>, ptr %P, align 1
  %V2 = load i32, ptr %P, align 1
  %V3 = bitcast <2 x i32> %V1 to i64
  %V4 = trunc i64 %V3 to i32
  %V5 = add i32 %V2, %V4
  ret i32 %V5
}

define <{<2 x i32>, i32}> @test3(ptr %P) {
; GVN-LABEL: @test3(
; GVN-NEXT:  Entry:
; GVN-NEXT:    [[V1:%.*]] = load <2 x i32>, ptr [[P:%.*]], align 1
; GVN-NEXT:    [[TMP0:%.*]] = bitcast <2 x i32> [[V1]] to i64
; GVN-NEXT:    [[TMP1:%.*]] = trunc i64 [[TMP0]] to i32
; GVN-NEXT:    [[I1:%.*]] = insertvalue <{ <2 x i32>, i32 }> poison, <2 x i32> [[V1]], 0
; GVN-NEXT:    [[I2:%.*]] = insertvalue <{ <2 x i32>, i32 }> [[I1]], i32 [[TMP1]], 1
; GVN-NEXT:    ret <{ <2 x i32>, i32 }> [[I2]]
;
Entry:
  %V1 = load <2 x i32>, ptr %P, align 1
  %V2 = load i32, ptr %P, align 1
  %I1 = insertvalue <{<2 x i32>, i32}> poison, <2 x i32> %V1, 0
  %I2 = insertvalue <{<2 x i32>, i32}> %I1, i32 %V2, 1
  ret <{<2 x i32>, i32}> %I2
}

define <{<2 x i32>, i32}> @test4(ptr %P) {
; GVN-LABEL: @test4(
; GVN-NEXT:  Entry:
; GVN-NEXT:    [[V2:%.*]] = load i32, ptr [[P:%.*]], align 1
; GVN-NEXT:    [[V1:%.*]] = load <2 x i32>, ptr [[P]], align 1
; GVN-NEXT:    [[I1:%.*]] = insertvalue <{ <2 x i32>, i32 }> poison, <2 x i32> [[V1]], 0
; GVN-NEXT:    [[I2:%.*]] = insertvalue <{ <2 x i32>, i32 }> [[I1]], i32 [[V2]], 1
; GVN-NEXT:    ret <{ <2 x i32>, i32 }> [[I2]]
;
Entry:
  %V2 = load i32, ptr %P, align 1
  %V1 = load <2 x i32>, ptr %P, align 1
  %I1 = insertvalue <{<2 x i32>, i32}> poison, <2 x i32> %V1, 0
  %I2 = insertvalue <{<2 x i32>, i32}> %I1, i32 %V2, 1
  ret <{<2 x i32>, i32}> %I2
}

define <{<2 x i32>, i32, i32}> @test5(ptr %P) {
; GVN-LABEL: @test5(
; GVN-NEXT:  Entry:
; GVN-NEXT:    [[V0:%.*]] = load i32, ptr [[P:%.*]], align 1
; GVN-NEXT:    [[V1:%.*]] = load <2 x i32>, ptr [[P]], align 1
; GVN-NEXT:    [[TMP0:%.*]] = bitcast <2 x i32> [[V1]] to i64
; GVN-NEXT:    [[TMP1:%.*]] = trunc i64 [[TMP0]] to i32
; GVN-NEXT:    [[I1:%.*]] = insertvalue <{ <2 x i32>, i32, i32 }> poison, <2 x i32> [[V1]], 0
; GVN-NEXT:    [[I2:%.*]] = insertvalue <{ <2 x i32>, i32, i32 }> [[I1]], i32 [[TMP1]], 1
; GVN-NEXT:    [[I3:%.*]] = insertvalue <{ <2 x i32>, i32, i32 }> [[I2]], i32 [[V0]], 2
; GVN-NEXT:    ret <{ <2 x i32>, i32, i32 }> [[I3]]
;
Entry:
  %V0 = load i32, ptr %P, align 1
  %V1 = load <2 x i32>, ptr %P, align 1
  %V2 = load i32, ptr %P, align 1
  %I1 = insertvalue <{<2 x i32>, i32, i32}> poison, <2 x i32> %V1, 0
  %I2 = insertvalue <{<2 x i32>, i32, i32}> %I1, i32 %V2, 1
  %I3 = insertvalue <{<2 x i32>, i32, i32}> %I2, i32 %V0, 2
  ret <{<2 x i32>, i32, i32}> %I3
}

define <{<4 x i32>, <2 x i32>, i32, <2 x i32>}> @test6(ptr %P) {
; GVN-LABEL: @test6(
; GVN-NEXT:  Entry:
; GVN-NEXT:    [[V1:%.*]] = load <4 x i32>, ptr [[P:%.*]], align 1
; GVN-NEXT:    [[TMP0:%.*]] = bitcast <4 x i32> [[V1]] to i128
; GVN-NEXT:    [[TMP1:%.*]] = trunc i128 [[TMP0]] to i64
; GVN-NEXT:    [[TMP2:%.*]] = bitcast i64 [[TMP1]] to <2 x i32>
; GVN-NEXT:    [[TMP3:%.*]] = trunc i128 [[TMP0]] to i32
; GVN-NEXT:    [[I1:%.*]] = insertvalue <{ <4 x i32>, <2 x i32>, i32, <2 x i32> }> poison, <4 x i32> [[V1]], 0
; GVN-NEXT:    [[I2:%.*]] = insertvalue <{ <4 x i32>, <2 x i32>, i32, <2 x i32> }> [[I1]], <2 x i32> [[TMP2]], 1
; GVN-NEXT:    [[I3:%.*]] = insertvalue <{ <4 x i32>, <2 x i32>, i32, <2 x i32> }> [[I2]], i32 [[TMP3]], 2
; GVN-NEXT:    [[I4:%.*]] = insertvalue <{ <4 x i32>, <2 x i32>, i32, <2 x i32> }> [[I3]], <2 x i32> [[TMP2]], 3
; GVN-NEXT:    ret <{ <4 x i32>, <2 x i32>, i32, <2 x i32> }> [[I4]]
;
Entry:
  %V1 = load <4 x i32>, ptr %P, align 1
  %V2 = load <2 x i32>, ptr %P, align 1
  %V3 = load i32, ptr %P, align 1
  %V4 = load <2 x i32>, ptr %P, align 1
  %I1 = insertvalue <{<4 x i32>, <2 x i32>, i32, <2 x i32>}> poison, <4 x i32> %V1, 0
  %I2 = insertvalue <{<4 x i32>,<2 x i32>, i32, <2 x i32>}> %I1, <2 x i32> %V2, 1
  %I3 = insertvalue <{<4 x i32>, <2 x i32>, i32, <2 x i32>}> %I2, i32 %V3, 2
  %I4 = insertvalue <{<4 x i32>, <2 x i32>, i32, <2 x i32>}> %I3, <2 x i32> %V4, 3
  ret <{<4 x i32>, <2 x i32>, i32, <2 x i32>}> %I4
}

define float @test7(ptr %P, i1 %cond) {
;   Entry
;    /  \
;   T    F
;
; GVN-LABEL: @test7(
; GVN-NEXT:  Entry:
; GVN-NEXT:    [[V1:%.*]] = load i32, ptr [[P:%.*]], align 1
; GVN-NEXT:    [[TMP0:%.*]] = bitcast i32 [[V1]] to float
; GVN-NEXT:    br i1 [[COND:%.*]], label [[T:%.*]], label [[F:%.*]]
; GVN:       T:
; GVN-NEXT:    ret float [[TMP0]]
; GVN:       F:
; GVN-NEXT:    ret float [[TMP0]]
;
Entry:
  %V1 = load i32, ptr %P, align 1
  %V2 = load float, ptr %P, align 1
  br i1 %cond, label %T, label %F
T:
  ret float %V2

F:
  %V3 = bitcast i32 %V1 to float
  ret float %V3
}

define <{<2 x i32>, i32, i32, i32, i32}> @test8(ptr %P) {
; GVN-LABEL: @test8(
; GVN-NEXT:  Entry:
; GVN-NEXT:    [[V0:%.*]] = load i32, ptr [[P:%.*]], align 1
; GVN-NEXT:    [[V1:%.*]] = load <2 x i32>, ptr [[P]], align 1
; GVN-NEXT:    [[TMP0:%.*]] = bitcast <2 x i32> [[V1]] to i64
; GVN-NEXT:    [[TMP1:%.*]] = trunc i64 [[TMP0]] to i32
; GVN-NEXT:    [[I1:%.*]] = insertvalue <{ <2 x i32>, i32, i32, i32, i32 }> poison, <2 x i32> [[V1]], 0
; GVN-NEXT:    [[I2:%.*]] = insertvalue <{ <2 x i32>, i32, i32, i32, i32 }> [[I1]], i32 [[TMP1]], 1
; GVN-NEXT:    [[I3:%.*]] = insertvalue <{ <2 x i32>, i32, i32, i32, i32 }> [[I2]], i32 [[V0]], 2
; GVN-NEXT:    [[I4:%.*]] = insertvalue <{ <2 x i32>, i32, i32, i32, i32 }> [[I3]], i32 [[TMP1]], 3
; GVN-NEXT:    [[I5:%.*]] = insertvalue <{ <2 x i32>, i32, i32, i32, i32 }> [[I4]], i32 [[TMP1]], 4
; GVN-NEXT:    ret <{ <2 x i32>, i32, i32, i32, i32 }> [[I5]]
;
Entry:
  %V0 = load i32, ptr %P, align 1
  %V1 = load <2 x i32>, ptr %P, align 1
  %V2 = load i32, ptr %P, align 1
  %I1 = insertvalue <{<2 x i32>, i32, i32, i32, i32}> poison, <2 x i32> %V1, 0
  %I2 = insertvalue <{<2 x i32>, i32, i32, i32, i32}> %I1, i32 %V2, 1
  %I3 = insertvalue <{<2 x i32>, i32, i32, i32, i32}> %I2, i32 %V0, 2
  %V3 = load i32, ptr %P, align 1
  %I4 = insertvalue <{<2 x i32>, i32, i32, i32, i32}> %I3, i32 %V3, 3
  %V4 = load i32, ptr %P, align 1
  %I5 = insertvalue <{<2 x i32>, i32, i32, i32, i32}> %I4, i32 %V4, 4
  ret <{<2 x i32>, i32, i32, i32, i32}> %I5
}

define <{<4 x i32>, <2 x i32>, i32, <2 x i32>}> @test9(ptr %P) {
; GVN-LABEL: @test9(
; GVN-NEXT:  Entry:
; GVN-NEXT:    [[V1:%.*]] = load <4 x i32>, ptr [[P:%.*]], align 1
; GVN-NEXT:    [[TMP0:%.*]] = bitcast <4 x i32> [[V1]] to i128
; GVN-NEXT:    [[TMP1:%.*]] = trunc i128 [[TMP0]] to i64
; GVN-NEXT:    [[TMP2:%.*]] = bitcast i64 [[TMP1]] to <2 x i32>
; GVN-NEXT:    [[TMP3:%.*]] = trunc i128 [[TMP0]] to i32
; GVN-NEXT:    [[I1:%.*]] = insertvalue <{ <4 x i32>, <2 x i32>, i32, <2 x i32> }> poison, <4 x i32> [[V1]], 0
; GVN-NEXT:    [[I2:%.*]] = insertvalue <{ <4 x i32>, <2 x i32>, i32, <2 x i32> }> [[I1]], <2 x i32> [[TMP2]], 1
; GVN-NEXT:    [[I3:%.*]] = insertvalue <{ <4 x i32>, <2 x i32>, i32, <2 x i32> }> [[I2]], i32 [[TMP3]], 2
; GVN-NEXT:    [[I4:%.*]] = insertvalue <{ <4 x i32>, <2 x i32>, i32, <2 x i32> }> [[I3]], <2 x i32> [[TMP2]], 3
; GVN-NEXT:    ret <{ <4 x i32>, <2 x i32>, i32, <2 x i32> }> [[I4]]
;
Entry:
  %V1 = load <4 x i32>, ptr %P, align 1
  %V2 = load <2 x i32>, ptr %P, align 1
  %V3 = load i32, ptr %P, align 1
  %V4 = load <2 x i32>, ptr %P, align 1
  %I1 = insertvalue <{<4 x i32>, <2 x i32>, i32, <2 x i32>}> poison, <4 x i32> %V1, 0
  %I2 = insertvalue <{<4 x i32>,<2 x i32>, i32, <2 x i32>}> %I1, <2 x i32> %V2, 1
  %I3 = insertvalue <{<4 x i32>, <2 x i32>, i32, <2 x i32>}> %I2, i32 %V3, 2
  %I4 = insertvalue <{<4 x i32>, <2 x i32>, i32, <2 x i32>}> %I3, <2 x i32> %V4, 3
  ret <{<4 x i32>, <2 x i32>, i32, <2 x i32>}> %I4
}

define <{<4 x i32>, <2 x i32>, i32}> @test10(ptr %P, i1 %cond) {
;   Entry
;    /  \
;   T    F
;
; OLDGVN-LABEL: @test10(
; OLDGVN-NEXT:  Entry:
; OLDGVN-NEXT:    [[V1:%.*]] = load <4 x i32>, ptr [[P:%.*]], align 1
; OLDGVN-NEXT:    [[I1:%.*]] = insertvalue <{ <4 x i32>, <2 x i32>, i32 }> poison, <4 x i32> [[V1]], 0
; OLDGVN-NEXT:    [[TMP0:%.*]] = bitcast <4 x i32> [[V1]] to i128
; OLDGVN-NEXT:    [[TMP1:%.*]] = trunc i128 [[TMP0]] to i32
; OLDGVN-NEXT:    [[TMP2:%.*]] = trunc i128 [[TMP0]] to i64
; OLDGVN-NEXT:    [[TMP3:%.*]] = bitcast i64 [[TMP2]] to <2 x i32>
; OLDGVN-NEXT:    br i1 [[COND:%.*]], label [[T:%.*]], label [[F:%.*]]
; OLDGVN:       T:
; OLDGVN-NEXT:    [[I2:%.*]] = insertvalue <{ <4 x i32>, <2 x i32>, i32 }> [[I1]], <2 x i32> [[TMP3]], 1
; OLDGVN-NEXT:    ret <{ <4 x i32>, <2 x i32>, i32 }> [[I2]]
; OLDGVN:       F:
; OLDGVN-NEXT:    [[I3:%.*]] = insertvalue <{ <4 x i32>, <2 x i32>, i32 }> [[I1]], i32 [[TMP1]], 2
; OLDGVN-NEXT:    ret <{ <4 x i32>, <2 x i32>, i32 }> [[I3]]
;
; NEWGVN-LABEL: @test10(
; NEWGVN-NEXT:  Entry:
; NEWGVN-NEXT:    [[V1:%.*]] = load <4 x i32>, ptr [[P:%.*]], align 1
; NEWGVN-NEXT:    [[TMP0:%.*]] = bitcast <4 x i32> [[V1]] to i128
; NEWGVN-NEXT:    [[TMP1:%.*]] = trunc i128 [[TMP0]] to i32
; NEWGVN-NEXT:    [[TMP2:%.*]] = trunc i128 [[TMP0]] to i64
; NEWGVN-NEXT:    [[TMP3:%.*]] = bitcast i64 [[TMP2]] to <2 x i32>
; NEWGVN-NEXT:    [[I1:%.*]] = insertvalue <{ <4 x i32>, <2 x i32>, i32 }> poison, <4 x i32> [[V1]], 0
; NEWGVN-NEXT:    br i1 [[COND:%.*]], label [[T:%.*]], label [[F:%.*]]
; NEWGVN:       T:
; NEWGVN-NEXT:    [[I2:%.*]] = insertvalue <{ <4 x i32>, <2 x i32>, i32 }> [[I1]], <2 x i32> [[TMP3]], 1
; NEWGVN-NEXT:    ret <{ <4 x i32>, <2 x i32>, i32 }> [[I2]]
; NEWGVN:       F:
; NEWGVN-NEXT:    [[I3:%.*]] = insertvalue <{ <4 x i32>, <2 x i32>, i32 }> [[I1]], i32 [[TMP1]], 2
; NEWGVN-NEXT:    ret <{ <4 x i32>, <2 x i32>, i32 }> [[I3]]
;
Entry:
  %V1 = load <4 x i32>, ptr %P, align 1
  %I1 = insertvalue <{<4 x i32>, <2 x i32>, i32}> poison, <4 x i32> %V1, 0
  br i1 %cond, label %T, label %F
T:
  %V2 = load <2 x i32>, ptr %P, align 1
  %I2 = insertvalue <{<4 x i32>,<2 x i32>, i32}> %I1, <2 x i32> %V2, 1
  ret <{<4 x i32>, <2 x i32>, i32}> %I2

F:
  %V3 = load i32, ptr %P, align 1
  %I3 = insertvalue <{<4 x i32>, <2 x i32>, i32}> %I1, i32 %V3, 2
  ret <{<4 x i32>, <2 x i32>, i32}> %I3
}

define <{<2 x i32>, i32, float}> @test11(ptr %P) {
; GVN-LABEL: @test11(
; GVN-NEXT:  Entry:
; GVN-NEXT:    [[V1:%.*]] = load <2 x i32>, ptr [[P:%.*]], align 1
; GVN-NEXT:    [[TMP0:%.*]] = bitcast <2 x i32> [[V1]] to i64
; GVN-NEXT:    [[TMP1:%.*]] = trunc i64 [[TMP0]] to i32
; GVN-NEXT:    [[TMP2:%.*]] = bitcast i32 [[TMP1]] to float
; GVN-NEXT:    [[I1:%.*]] = insertvalue <{ <2 x i32>, i32, float }> poison, <2 x i32> [[V1]], 0
; GVN-NEXT:    [[I2:%.*]] = insertvalue <{ <2 x i32>, i32, float }> [[I1]], i32 [[TMP1]], 1
; GVN-NEXT:    [[I3:%.*]] = insertvalue <{ <2 x i32>, i32, float }> [[I2]], float [[TMP2]], 2
; GVN-NEXT:    ret <{ <2 x i32>, i32, float }> [[I3]]
;
Entry:
  %V1 = load <2 x i32>, ptr %P, align 1
  %V2 = load i32, ptr %P, align 1
  %V3 = load float, ptr %P, align 1
  %I1 = insertvalue <{<2 x i32>, i32, float}> poison, <2 x i32> %V1, 0
  %I2 = insertvalue <{<2 x i32>, i32, float}> %I1, i32 %V2, 1
  %I3 = insertvalue <{<2 x i32>, i32, float}> %I2, float %V3, 2
  ret <{<2 x i32>, i32, float}> %I3
}

define i8 @test12(ptr %P, i32 %V) {
; GVN-LABEL: @test12(
; GVN-NEXT:    [[V1:%.*]] = load i32, ptr [[P:%.*]], align 1
; GVN-NEXT:    [[TMP1:%.*]] = trunc i32 [[V1]] to i8
; GVN-NEXT:    store i32 [[V:%.*]], ptr [[P]], align 1
; GVN-NEXT:    [[TMP2:%.*]] = trunc i32 [[V]] to i8
; GVN-NEXT:    [[V5:%.*]] = add i8 [[TMP1]], [[TMP1]]
; GVN-NEXT:    [[V6:%.*]] = add i8 [[TMP2]], [[V5]]
; GVN-NEXT:    ret i8 [[V6]]
;
  %V1 = load i32, ptr %P, align 1
  %V2 = load i8, ptr %P, align 1
  %V3 = trunc i32 %V1 to i8
  store i32 %V, ptr %P, align 1
  %V4 = load i8, ptr %P, align 1
  %V5 = add i8 %V2, %V3
  %V6 = add i8 %V4, %V5
  ret i8 %V6
}

define float @test13(ptr %P, i1 %cond) {
;   Entry
;    /  \
;   T    F
;
; GVN-LABEL: @test13(
; GVN-NEXT:  Entry:
; GVN-NEXT:    br i1 [[COND:%.*]], label [[T:%.*]], label [[F:%.*]]
; GVN:       T:
; GVN-NEXT:    [[V2:%.*]] = load float, ptr [[P:%.*]], align 1
; GVN-NEXT:    ret float [[V2]]
; GVN:       F:
; GVN-NEXT:    [[V3:%.*]] = load float, ptr [[P]], align 1
; GVN-NEXT:    ret float [[V3]]
;
Entry:
  %V1 = load i32, ptr %P, align 1
  br i1 %cond, label %T, label %F
T:
  %V2 = load float, ptr %P, align 1
  ret float %V2

F:
  %V3 = load float, ptr %P, align 1
  ret float %V3
}

define i32 @test14(ptr %P, i1 %Cond) {
;   Entry
;    /  \
;   T    F
;    \  /
;     vv
;    Exit
;
; GVN-LABEL: @test14(
; GVN-NEXT:  Entry:
; GVN-NEXT:    [[V1:%.*]] = load <2 x i32>, ptr [[P:%.*]], align 1
; GVN-NEXT:    [[TMP0:%.*]] = bitcast <2 x i32> [[V1]] to i64
; GVN-NEXT:    [[TMP1:%.*]] = trunc i64 [[TMP0]] to i32
; GVN-NEXT:    br i1 [[COND:%.*]], label [[T:%.*]], label [[F:%.*]]
; GVN:       T:
; GVN-NEXT:    br label [[EXIT:%.*]]
; GVN:       F:
; GVN-NEXT:    br label [[EXIT]]
; GVN:       Exit:
; GVN-NEXT:    [[PHI:%.*]] = phi i32 [ 100, [[T]] ], [ 200, [[F]] ]
; GVN-NEXT:    [[V2:%.*]] = extractelement <2 x i32> [[V1]], i64 1
; GVN-NEXT:    [[V4:%.*]] = add i32 [[TMP1]], [[V2]]
; GVN-NEXT:    [[V5:%.*]] = add i32 [[V4]], [[PHI]]
; GVN-NEXT:    ret i32 [[V5]]
;
Entry:
  %V1 = load <2 x i32>, ptr %P, align 1
  br i1 %Cond, label %T, label %F

T:
  br label %Exit

F:
  br label %Exit

Exit:
  %Phi = phi i32 [100, %T], [200, %F]
  %V2 = extractelement <2 x i32> %V1, i64 1
  %V3 = load i32, ptr %P, align 1
  %V4 = add i32 %V3, %V2
  %V5 = add i32 %V4, %Phi
  ret i32 %V5
}

define void @test15(i1 %Cond) {
; OLDGVN-LABEL: @test15(
; OLDGVN-NEXT:  Entry:
; OLDGVN-NEXT:    br label [[LOOP_HEADER:%.*]]
; OLDGVN:       Loop.Header:
; OLDGVN-NEXT:    store i64 0, ptr null, align 8
; OLDGVN-NEXT:    br i1 [[COND:%.*]], label [[LOOP_HEADER]], label [[EXIT:%.*]]
; OLDGVN:       Exit:
; OLDGVN-NEXT:    ret void
;
; NEWGVN-LABEL: @test15(
; NEWGVN-NEXT:  Entry:
; NEWGVN-NEXT:    br label [[LOOP_HEADER:%.*]]
; NEWGVN:       Loop.Header:
; NEWGVN-NEXT:    br label [[LOOP_LATCH:%.*]]
; NEWGVN:       Loop.Latch:
; NEWGVN-NEXT:    store i64 0, ptr null, align 8
; NEWGVN-NEXT:    br i1 [[COND:%.*]], label [[LOOP_HEADER]], label [[EXIT:%.*]]
; NEWGVN:       Exit:
; NEWGVN-NEXT:    ret void
;
Entry:
  br label %Loop.Header

Loop.Header:                                       ; preds = %Loop.Latch, %entry
  %V1 = load ptr, ptr inttoptr (i64 16 to ptr), align 8
  %V2 = load i64, ptr %V1, align 8
  br label %Loop.Latch

Loop.Latch:                                       ; preds = %Loop.Header
  %V3 = load ptr, ptr inttoptr (i64 16 to ptr), align 8
  %V4 = load i64, ptr %V3, align 8
  store i64 0, ptr null, align 8
  br i1 %Cond, label %Loop.Header, label %Exit

Exit:
  ret void
}

declare void @foo(ptr, i32) #0

define i32 @test16(ptr %P) {
; GVN-LABEL: @test16(
; GVN-NEXT:    [[V1:%.*]] = load <2 x i32>, ptr [[P:%.*]], align 1
; GVN-NEXT:    [[V2:%.*]] = extractelement <2 x i32> [[V1]], i64 1
; GVN-NEXT:    [[V3:%.*]] = call i32 @foo(ptr [[P]], i32 [[V2]]) #[[ATTR0:[0-9]+]]
; GVN-NEXT:    [[V4:%.*]] = load i32, ptr [[P]], align 1
; GVN-NEXT:    [[V5:%.*]] = add i32 [[V3]], [[V4]]
; GVN-NEXT:    ret i32 [[V5]]
;
  %V1 = load <2 x i32>, ptr %P, align 1
  %V2 = extractelement <2 x i32> %V1, i64 1
  %V3 = call i32 @foo(ptr %P, i32 %V2) #0
  %V4 = load i32, ptr %P, align 1
  %V5 = add i32 %V3, %V4
  ret i32 %V5
}

attributes #0 = { willreturn }
