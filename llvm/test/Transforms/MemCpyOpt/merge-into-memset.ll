; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=memcpyopt -S -verify-memoryssa | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"

; Don't delete the memcpy in %if.then, even though it depends on an instruction
; which will be deleted.

define void @foo(i1 %c, ptr %d, ptr %e, ptr %f) {
; CHECK-LABEL: @foo(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP:%.*]] = alloca [50 x i8], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds i8, ptr [[TMP]], i64 1
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr nonnull [[D:%.*]], i8 0, i64 10, i1 false)
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr align 8 [[TMP]], i8 0, i64 11, i1 false)
; CHECK-NEXT:    br i1 [[C:%.*]], label [[IF_THEN:%.*]], label [[EXIT:%.*]]
; CHECK:       if.then:
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr align 8 [[F:%.*]], i8 0, i64 11, i1 false)
; CHECK-NEXT:    br label [[EXIT]]
; CHECK:       exit:
; CHECK-NEXT:    ret void
;
entry:
  %tmp = alloca [50 x i8], align 8
  %tmp1 = getelementptr inbounds i8, ptr %tmp, i64 1
  call void @llvm.memset.p0.i64(ptr nonnull %d, i8 0, i64 10, i1 false)
  store i8 0, ptr %tmp, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull %tmp1, ptr nonnull %d, i64 10, i1 false)
  br i1 %c, label %if.then, label %exit

if.then:
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %f, ptr nonnull align 8 %tmp, i64 30, i1 false)
  br label %exit

exit:
  ret void
}

define void @memset_clobber_no_alias(ptr %p) {
; CHECK-LABEL: @memset_clobber_no_alias(
; CHECK-NEXT:    [[STACK:%.*]] = alloca <256 x i8>, align 8
; CHECK-NEXT:    [[STACK1:%.*]] = getelementptr inbounds i8, ptr [[STACK]], i64 8
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[P:%.*]], i8 0, i64 16, i1 false)
; CHECK-NEXT:    [[STACK2:%.*]] = getelementptr inbounds i8, ptr [[STACK]], i64 24
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[STACK1]], i8 0, i64 136, i1 false)
; CHECK-NEXT:    ret void
;
  %stack = alloca <256 x i8>, align 8
  %stack1 = getelementptr inbounds i8, ptr %stack, i64 8
  call void @llvm.memset.p0.i64(ptr %stack1, i8 0, i64 136, i1 false)
  call void @llvm.memset.p0.i64(ptr %p, i8 0, i64 16, i1 false)
  %stack2 = getelementptr inbounds i8, ptr %stack, i64 24
  call void @llvm.memset.p0.i64(ptr %stack2, i8 0, i64 24, i1 false)
  ret void
}

define void @store_clobber_no_alias1(i64 %a, ptr %p) {
; CHECK-LABEL: @store_clobber_no_alias1(
; CHECK-NEXT:    [[STACK:%.*]] = alloca <256 x i8>, align 8
; CHECK-NEXT:    [[STACK1:%.*]] = getelementptr inbounds i8, ptr [[STACK]], i64 8
; CHECK-NEXT:    store i64 [[A:%.*]], ptr [[P:%.*]], align 8
; CHECK-NEXT:    [[STACK2:%.*]] = getelementptr inbounds i8, ptr [[STACK]], i64 24
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[STACK1]], i8 0, i64 136, i1 false)
; CHECK-NEXT:    ret void
;
  %stack = alloca <256 x i8>, align 8
  %stack1 = getelementptr inbounds i8, ptr %stack, i64 8
  call void @llvm.memset.p0.i64(ptr %stack1, i8 0, i64 136, i1 false)
  store i64 %a, ptr %p, align 8
  %stack2 = getelementptr inbounds i8, ptr %stack, i64 24
  call void @llvm.memset.p0.i64(ptr %stack2, i8 0, i64 24, i1 false)
  ret void
}

define void @store_clobber_no_alias2(i64 %a, ptr %p) {
; CHECK-LABEL: @store_clobber_no_alias2(
; CHECK-NEXT:    [[STACK:%.*]] = alloca <256 x i8>, align 8
; CHECK-NEXT:    [[STACK1:%.*]] = getelementptr inbounds i8, ptr [[STACK]], i64 8
; CHECK-NEXT:    store i64 [[A:%.*]], ptr [[P:%.*]], align 8
; CHECK-NEXT:    [[STACK2:%.*]] = getelementptr inbounds i8, ptr [[STACK]], i64 24
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[STACK1]], i8 0, i64 136, i1 false)
; CHECK-NEXT:    ret void
;
  %stack = alloca <256 x i8>, align 8
  %stack1 = getelementptr inbounds i8, ptr %stack, i64 8
  call void @llvm.memset.p0.i64(ptr %stack1, i8 0, i64 136, i1 false)
  store i64 %a, ptr %p, align 8
  %stack2 = getelementptr inbounds i8, ptr %stack, i64 24
  call void @llvm.memset.p0.i64(ptr %stack2, i8 0, i64 24, i1 false)
  ret void
}

define void @store_clobber_no_alias_precise_fail(i64 %a) {
; CHECK-LABEL: @store_clobber_no_alias_precise_fail(
; CHECK-NEXT:    [[STACK:%.*]] = alloca <256 x i8>, align 8
; CHECK-NEXT:    [[STACK1:%.*]] = getelementptr inbounds i8, ptr [[STACK]], i64 8
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[STACK1]], i8 0, i64 136, i1 false)
; CHECK-NEXT:    store i64 [[A:%.*]], ptr [[STACK]], align 8
; CHECK-NEXT:    [[STACK2:%.*]] = getelementptr inbounds i8, ptr [[STACK]], i64 24
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[STACK2]], i8 0, i64 24, i1 false)
; CHECK-NEXT:    ret void
;
  %stack = alloca <256 x i8>, align 8
  %stack1 = getelementptr inbounds i8, ptr %stack, i64 8
  call void @llvm.memset.p0.i64(ptr %stack1, i8 0, i64 136, i1 false)
  store i64 %a, ptr %stack, align 8
  %stack2 = getelementptr inbounds i8, ptr %stack, i64 24
  call void @llvm.memset.p0.i64(ptr %stack2, i8 0, i64 24, i1 false)
  ret void
}

define void @store_clobber_may_alias_fail(ptr %p, ptr %p1) {
; CHECK-LABEL: @store_clobber_may_alias_fail(
; CHECK-NEXT:    [[STACK1:%.*]] = getelementptr inbounds i8, ptr [[P:%.*]], i64 8
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[STACK1]], i8 0, i64 136, i1 false)
; CHECK-NEXT:    store i64 0, ptr [[P1:%.*]], align 8
; CHECK-NEXT:    [[STACK2:%.*]] = getelementptr inbounds i8, ptr [[P]], i64 24
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[STACK2]], i8 0, i64 24, i1 false)
; CHECK-NEXT:    ret void
;
  %stack1 = getelementptr inbounds i8, ptr %p, i64 8
  call void @llvm.memset.p0.i64(ptr %stack1, i8 0, i64 136, i1 false)
  store i64 0, ptr %p1, align 8
  %stack2 = getelementptr inbounds i8, ptr %p, i64 24
  call void @llvm.memset.p0.i64(ptr %stack2, i8 0, i64 24, i1 false)
  ret void
}

define void @load_clobber_no_alias(ptr %p, ptr %p1) {
; CHECK-LABEL: @load_clobber_no_alias(
; CHECK-NEXT:    [[STACK:%.*]] = alloca <256 x i8>, align 8
; CHECK-NEXT:    [[STACK1:%.*]] = getelementptr inbounds i8, ptr [[STACK]], i64 8
; CHECK-NEXT:    [[A:%.*]] = load i64, ptr [[P:%.*]], align 8
; CHECK-NEXT:    store i64 [[A]], ptr [[P1:%.*]], align 8
; CHECK-NEXT:    [[STACK2:%.*]] = getelementptr inbounds i8, ptr [[STACK]], i64 24
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[STACK1]], i8 0, i64 136, i1 false)
; CHECK-NEXT:    ret void
;
  %stack = alloca <256 x i8>, align 8
  %stack1 = getelementptr inbounds i8, ptr %stack, i64 8
  call void @llvm.memset.p0.i64(ptr %stack1, i8 0, i64 136, i1 false)
  %a = load i64, ptr %p, align 8
  store i64 %a, ptr %p1, align 8
  %stack2 = getelementptr inbounds i8, ptr %stack, i64 24
  call void @llvm.memset.p0.i64(ptr %stack2, i8 0, i64 24, i1 false)
  ret void
}

define void @load_clobber_alias_fail(ptr %p, ptr %p1) {
; CHECK-LABEL: @load_clobber_alias_fail(
; CHECK-NEXT:    [[STACK:%.*]] = alloca <256 x i8>, align 8
; CHECK-NEXT:    [[STACK1:%.*]] = getelementptr inbounds i8, ptr [[STACK]], i64 8
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[STACK1]], i8 0, i64 136, i1 false)
; CHECK-NEXT:    [[A:%.*]] = load i64, ptr [[STACK]], align 8
; CHECK-NEXT:    store i64 [[A]], ptr [[P1:%.*]], align 8
; CHECK-NEXT:    [[STACK2:%.*]] = getelementptr inbounds i8, ptr [[STACK]], i64 24
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[STACK2]], i8 0, i64 24, i1 false)
; CHECK-NEXT:    ret void
;
  %stack = alloca <256 x i8>, align 8
  %stack1 = getelementptr inbounds i8, ptr %stack, i64 8
  call void @llvm.memset.p0.i64(ptr %stack1, i8 0, i64 136, i1 false)
  %a = load i64, ptr %stack, align 8
  store i64 %a, ptr %p1, align 8
  %stack2 = getelementptr inbounds i8, ptr %stack, i64 24
  call void @llvm.memset.p0.i64(ptr %stack2, i8 0, i64 24, i1 false)
  ret void
}

define void @memset_volatile_fail(ptr %p) {
; CHECK-LABEL: @memset_volatile_fail(
; CHECK-NEXT:    [[STACK:%.*]] = alloca <256 x i8>, align 8
; CHECK-NEXT:    [[STACK1:%.*]] = getelementptr inbounds i8, ptr [[STACK]], i64 8
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[STACK1]], i8 0, i64 136, i1 false)
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[P:%.*]], i8 0, i64 16, i1 true)
; CHECK-NEXT:    [[STACK2:%.*]] = getelementptr inbounds i8, ptr [[STACK]], i64 24
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[STACK2]], i8 0, i64 24, i1 false)
; CHECK-NEXT:    ret void
;
  %stack = alloca <256 x i8>, align 8
  %stack1 = getelementptr inbounds i8, ptr %stack, i64 8
  call void @llvm.memset.p0.i64(ptr %stack1, i8 0, i64 136, i1 false)
  call void @llvm.memset.p0.i64(ptr %p, i8 0, i64 16, i1 true)
  %stack2 = getelementptr inbounds i8, ptr %stack, i64 24
  call void @llvm.memset.p0.i64(ptr %stack2, i8 0, i64 24, i1 false)
  ret void
}

define void @store_volatile_fail(i64 %a, ptr %p) {
; CHECK-LABEL: @store_volatile_fail(
; CHECK-NEXT:    [[STACK:%.*]] = alloca <256 x i8>, align 8
; CHECK-NEXT:    [[STACK1:%.*]] = getelementptr inbounds i8, ptr [[STACK]], i64 8
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[STACK1]], i8 0, i64 136, i1 false)
; CHECK-NEXT:    store volatile i64 [[A:%.*]], ptr [[P:%.*]], align 8
; CHECK-NEXT:    [[STACK2:%.*]] = getelementptr inbounds i8, ptr [[STACK]], i64 24
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[STACK2]], i8 0, i64 24, i1 false)
; CHECK-NEXT:    ret void
;
  %stack = alloca <256 x i8>, align 8
  %stack1 = getelementptr inbounds i8, ptr %stack, i64 8
  call void @llvm.memset.p0.i64(ptr %stack1, i8 0, i64 136, i1 false)
  store volatile i64 %a, ptr %p
  %stack2 = getelementptr inbounds i8, ptr %stack, i64 24
  call void @llvm.memset.p0.i64(ptr %stack2, i8 0, i64 24, i1 false)
  ret void
}

define void @notoverwrite_clobber_no_alias(ptr %p) {
; CHECK-LABEL: @notoverwrite_clobber_no_alias(
; CHECK-NEXT:    [[STACK:%.*]] = alloca <56 x i8>, align 8
; CHECK-NEXT:    [[STACK1:%.*]] = getelementptr inbounds i8, ptr [[STACK]], i64 8
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[P:%.*]], i8 0, i64 16, i1 false)
; CHECK-NEXT:    [[STACK2:%.*]] = getelementptr inbounds i8, ptr [[STACK]], i64 32
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[STACK1]], i8 0, i64 48, i1 false)
; CHECK-NEXT:    ret void
;
  %stack = alloca <56 x i8>, align 8
  %stack1 = getelementptr inbounds i8, ptr %stack, i64 8
  call void @llvm.memset.p0.i64(ptr %stack1, i8 0, i64 24, i1 false)
  call void @llvm.memset.p0.i64(ptr %p, i8 0, i64 16, i1 false)
  %stack2 = getelementptr inbounds i8, ptr %stack, i64 32
  call void @llvm.memset.p0.i64(ptr %stack2, i8 0, i64 24, i1 false)
  ret void
}

define void @notoverwrite_clobber_different_byteval_fail(ptr %p) {
; CHECK-LABEL: @notoverwrite_clobber_different_byteval_fail(
; CHECK-NEXT:    [[STACK:%.*]] = alloca <56 x i8>, align 8
; CHECK-NEXT:    [[STACK1:%.*]] = getelementptr inbounds i8, ptr [[STACK]], i64 8
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[STACK1]], i8 0, i64 24, i1 false)
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[P:%.*]], i8 0, i64 16, i1 false)
; CHECK-NEXT:    [[STACK2:%.*]] = getelementptr inbounds i8, ptr [[STACK]], i64 32
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[STACK2]], i8 1, i64 24, i1 false)
; CHECK-NEXT:    ret void
;
  %stack = alloca <56 x i8>, align 8
  %stack1 = getelementptr inbounds i8, ptr %stack, i64 8
  call void @llvm.memset.p0.i64(ptr %stack1, i8 0, i64 24, i1 false)
  call void @llvm.memset.p0.i64(ptr %p, i8 0, i64 16, i1 false)
  %stack2 = getelementptr inbounds i8, ptr %stack, i64 32
  call void @llvm.memset.p0.i64(ptr %stack2, i8 1, i64 24, i1 false)
  ret void
}

define void @overlap_clobber_no_alias(ptr %p) {
; CHECK-LABEL: @overlap_clobber_no_alias(
; CHECK-NEXT:    [[STACK:%.*]] = alloca <56 x i8>, align 8
; CHECK-NEXT:    [[STACK1:%.*]] = getelementptr inbounds i8, ptr [[STACK]], i64 8
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[P:%.*]], i8 0, i64 16, i1 false)
; CHECK-NEXT:    [[STACK2:%.*]] = getelementptr inbounds i8, ptr [[STACK]], i64 16
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[STACK1]], i8 0, i64 32, i1 false)
; CHECK-NEXT:    ret void
;
  %stack = alloca <56 x i8>, align 8
  %stack1 = getelementptr inbounds i8, ptr %stack, i64 8
  call void @llvm.memset.p0.i64(ptr %stack1, i8 0, i64 24, i1 false)
  call void @llvm.memset.p0.i64(ptr %p, i8 0, i64 16, i1 false)
  %stack2 = getelementptr inbounds i8, ptr %stack, i64 16
  call void @llvm.memset.p0.i64(ptr %stack2, i8 0, i64 24, i1 false)
  ret void
}

define void @overlap_clobber_different_byteval_fail(ptr %p) {
; CHECK-LABEL: @overlap_clobber_different_byteval_fail(
; CHECK-NEXT:    [[STACK:%.*]] = alloca <56 x i8>, align 8
; CHECK-NEXT:    [[STACK1:%.*]] = getelementptr inbounds i8, ptr [[STACK]], i64 8
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[STACK1]], i8 0, i64 24, i1 false)
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[P:%.*]], i8 0, i64 16, i1 false)
; CHECK-NEXT:    [[STACK2:%.*]] = getelementptr inbounds i8, ptr [[STACK]], i64 16
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr [[STACK2]], i8 1, i64 24, i1 false)
; CHECK-NEXT:    ret void
;
  %stack = alloca <56 x i8>, align 8
  %stack1 = getelementptr inbounds i8, ptr %stack, i64 8
  call void @llvm.memset.p0.i64(ptr %stack1, i8 0, i64 24, i1 false)
  call void @llvm.memset.p0.i64(ptr %p, i8 0, i64 16, i1 false)
  %stack2 = getelementptr inbounds i8, ptr %stack, i64 16
  call void @llvm.memset.p0.i64(ptr %stack2, i8 1, i64 24, i1 false)
  ret void
}
