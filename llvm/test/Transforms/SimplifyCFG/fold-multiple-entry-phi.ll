; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -S -passes=simplifycfg -simplifycfg-require-and-preserve-domtree=1< %s | FileCheck %s

define i32 @three_entry_test(i32 %x, i32 %y, i1 %cond){
; CHECK-LABEL: define i32 @three_entry_test(
; CHECK-SAME: i32 [[X:%.*]], i32 [[Y:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[SUB:%.*]] = add i32 [[X]], -1
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[X]], [[Y]]
; CHECK-NEXT:    [[ADD:%.*]] = add i32 [[X]], 1
; CHECK-NEXT:    [[SPEC_SELECT:%.*]] = select i1 [[CMP]], i32 [[SUB]], i32 [[ADD]]
; CHECK-NEXT:    [[RET_0:%.*]] = select i1 [[COND]], i32 0, i32 [[SPEC_SELECT]]
; CHECK-NEXT:    ret i32 [[RET_0]]
;
entry:
  br i1 %cond, label %if.then, label %then

if.then:
  br label %end

then:
  %sub = add i32 %x, -1
  %cmp = icmp sgt i32 %x, %y
  br i1 %cmp, label %end, label %b

b:
  %add = add i32 %x, 1
  br label %end

end:
  %ret.0 = phi i32 [ 0, %if.then ], [ %sub, %then ], [ %add, %b ]
  ret i32 %ret.0
}

define i32 @three_entry_test_diamond(i32 %x, i32 %y, i1 %cond){
; CHECK-LABEL: define i32 @three_entry_test_diamond(
; CHECK-SAME: i32 [[X:%.*]], i32 [[Y:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[X]], [[Y]]
; CHECK-NEXT:    [[SUB:%.*]] = add i32 [[X]], -1
; CHECK-NEXT:    [[ADD:%.*]] = add i32 [[X]], 1
; CHECK-NEXT:    [[TMP0:%.*]] = select i1 [[CMP]], i32 [[SUB]], i32 [[ADD]]
; CHECK-NEXT:    [[RET_0:%.*]] = select i1 [[COND]], i32 0, i32 [[TMP0]]
; CHECK-NEXT:    ret i32 [[RET_0]]
;
entry:
  br i1 %cond, label %if.then, label %then

if.then:
  br label %end

then:
  %cmp = icmp sgt i32 %x, %y
  br i1 %cmp, label %b1, label %b2

b1:
  %sub = add i32 %x, -1
  br label %end

b2:
  %add = add i32 %x, 1
  br label %end

end:
  %ret.0 = phi i32 [ 0, %if.then ], [ %sub, %b1 ], [ %add, %b2 ]
  ret i32 %ret.0
}



define i32 @four_entry_test(i32 %x, i32 %y, i1 %cond, i1 %cond1){
; CHECK-LABEL: define i32 @four_entry_test(
; CHECK-SAME: i32 [[X:%.*]], i32 [[Y:%.*]], i1 [[COND:%.*]], i1 [[COND1:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br i1 [[COND]], label [[IF_THEN:%.*]], label [[THEN1:%.*]]
; CHECK:       if.then:
; CHECK-NEXT:    [[SPEC_SELECT:%.*]] = select i1 [[COND1]], i32 1, i32 0
; CHECK-NEXT:    br label [[END:%.*]]
; CHECK:       then1:
; CHECK-NEXT:    [[SUB:%.*]] = add i32 [[X]], -1
; CHECK-NEXT:    [[CMP1:%.*]] = icmp sgt i32 [[X]], [[Y]]
; CHECK-NEXT:    [[ADD:%.*]] = add i32 [[X]], 1
; CHECK-NEXT:    [[SPEC_SELECT1:%.*]] = select i1 [[CMP1]], i32 [[SUB]], i32 [[ADD]]
; CHECK-NEXT:    br label [[END]]
; CHECK:       end:
; CHECK-NEXT:    [[RET_0:%.*]] = phi i32 [ [[SPEC_SELECT]], [[IF_THEN]] ], [ [[SPEC_SELECT1]], [[THEN1]] ]
; CHECK-NEXT:    ret i32 [[RET_0]]
;
entry:
  br i1 %cond, label %if.then, label %then1

if.then:
  br i1 %cond1, label %then, label %end

then:
  br label %end

then1:
  %sub = add i32 %x, -1
  %cmp1 = icmp sgt i32 %x, %y
  br i1 %cmp1, label %end, label %b

b:
  %add = add i32 %x, 1
  br label %end

end:
  %ret.0 = phi i32 [ 0, %if.then ], [1, %then], [ %sub, %then1 ], [ %add, %b ]
  ret i32 %ret.0
}

declare i32 @dummy()

define i32 @three_entry_test_multiple_dests_fail(i32 %x, i32 %y, i1 %cond, i1 %cond1){
; CHECK-LABEL: define i32 @three_entry_test_multiple_dests_fail(
; CHECK-SAME: i32 [[X:%.*]], i32 [[Y:%.*]], i1 [[COND:%.*]], i1 [[COND1:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br i1 [[COND]], label [[COMMON_RET:%.*]], label [[THEN:%.*]]
; CHECK:       then:
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[X]], [[Y]]
; CHECK-NEXT:    br i1 [[CMP]], label [[B1:%.*]], label [[B2:%.*]]
; CHECK:       b1:
; CHECK-NEXT:    [[SUB:%.*]] = add i32 [[X]], -1
; CHECK-NEXT:    br label [[COMMON_RET]]
; CHECK:       b2:
; CHECK-NEXT:    [[ADD:%.*]] = add i32 [[X]], 1
; CHECK-NEXT:    br i1 [[COND1]], label [[END:%.*]], label [[COMMON_RET]]
; CHECK:       common.ret:
; CHECK-NEXT:    [[COMMON_RET_OP:%.*]] = phi i32 [ [[CALL:%.*]], [[END]] ], [ [[SUB]], [[B1]] ], [ [[ADD]], [[B2]] ], [ 0, [[ENTRY:%.*]] ]
; CHECK-NEXT:    ret i32 [[COMMON_RET_OP]]
; CHECK:       end:
; CHECK-NEXT:    [[CALL]] = call i32 @dummy()
; CHECK-NEXT:    br label [[COMMON_RET]]
;
entry:
  br i1 %cond, label %if.then, label %then

if.then:
  br label %end1

then:
  %cmp = icmp sgt i32 %x, %y
  br i1 %cmp, label %b1, label %b2

b1:
  %sub = add i32 %x, -1
  br label %end1

b2:
  %add = add i32 %x, 1
  br i1 %cond1, label %end, label %end1

end:
  %call = call i32 @dummy()
  ret i32 %call

end1:
  %ret.0 = phi i32 [ 0, %if.then ], [ %sub, %b1 ], [%add, %b2]
  ret i32 %ret.0
}

declare i32 @dummy1()
define i32 @three_entry_test_different_dest(i32 %x, i32 %y, i1 %cond, i1 %cond1){
; CHECK-LABEL: define i32 @three_entry_test_different_dest(
; CHECK-SAME: i32 [[X:%.*]], i32 [[Y:%.*]], i1 [[COND:%.*]], i1 [[COND1:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br i1 [[COND]], label [[END1:%.*]], label [[THEN:%.*]]
; CHECK:       then:
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[X]], [[Y]]
; CHECK-NEXT:    br i1 [[CMP]], label [[B1:%.*]], label [[B2:%.*]]
; CHECK:       b1:
; CHECK-NEXT:    [[SUB:%.*]] = add i32 [[X]], -1
; CHECK-NEXT:    br label [[END1]]
; CHECK:       b2:
; CHECK-NEXT:    [[ADD:%.*]] = add i32 [[X]], 1
; CHECK-NEXT:    [[CALL:%.*]] = call i32 @dummy()
; CHECK-NEXT:    br label [[COMMON_RET:%.*]]
; CHECK:       common.ret:
; CHECK-NEXT:    [[COMMON_RET_OP:%.*]] = phi i32 [ [[CALL]], [[B2]] ], [ [[RET_0:%.*]], [[END1]] ]
; CHECK-NEXT:    ret i32 [[COMMON_RET_OP]]
; CHECK:       end1:
; CHECK-NEXT:    [[RET_0]] = phi i32 [ [[SUB]], [[B1]] ], [ 0, [[ENTRY:%.*]] ]
; CHECK-NEXT:    [[CALL1:%.*]] = call i32 @dummy1()
; CHECK-NEXT:    br label [[COMMON_RET]]
;
entry:
  br i1 %cond, label %if.then, label %then

if.then:
  br label %end1

then:
  %cmp = icmp sgt i32 %x, %y
  br i1 %cmp, label %b1, label %b2

b1:
  %sub = add i32 %x, -1
  br label %end1

b2:
  %add = add i32 %x, 1
  br label %end

end:
  %call = call i32 @dummy()
  ret i32 %call

end1:
  %ret.0 = phi i32 [ 0, %if.then ], [ %sub, %b1 ]
  %call1 = call i32 @dummy1()
  ret i32 %ret.0
}
