; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt < %s -passes=simplifycfg -simplifycfg-require-and-preserve-domtree=1 -S | FileCheck %s

; A pre-existing foldable pattern should remain intact
define void @const_valued_cond_br(ptr %P) {
; CHECK-LABEL: define void @const_valued_cond_br(
; CHECK-SAME: ptr [[P:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[COND:%.*]] = icmp eq i32 42, 42
; CHECK-NEXT:    br i1 [[COND]], label [[A:%.*]], label [[B:%.*]]
; CHECK:       a:
; CHECK-NEXT:    store i32 123, ptr [[P]], align 4
; CHECK-NEXT:    br label [[B]]
; CHECK:       b:
; CHECK-NEXT:    ret void
;
entry:
  %cond = icmp eq i32 42, 42
  br i1 %cond, label %a, label %b
a:
  store i32 123, ptr %P
  br label %b
b:
  ret void
}

; When the phi decays to a constant, the terminator of `b` gets constant-folded,
; enabling further simplification.
define void @intersection_block_with_dead_predecessor(ptr %P) {
; CHECK-LABEL: define void @intersection_block_with_dead_predecessor(
; CHECK-SAME: ptr [[P:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[COND:%.*]] = icmp eq i32 1, 1
; CHECK-NEXT:    store i32 321, ptr [[P]], align 4
; CHECK-NEXT:    ret void
;
entry:
  br label %b
b:
  %x = phi i32 [1, %entry], [2, %a]
  switch i32 %x, label %c [
  i32 1, label %d
  ]
c:
  store i32 123, ptr %P
  ret void
d:
  store i32 321, ptr %P
  ret void
a: ; unreachable
  br label %b
}
