; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -S -passes=normalize -verify-each < %s | FileCheck %s

define void @foo() {
; CHECK-LABEL: define void @foo() {
; CHECK-NEXT:  bb17254:
; CHECK-NEXT:    ret void
;
  ret void
}

define void @empty_basic_block() {
; CHECK-LABEL: define void @empty_basic_block() {
; CHECK-NEXT:  exit:
; CHECK-NEXT:    ret void
;
exit:
  ret void
}

declare void @effecting()

; Place dead instruction(s) before the terminator
define void @call_effecting() {
; CHECK-LABEL: define void @call_effecting() {
; CHECK-NEXT:  bb15160:
; CHECK-NEXT:    call void @effecting()
; CHECK-NEXT:    [[TMP0:%.*]] = add i32 0, 1
; CHECK-NEXT:    ret void
;
  %1 = add i32 0, 1
  call void @effecting()
  ret void
}

define void @dont_move_above_phi() {
; CHECK-LABEL: define void @dont_move_above_phi() {
; CHECK-NEXT:  bb76951:
; CHECK-NEXT:    br label [[EXIT:%.*]]
; CHECK:       exit:
; CHECK-NEXT:    [[TMP0:%.*]] = phi i32 [ 0, [[BB76951:%.*]] ]
; CHECK-NEXT:    call void @effecting()
; CHECK-NEXT:    ret void
;
  br label %exit
exit:
  %1 = phi i32 [0, %0]
  call void @effecting()
  ret void
}

define void @dont_move_above_alloca() {
; CHECK-LABEL: define void @dont_move_above_alloca() {
; CHECK-NEXT:  bb15160:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca i32, align 4
; CHECK-NEXT:    call void @effecting()
; CHECK-NEXT:    ret void
;
  %1 = alloca i32
  call void @effecting()
  ret void
}

declare void @effecting1()

define void @dont_reorder_effecting() {
; CHECK-LABEL: define void @dont_reorder_effecting() {
; CHECK-NEXT:  bb10075:
; CHECK-NEXT:    call void @effecting()
; CHECK-NEXT:    call void @effecting1()
; CHECK-NEXT:    ret void
;
  call void @effecting()
  call void @effecting1()
  ret void
}

declare void @effecting2(i32)

define void @dont_reorder_effecting1() {
; CHECK-LABEL: define void @dont_reorder_effecting1() {
; CHECK-NEXT:  bb10075:
; CHECK-NEXT:    [[ONE:%.*]] = add i32 1, 1
; CHECK-NEXT:    call void @effecting2(i32 [[ONE]])
; CHECK-NEXT:    [[TWO:%.*]] = add i32 2, 2
; CHECK-NEXT:    call void @effecting2(i32 [[TWO]])
; CHECK-NEXT:    ret void
;
  %one = add i32 1, 1
  %two = add i32 2, 2
  call void @effecting2(i32 %one)
  call void @effecting2(i32 %two)
  ret void
}

define void @dont_reorder_across_blocks() {
; CHECK-LABEL: define void @dont_reorder_across_blocks() {
; CHECK-NEXT:  bb76951:
; CHECK-NEXT:    [[ONE:%.*]] = add i32 1, 1
; CHECK-NEXT:    br label [[EXIT:%.*]]
; CHECK:       exit:
; CHECK-NEXT:    call void @effecting2(i32 [[ONE]])
; CHECK-NEXT:    ret void
;
  %one = add i32 1, 1
  br label %exit
exit:
  call void @effecting2(i32 %one)
  ret void
}
