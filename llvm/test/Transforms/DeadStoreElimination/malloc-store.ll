; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt < %s -passes=dse -S | FileCheck %s

declare noalias ptr @malloc(i64) willreturn allockind("alloc,uninitialized")
declare void @use(ptr)

define ptr @basic() {
; CHECK-LABEL: define ptr @basic() {
; CHECK-NEXT:    [[PTR:%.*]] = call ptr @calloc(i64 1, i64 4)
; CHECK-NEXT:    ret ptr [[PTR]]
;
  %ptr = call ptr @malloc(i64 4)
  store i32 0, ptr %ptr
  ret ptr %ptr
}

define ptr @vec_type() {
; CHECK-LABEL: define ptr @vec_type() {
; CHECK-NEXT:    [[PTR:%.*]] = call ptr @calloc(i64 1, i64 4)
; CHECK-NEXT:    ret ptr [[PTR]]
;
  %ptr = call ptr @malloc(i64 4)
  store <2 x i16> zeroinitializer, ptr %ptr
  ret ptr %ptr
}

define ptr @clobber() {
; CHECK-LABEL: define ptr @clobber() {
; CHECK-NEXT:    [[PTR:%.*]] = call ptr @calloc(i64 1, i64 4)
; CHECK-NEXT:    [[L:%.*]] = load i8, ptr [[PTR]], align 1
; CHECK-NEXT:    ret ptr [[PTR]]
;
  %ptr = call ptr @malloc(i64 4)
  %l = load i8, ptr %ptr
  store i32 0, ptr %ptr
  ret ptr %ptr
}

define ptr @wrong_size() {
; CHECK-LABEL: define ptr @wrong_size() {
; CHECK-NEXT:    [[PTR:%.*]] = call ptr @malloc(i64 4)
; CHECK-NEXT:    store i8 0, ptr [[PTR]], align 1
; CHECK-NEXT:    ret ptr [[PTR]]
;
  %ptr = call ptr @malloc(i64 4)
  store i8 0, ptr %ptr
  ret ptr %ptr
}

define ptr @bigstore() {
; CHECK-LABEL: define ptr @bigstore() {
; CHECK-NEXT:    [[PTR:%.*]] = call ptr @calloc(i64 1, i64 8096)
; CHECK-NEXT:    ret ptr [[PTR]]
;
  %ptr = call ptr @malloc(i64 8096)
  store <8096 x i8> zeroinitializer, ptr %ptr
  ret ptr %ptr
}

define ptr @nonconstant1(i64 %l) {
; CHECK-LABEL: define ptr @nonconstant1(
; CHECK-SAME: i64 [[L:%.*]]) {
; CHECK-NEXT:    [[PTR:%.*]] = call ptr @malloc(i64 [[L]])
; CHECK-NEXT:    store i32 0, ptr [[PTR]], align 4
; CHECK-NEXT:    ret ptr [[PTR]]
;
  %ptr = call ptr @malloc(i64 %l)
  store i32 0, ptr %ptr
  ret ptr %ptr
}

define ptr @nonconstant2(i32 %v) {
; CHECK-LABEL: define ptr @nonconstant2(
; CHECK-SAME: i32 [[V:%.*]]) {
; CHECK-NEXT:    [[PTR:%.*]] = call ptr @malloc(i64 4)
; CHECK-NEXT:    store i32 [[V]], ptr [[PTR]], align 4
; CHECK-NEXT:    ret ptr [[PTR]]
;
  %ptr = call ptr @malloc(i64 4)
  store i32 %v, ptr %ptr
  ret ptr %ptr
}

define ptr @clobber_fail(i32 %a) {
; CHECK-LABEL: define ptr @clobber_fail(
; CHECK-SAME: i32 [[A:%.*]]) {
; CHECK-NEXT:    [[PTR:%.*]] = call ptr @malloc(i64 4)
; CHECK-NEXT:    store i32 [[A]], ptr [[PTR]], align 4
; CHECK-NEXT:    call void @use(ptr [[PTR]])
; CHECK-NEXT:    store i32 0, ptr [[PTR]], align 4
; CHECK-NEXT:    ret ptr [[PTR]]
;
  %ptr = call ptr @malloc(i64 4)
  store i32 %a, ptr %ptr
  call void @use(ptr %ptr)
  store i32 0, ptr %ptr
  ret ptr %ptr
}
