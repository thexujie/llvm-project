; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt < %s -passes=asan -S -mtriple=amdgcn-- | FileCheck %s

%llvm.amdgcn.sw.lds.k0.md.type = type { %llvm.amdgcn.sw.lds.k0.md.item, %llvm.amdgcn.sw.lds.k0.md.item }
%llvm.amdgcn.sw.lds.k0.md.item = type { i32, i32, i32 }

@llvm.amdgcn.sw.lds.k0 = internal addrspace(3) global ptr poison, align 8
@llvm.amdgcn.sw.lds.k0.md = internal addrspace(1) global %llvm.amdgcn.sw.lds.k0.md.type { %llvm.amdgcn.sw.lds.k0.md.item { i32 0, i32 1, i32 8 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 8, i32 4, i32 8 } }, no_sanitize_address

define amdgpu_kernel void @k0() sanitize_address {
; CHECK-LABEL: define amdgpu_kernel void @k0(
; CHECK-SAME: ) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  WId:
; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @llvm.amdgcn.workitem.id.x()
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.workitem.id.y()
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.workitem.id.z()
; CHECK-NEXT:    [[TMP3:%.*]] = or i32 [[TMP0]], [[TMP1]]
; CHECK-NEXT:    [[TMP4:%.*]] = or i32 [[TMP3]], [[TMP2]]
; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq i32 [[TMP4]], 0
; CHECK-NEXT:    br i1 [[TMP5]], label [[MALLOC:%.*]], label [[TMP18:%.*]]
; CHECK:       Malloc:
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 0), align 8
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 2), align 8
; CHECK-NEXT:    [[TMP8:%.*]] = add i64 [[TMP6]], [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = call ptr addrspace(1) @malloc(i64 [[TMP8]])
; CHECK-NEXT:    store ptr addrspace(1) [[TMP9]], ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 3), align 8
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP9]], i64 [[TMP10]]
; CHECK-NEXT:    [[TMP12:%.*]] = ptrtoint ptr addrspace(1) [[TMP11]] to i64
; CHECK-NEXT:    [[TMP24:%.*]] = lshr i64 ptrtoint (ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 4) to i64), 3
; CHECK-NEXT:    [[TMP25:%.*]] = add i64 [[TMP24]], 2147450880
; CHECK-NEXT:    [[TMP26:%.*]] = inttoptr i64 [[TMP25]] to ptr
; CHECK-NEXT:    [[TMP27:%.*]] = load i8, ptr [[TMP26]], align 1
; CHECK-NEXT:    [[TMP28:%.*]] = icmp ne i8 [[TMP27]], 0
; CHECK-NEXT:    [[TMP29:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP28]])
; CHECK-NEXT:    [[TMP30:%.*]] = icmp ne i64 [[TMP29]], 0
; CHECK-NEXT:    br i1 [[TMP30]], label [[ASAN_REPORT:%.*]], label [[TMP31:%.*]], !prof [[PROF0:![0-9]+]]
; CHECK:       asan.report:
; CHECK-NEXT:    br i1 [[TMP28]], label [[TMP32:%.*]], label [[TMP81:%.*]]
; CHECK:       20:
; CHECK-NEXT:    call void @__asan_report_load8(i64 ptrtoint (ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 4) to i64)) #[[ATTR6:[0-9]+]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label [[TMP81]]
; CHECK:       21:
; CHECK-NEXT:    br label [[TMP31]]
; CHECK:       22:
; CHECK-NEXT:    [[TMP13:%.*]] = load i64, ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 4), align 8
; CHECK-NEXT:    call void @__asan_poison_region(i64 [[TMP12]], i64 [[TMP13]])
; CHECK-NEXT:    [[TMP14:%.*]] = load i64, ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 0, i32 3), align 8
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP9]], i64 [[TMP14]]
; CHECK-NEXT:    [[TMP16:%.*]] = ptrtoint ptr addrspace(1) [[TMP15]] to i64
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 0, i32 4), align 8
; CHECK-NEXT:    call void @__asan_poison_region(i64 [[TMP16]], i64 [[TMP17]])
; CHECK-NEXT:    br label [[TMP18]]
; CHECK:       28:
; CHECK-NEXT:    [[XYZCOND:%.*]] = phi i1 [ false, [[WID:%.*]] ], [ true, [[TMP31]] ]
; CHECK-NEXT:    call void @llvm.amdgcn.s.barrier()
; CHECK-NEXT:    [[TMP19:%.*]] = load i32, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, align 4
; CHECK-NEXT:    [[TMP20:%.*]] = getelementptr inbounds i8, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 [[TMP19]]
; CHECK-NEXT:    [[TMP21:%.*]] = load i32, ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 0), align 4
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr inbounds i8, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 [[TMP21]]
; CHECK-NEXT:    [[TMP33:%.*]] = ptrtoint ptr addrspace(3) [[TMP20]] to i64
; CHECK-NEXT:    [[TMP34:%.*]] = lshr i64 [[TMP33]], 3
; CHECK-NEXT:    [[TMP35:%.*]] = add i64 [[TMP34]], 2147450880
; CHECK-NEXT:    [[TMP36:%.*]] = inttoptr i64 [[TMP35]] to ptr
; CHECK-NEXT:    [[TMP37:%.*]] = load i8, ptr [[TMP36]], align 1
; CHECK-NEXT:    [[TMP38:%.*]] = icmp ne i8 [[TMP37]], 0
; CHECK-NEXT:    [[TMP39:%.*]] = and i64 [[TMP33]], 7
; CHECK-NEXT:    [[TMP40:%.*]] = trunc i64 [[TMP39]] to i8
; CHECK-NEXT:    [[TMP41:%.*]] = icmp sge i8 [[TMP40]], [[TMP37]]
; CHECK-NEXT:    [[TMP42:%.*]] = and i1 [[TMP38]], [[TMP41]]
; CHECK-NEXT:    [[TMP43:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP42]])
; CHECK-NEXT:    [[TMP44:%.*]] = icmp ne i64 [[TMP43]], 0
; CHECK-NEXT:    br i1 [[TMP44]], label [[ASAN_REPORT1:%.*]], label [[TMP47:%.*]], !prof [[PROF0]]
; CHECK:       asan.report1:
; CHECK-NEXT:    br i1 [[TMP42]], label [[TMP45:%.*]], label [[TMP46:%.*]]
; CHECK:       45:
; CHECK-NEXT:    call void @__asan_report_store1(i64 [[TMP33]]) #[[ATTR6]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label [[TMP46]]
; CHECK:       46:
; CHECK-NEXT:    br label [[TMP47]]
; CHECK:       47:
; CHECK-NEXT:    store i8 7, ptr addrspace(3) [[TMP20]], align 4
; CHECK-NEXT:    [[TMP48:%.*]] = ptrtoint ptr addrspace(3) [[TMP22]] to i64
; CHECK-NEXT:    [[TMP49:%.*]] = add i64 [[TMP48]], 3
; CHECK-NEXT:    [[TMP50:%.*]] = inttoptr i64 [[TMP49]] to ptr addrspace(3)
; CHECK-NEXT:    [[TMP51:%.*]] = ptrtoint ptr addrspace(3) [[TMP22]] to i64
; CHECK-NEXT:    [[TMP52:%.*]] = lshr i64 [[TMP51]], 3
; CHECK-NEXT:    [[TMP53:%.*]] = add i64 [[TMP52]], 2147450880
; CHECK-NEXT:    [[TMP54:%.*]] = inttoptr i64 [[TMP53]] to ptr
; CHECK-NEXT:    [[TMP55:%.*]] = load i8, ptr [[TMP54]], align 1
; CHECK-NEXT:    [[TMP56:%.*]] = icmp ne i8 [[TMP55]], 0
; CHECK-NEXT:    [[TMP57:%.*]] = and i64 [[TMP51]], 7
; CHECK-NEXT:    [[TMP58:%.*]] = trunc i64 [[TMP57]] to i8
; CHECK-NEXT:    [[TMP59:%.*]] = icmp sge i8 [[TMP58]], [[TMP55]]
; CHECK-NEXT:    [[TMP60:%.*]] = and i1 [[TMP56]], [[TMP59]]
; CHECK-NEXT:    [[TMP61:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP60]])
; CHECK-NEXT:    [[TMP62:%.*]] = icmp ne i64 [[TMP61]], 0
; CHECK-NEXT:    br i1 [[TMP62]], label [[ASAN_REPORT2:%.*]], label [[TMP65:%.*]], !prof [[PROF0]]
; CHECK:       asan.report2:
; CHECK-NEXT:    br i1 [[TMP60]], label [[TMP63:%.*]], label [[TMP64:%.*]]
; CHECK:       63:
; CHECK-NEXT:    call void @__asan_report_store_n(i64 [[TMP51]], i64 4) #[[ATTR6]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label [[TMP64]]
; CHECK:       64:
; CHECK-NEXT:    br label [[TMP65]]
; CHECK:       65:
; CHECK-NEXT:    [[TMP66:%.*]] = ptrtoint ptr addrspace(3) [[TMP50]] to i64
; CHECK-NEXT:    [[TMP67:%.*]] = lshr i64 [[TMP66]], 3
; CHECK-NEXT:    [[TMP68:%.*]] = add i64 [[TMP67]], 2147450880
; CHECK-NEXT:    [[TMP69:%.*]] = inttoptr i64 [[TMP68]] to ptr
; CHECK-NEXT:    [[TMP70:%.*]] = load i8, ptr [[TMP69]], align 1
; CHECK-NEXT:    [[TMP71:%.*]] = icmp ne i8 [[TMP70]], 0
; CHECK-NEXT:    [[TMP72:%.*]] = and i64 [[TMP66]], 7
; CHECK-NEXT:    [[TMP73:%.*]] = trunc i64 [[TMP72]] to i8
; CHECK-NEXT:    [[TMP74:%.*]] = icmp sge i8 [[TMP73]], [[TMP70]]
; CHECK-NEXT:    [[TMP75:%.*]] = and i1 [[TMP71]], [[TMP74]]
; CHECK-NEXT:    [[TMP76:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP75]])
; CHECK-NEXT:    [[TMP77:%.*]] = icmp ne i64 [[TMP76]], 0
; CHECK-NEXT:    br i1 [[TMP77]], label [[ASAN_REPORT3:%.*]], label [[TMP80:%.*]], !prof [[PROF0]]
; CHECK:       asan.report3:
; CHECK-NEXT:    br i1 [[TMP75]], label [[TMP78:%.*]], label [[TMP79:%.*]]
; CHECK:       78:
; CHECK-NEXT:    call void @__asan_report_store_n(i64 [[TMP66]], i64 4) #[[ATTR6]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label [[TMP79]]
; CHECK:       79:
; CHECK-NEXT:    br label [[TMP80]]
; CHECK:       80:
; CHECK-NEXT:    store i32 8, ptr addrspace(3) [[TMP22]], align 2
; CHECK-NEXT:    br label [[CONDFREE:%.*]]
; CHECK:       CondFree:
; CHECK-NEXT:    call void @llvm.amdgcn.s.barrier()
; CHECK-NEXT:    br i1 [[XYZCOND]], label [[FREE:%.*]], label [[END:%.*]]
; CHECK:       Free:
; CHECK-NEXT:    [[TMP23:%.*]] = load ptr, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
; CHECK-NEXT:    call void @free(ptr [[TMP23]])
; CHECK-NEXT:    br label [[END]]
; CHECK:       End:
; CHECK-NEXT:    ret void
;
WId:
  %0 = call i32 @llvm.amdgcn.workitem.id.x()
  %1 = call i32 @llvm.amdgcn.workitem.id.y()
  %2 = call i32 @llvm.amdgcn.workitem.id.z()
  %3 = or i32 %0, %1
  %4 = or i32 %3, %2
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %Malloc, label %10

Malloc:                                           ; preds = %WId
  %6 = load i64, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 0), align 8
  %7 = load i64, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 2), align 8
  %8 = add i64 %6, %7
  %9 = call ptr addrspace(1) @malloc(i64 %8)
  store ptr addrspace(1) %9, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
  br label %10

10:                                               ; preds = %Malloc, %WId
  %xyzCond = phi i1 [ false, %WId ], [ true, %Malloc ]
  call void @llvm.amdgcn.s.barrier()
  %11 = load i32, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, align 4
  %12 = getelementptr inbounds i8, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 %11
  %13 = load i32, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 0), align 4
  %14 = getelementptr inbounds i8, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 %13
  store i8 7, ptr addrspace(3) %12, align 4
  store i32 8, ptr addrspace(3) %14, align 2
  br label %CondFree

CondFree:                                         ; preds = %10
  call void @llvm.amdgcn.s.barrier()
  br i1 %xyzCond, label %Free, label %End

Free:                                             ; preds = %CondFree
  %15 = load ptr, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
  call void @free(ptr %15)
  br label %End

End:                                              ; preds = %Free, %CondFree
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workitem.id.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workitem.id.y() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workitem.id.z() #0

declare ptr addrspace(1) @malloc(i64)

; Function Attrs: convergent nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #1

declare void @free(ptr)

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nofree nounwind willreturn }
;.
; CHECK: [[PROF0]] = !{!"branch_weights", i32 1, i32 100000}
;.
