; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt < %s -passes=asan -S -mtriple=amdgcn-- | FileCheck %s

%llvm.amdgcn.sw.lds.k0.md.type = type { %llvm.amdgcn.sw.lds.k0.md.item, %llvm.amdgcn.sw.lds.k0.md.item, %llvm.amdgcn.sw.lds.k0.md.item, %llvm.amdgcn.sw.lds.k0.md.item }
%llvm.amdgcn.sw.lds.k0.md.item = type { i32, i32, i32 }

@llvm.amdgcn.sw.lds.k0 = internal addrspace(3) global ptr poison, align 8
@llvm.amdgcn.sw.lds.k0.md = internal addrspace(1) global %llvm.amdgcn.sw.lds.k0.md.type { %llvm.amdgcn.sw.lds.k0.md.item { i32 0, i32 1, i32 8 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 8, i32 4, i32 8 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 16, i32 0, i32 0 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 16, i32 0, i32 0 } }, no_sanitize_address
@llvm.amdgcn.sw.lds.base.table = internal addrspace(4) constant [1 x i32] [i32 ptrtoint (ptr addrspace(3) @llvm.amdgcn.sw.lds.k0 to i32)]
@llvm.amdgcn.sw.lds.offset.table = internal addrspace(4) constant [1 x [2 x i32]] [[2 x i32] [i32 ptrtoint (ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 0) to i32), i32 ptrtoint (ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 3, i32 0) to i32)]]

define void @use_variables() sanitize_address {
; CHECK-LABEL: define void @use_variables(
; CHECK-SAME: ) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.lds.kernel.id()
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [1 x i32], ptr addrspace(4) @llvm.amdgcn.sw.lds.base.table, i32 0, i32 [[TMP1]]
; CHECK-NEXT:    [[TMP19:%.*]] = ptrtoint ptr addrspace(4) [[TMP2]] to i64
; CHECK-NEXT:    [[TMP20:%.*]] = lshr i64 [[TMP19]], 3
; CHECK-NEXT:    [[TMP21:%.*]] = add i64 [[TMP20]], 2147450880
; CHECK-NEXT:    [[TMP38:%.*]] = inttoptr i64 [[TMP21]] to ptr
; CHECK-NEXT:    [[TMP39:%.*]] = load i8, ptr [[TMP38]], align 1
; CHECK-NEXT:    [[TMP56:%.*]] = icmp ne i8 [[TMP39]], 0
; CHECK-NEXT:    [[TMP57:%.*]] = and i64 [[TMP19]], 7
; CHECK-NEXT:    [[TMP58:%.*]] = add i64 [[TMP57]], 3
; CHECK-NEXT:    [[TMP59:%.*]] = trunc i64 [[TMP58]] to i8
; CHECK-NEXT:    [[TMP76:%.*]] = icmp sge i8 [[TMP59]], [[TMP39]]
; CHECK-NEXT:    [[TMP77:%.*]] = and i1 [[TMP56]], [[TMP76]]
; CHECK-NEXT:    [[TMP94:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP77]])
; CHECK-NEXT:    [[TMP95:%.*]] = icmp ne i64 [[TMP94]], 0
; CHECK-NEXT:    br i1 [[TMP95]], label [[ASAN_REPORT:%.*]], label [[TMP18:%.*]], !prof [[PROF0:![0-9]+]]
; CHECK:       asan.report:
; CHECK-NEXT:    br i1 [[TMP77]], label [[TMP16:%.*]], label [[TMP17:%.*]]
; CHECK:       16:
; CHECK-NEXT:    call void @__asan_report_load4(i64 [[TMP19]]) #[[ATTR6:[0-9]+]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label [[TMP17]]
; CHECK:       17:
; CHECK-NEXT:    br label [[TMP18]]
; CHECK:       18:
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, ptr addrspace(4) [[TMP2]], align 4
; CHECK-NEXT:    [[TMP4:%.*]] = inttoptr i32 [[TMP3]] to ptr addrspace(3)
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [1 x [2 x i32]], ptr addrspace(4) @llvm.amdgcn.sw.lds.offset.table, i32 0, i32 [[TMP1]], i32 0
; CHECK-NEXT:    [[TMP22:%.*]] = ptrtoint ptr addrspace(4) [[TMP5]] to i64
; CHECK-NEXT:    [[TMP23:%.*]] = lshr i64 [[TMP22]], 3
; CHECK-NEXT:    [[TMP24:%.*]] = add i64 [[TMP23]], 2147450880
; CHECK-NEXT:    [[TMP25:%.*]] = inttoptr i64 [[TMP24]] to ptr
; CHECK-NEXT:    [[TMP26:%.*]] = load i8, ptr [[TMP25]], align 1
; CHECK-NEXT:    [[TMP27:%.*]] = icmp ne i8 [[TMP26]], 0
; CHECK-NEXT:    [[TMP28:%.*]] = and i64 [[TMP22]], 7
; CHECK-NEXT:    [[TMP29:%.*]] = add i64 [[TMP28]], 3
; CHECK-NEXT:    [[TMP30:%.*]] = trunc i64 [[TMP29]] to i8
; CHECK-NEXT:    [[TMP31:%.*]] = icmp sge i8 [[TMP30]], [[TMP26]]
; CHECK-NEXT:    [[TMP32:%.*]] = and i1 [[TMP27]], [[TMP31]]
; CHECK-NEXT:    [[TMP33:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP32]])
; CHECK-NEXT:    [[TMP34:%.*]] = icmp ne i64 [[TMP33]], 0
; CHECK-NEXT:    br i1 [[TMP34]], label [[ASAN_REPORT1:%.*]], label [[TMP37:%.*]], !prof [[PROF0]]
; CHECK:       asan.report1:
; CHECK-NEXT:    br i1 [[TMP32]], label [[TMP35:%.*]], label [[TMP36:%.*]]
; CHECK:       35:
; CHECK-NEXT:    call void @__asan_report_load4(i64 [[TMP22]]) #[[ATTR6]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label [[TMP36]]
; CHECK:       36:
; CHECK-NEXT:    br label [[TMP37]]
; CHECK:       37:
; CHECK-NEXT:    [[TMP6:%.*]] = load i32, ptr addrspace(4) [[TMP5]], align 4
; CHECK-NEXT:    [[TMP7:%.*]] = inttoptr i32 [[TMP6]] to ptr addrspace(3)
; CHECK-NEXT:    [[TMP40:%.*]] = ptrtoint ptr addrspace(3) [[TMP7]] to i64
; CHECK-NEXT:    [[TMP41:%.*]] = lshr i64 [[TMP40]], 3
; CHECK-NEXT:    [[TMP42:%.*]] = add i64 [[TMP41]], 2147450880
; CHECK-NEXT:    [[TMP43:%.*]] = inttoptr i64 [[TMP42]] to ptr
; CHECK-NEXT:    [[TMP44:%.*]] = load i8, ptr [[TMP43]], align 1
; CHECK-NEXT:    [[TMP45:%.*]] = icmp ne i8 [[TMP44]], 0
; CHECK-NEXT:    [[TMP46:%.*]] = and i64 [[TMP40]], 7
; CHECK-NEXT:    [[TMP47:%.*]] = add i64 [[TMP46]], 3
; CHECK-NEXT:    [[TMP48:%.*]] = trunc i64 [[TMP47]] to i8
; CHECK-NEXT:    [[TMP49:%.*]] = icmp sge i8 [[TMP48]], [[TMP44]]
; CHECK-NEXT:    [[TMP50:%.*]] = and i1 [[TMP45]], [[TMP49]]
; CHECK-NEXT:    [[TMP51:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP50]])
; CHECK-NEXT:    [[TMP52:%.*]] = icmp ne i64 [[TMP51]], 0
; CHECK-NEXT:    br i1 [[TMP52]], label [[ASAN_REPORT2:%.*]], label [[TMP55:%.*]], !prof [[PROF0]]
; CHECK:       asan.report2:
; CHECK-NEXT:    br i1 [[TMP50]], label [[TMP53:%.*]], label [[TMP54:%.*]]
; CHECK:       53:
; CHECK-NEXT:    call void @__asan_report_load4(i64 [[TMP40]]) #[[ATTR6]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label [[TMP54]]
; CHECK:       54:
; CHECK-NEXT:    br label [[TMP55]]
; CHECK:       55:
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr addrspace(3) [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr inbounds i8, ptr addrspace(3) [[TMP4]], i32 [[TMP8]]
; CHECK-NEXT:    [[TMP10:%.*]] = inttoptr i32 [[TMP3]] to ptr addrspace(3)
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [1 x [2 x i32]], ptr addrspace(4) @llvm.amdgcn.sw.lds.offset.table, i32 0, i32 [[TMP1]], i32 1
; CHECK-NEXT:    [[TMP60:%.*]] = ptrtoint ptr addrspace(4) [[TMP11]] to i64
; CHECK-NEXT:    [[TMP61:%.*]] = lshr i64 [[TMP60]], 3
; CHECK-NEXT:    [[TMP62:%.*]] = add i64 [[TMP61]], 2147450880
; CHECK-NEXT:    [[TMP63:%.*]] = inttoptr i64 [[TMP62]] to ptr
; CHECK-NEXT:    [[TMP64:%.*]] = load i8, ptr [[TMP63]], align 1
; CHECK-NEXT:    [[TMP65:%.*]] = icmp ne i8 [[TMP64]], 0
; CHECK-NEXT:    [[TMP66:%.*]] = and i64 [[TMP60]], 7
; CHECK-NEXT:    [[TMP67:%.*]] = add i64 [[TMP66]], 3
; CHECK-NEXT:    [[TMP68:%.*]] = trunc i64 [[TMP67]] to i8
; CHECK-NEXT:    [[TMP69:%.*]] = icmp sge i8 [[TMP68]], [[TMP64]]
; CHECK-NEXT:    [[TMP70:%.*]] = and i1 [[TMP65]], [[TMP69]]
; CHECK-NEXT:    [[TMP71:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP70]])
; CHECK-NEXT:    [[TMP72:%.*]] = icmp ne i64 [[TMP71]], 0
; CHECK-NEXT:    br i1 [[TMP72]], label [[ASAN_REPORT3:%.*]], label [[TMP75:%.*]], !prof [[PROF0]]
; CHECK:       asan.report3:
; CHECK-NEXT:    br i1 [[TMP70]], label [[TMP73:%.*]], label [[TMP74:%.*]]
; CHECK:       73:
; CHECK-NEXT:    call void @__asan_report_load4(i64 [[TMP60]]) #[[ATTR6]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label [[TMP74]]
; CHECK:       74:
; CHECK-NEXT:    br label [[TMP75]]
; CHECK:       75:
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr addrspace(4) [[TMP11]], align 4
; CHECK-NEXT:    [[TMP13:%.*]] = inttoptr i32 [[TMP12]] to ptr addrspace(3)
; CHECK-NEXT:    [[TMP78:%.*]] = ptrtoint ptr addrspace(3) [[TMP13]] to i64
; CHECK-NEXT:    [[TMP79:%.*]] = lshr i64 [[TMP78]], 3
; CHECK-NEXT:    [[TMP80:%.*]] = add i64 [[TMP79]], 2147450880
; CHECK-NEXT:    [[TMP81:%.*]] = inttoptr i64 [[TMP80]] to ptr
; CHECK-NEXT:    [[TMP82:%.*]] = load i8, ptr [[TMP81]], align 1
; CHECK-NEXT:    [[TMP83:%.*]] = icmp ne i8 [[TMP82]], 0
; CHECK-NEXT:    [[TMP84:%.*]] = and i64 [[TMP78]], 7
; CHECK-NEXT:    [[TMP85:%.*]] = add i64 [[TMP84]], 3
; CHECK-NEXT:    [[TMP86:%.*]] = trunc i64 [[TMP85]] to i8
; CHECK-NEXT:    [[TMP87:%.*]] = icmp sge i8 [[TMP86]], [[TMP82]]
; CHECK-NEXT:    [[TMP88:%.*]] = and i1 [[TMP83]], [[TMP87]]
; CHECK-NEXT:    [[TMP89:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP88]])
; CHECK-NEXT:    [[TMP90:%.*]] = icmp ne i64 [[TMP89]], 0
; CHECK-NEXT:    br i1 [[TMP90]], label [[ASAN_REPORT4:%.*]], label [[TMP93:%.*]], !prof [[PROF0]]
; CHECK:       asan.report4:
; CHECK-NEXT:    br i1 [[TMP88]], label [[TMP91:%.*]], label [[TMP92:%.*]]
; CHECK:       91:
; CHECK-NEXT:    call void @__asan_report_load4(i64 [[TMP78]]) #[[ATTR6]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label [[TMP92]]
; CHECK:       92:
; CHECK-NEXT:    br label [[TMP93]]
; CHECK:       93:
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, ptr addrspace(3) [[TMP13]], align 4
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr inbounds i8, ptr addrspace(3) [[TMP10]], i32 [[TMP14]]
; CHECK-NEXT:    [[TMP96:%.*]] = ptrtoint ptr addrspace(3) [[TMP9]] to i64
; CHECK-NEXT:    [[TMP97:%.*]] = lshr i64 [[TMP96]], 3
; CHECK-NEXT:    [[TMP98:%.*]] = add i64 [[TMP97]], 2147450880
; CHECK-NEXT:    [[TMP99:%.*]] = inttoptr i64 [[TMP98]] to ptr
; CHECK-NEXT:    [[TMP100:%.*]] = load i8, ptr [[TMP99]], align 1
; CHECK-NEXT:    [[TMP101:%.*]] = icmp ne i8 [[TMP100]], 0
; CHECK-NEXT:    [[TMP102:%.*]] = and i64 [[TMP96]], 7
; CHECK-NEXT:    [[TMP103:%.*]] = trunc i64 [[TMP102]] to i8
; CHECK-NEXT:    [[TMP104:%.*]] = icmp sge i8 [[TMP103]], [[TMP100]]
; CHECK-NEXT:    [[TMP105:%.*]] = and i1 [[TMP101]], [[TMP104]]
; CHECK-NEXT:    [[TMP106:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP105]])
; CHECK-NEXT:    [[TMP107:%.*]] = icmp ne i64 [[TMP106]], 0
; CHECK-NEXT:    br i1 [[TMP107]], label [[ASAN_REPORT5:%.*]], label [[TMP110:%.*]], !prof [[PROF0]]
; CHECK:       asan.report5:
; CHECK-NEXT:    br i1 [[TMP105]], label [[TMP108:%.*]], label [[TMP109:%.*]]
; CHECK:       108:
; CHECK-NEXT:    call void @__asan_report_store1(i64 [[TMP96]]) #[[ATTR6]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label [[TMP109]]
; CHECK:       109:
; CHECK-NEXT:    br label [[TMP110]]
; CHECK:       110:
; CHECK-NEXT:    store i8 3, ptr addrspace(3) [[TMP9]], align 4
; CHECK-NEXT:    [[TMP111:%.*]] = ptrtoint ptr addrspace(3) [[TMP15]] to i64
; CHECK-NEXT:    [[TMP112:%.*]] = lshr i64 [[TMP111]], 3
; CHECK-NEXT:    [[TMP113:%.*]] = add i64 [[TMP112]], 2147450880
; CHECK-NEXT:    [[TMP114:%.*]] = inttoptr i64 [[TMP113]] to ptr
; CHECK-NEXT:    [[TMP115:%.*]] = load i8, ptr [[TMP114]], align 1
; CHECK-NEXT:    [[TMP116:%.*]] = icmp ne i8 [[TMP115]], 0
; CHECK-NEXT:    [[TMP117:%.*]] = and i64 [[TMP111]], 7
; CHECK-NEXT:    [[TMP118:%.*]] = trunc i64 [[TMP117]] to i8
; CHECK-NEXT:    [[TMP119:%.*]] = icmp sge i8 [[TMP118]], [[TMP115]]
; CHECK-NEXT:    [[TMP120:%.*]] = and i1 [[TMP116]], [[TMP119]]
; CHECK-NEXT:    [[TMP121:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP120]])
; CHECK-NEXT:    [[TMP122:%.*]] = icmp ne i64 [[TMP121]], 0
; CHECK-NEXT:    br i1 [[TMP122]], label [[ASAN_REPORT6:%.*]], label [[TMP125:%.*]], !prof [[PROF0]]
; CHECK:       asan.report6:
; CHECK-NEXT:    br i1 [[TMP120]], label [[TMP123:%.*]], label [[TMP124:%.*]]
; CHECK:       123:
; CHECK-NEXT:    call void @__asan_report_store1(i64 [[TMP111]]) #[[ATTR6]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label [[TMP124]]
; CHECK:       124:
; CHECK-NEXT:    br label [[TMP125]]
; CHECK:       125:
; CHECK-NEXT:    store i8 3, ptr addrspace(3) [[TMP15]], align 8
; CHECK-NEXT:    ret void
;
  %1 = call i32 @llvm.amdgcn.lds.kernel.id()
  %2 = getelementptr inbounds [1 x i32], ptr addrspace(4) @llvm.amdgcn.sw.lds.base.table, i32 0, i32 %1
  %3 = load i32, ptr addrspace(4) %2, align 4
  %4 = inttoptr i32 %3 to ptr addrspace(3)
  %5 = getelementptr inbounds [1 x [2 x i32]], ptr addrspace(4) @llvm.amdgcn.sw.lds.offset.table, i32 0, i32 %1, i32 0
  %6 = load i32, ptr addrspace(4) %5, align 4
  %7 = inttoptr i32 %6 to ptr addrspace(3)
  %8 = load i32, ptr addrspace(3) %7, align 4
  %9 = getelementptr inbounds i8, ptr addrspace(3) %4, i32 %8
  %10 = inttoptr i32 %3 to ptr addrspace(3)
  %11 = getelementptr inbounds [1 x [2 x i32]], ptr addrspace(4) @llvm.amdgcn.sw.lds.offset.table, i32 0, i32 %1, i32 1
  %12 = load i32, ptr addrspace(4) %11, align 4
  %13 = inttoptr i32 %12 to ptr addrspace(3)
  %14 = load i32, ptr addrspace(3) %13, align 4
  %15 = getelementptr inbounds i8, ptr addrspace(3) %10, i32 %14
  store i8 3, ptr addrspace(3) %9, align 4
  store i8 3, ptr addrspace(3) %15, align 8
  ret void
}

define amdgpu_kernel void @k0() sanitize_address !llvm.amdgcn.lds.kernel.id !0 {
; CHECK-LABEL: define amdgpu_kernel void @k0(
; CHECK-SAME: ) #[[ATTR0]] !llvm.amdgcn.lds.kernel.id [[META1:![0-9]+]] {
; CHECK-NEXT:  WId:
; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @llvm.amdgcn.workitem.id.x()
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.workitem.id.y()
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.workitem.id.z()
; CHECK-NEXT:    [[TMP3:%.*]] = or i32 [[TMP0]], [[TMP1]]
; CHECK-NEXT:    [[TMP4:%.*]] = or i32 [[TMP3]], [[TMP2]]
; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq i32 [[TMP4]], 0
; CHECK-NEXT:    br i1 [[TMP5]], label [[MALLOC:%.*]], label [[TMP30:%.*]]
; CHECK:       Malloc:
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 0), align 8
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 2), align 8
; CHECK-NEXT:    [[TMP8:%.*]] = add i64 [[TMP6]], [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds ptr addrspace(4), ptr addrspace(4) [[TMP9]], i32 15
; CHECK-NEXT:    store i64 [[TMP8]], ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 0), align 8
; CHECK-NEXT:    [[TMP36:%.*]] = ptrtoint ptr addrspace(4) [[TMP10]] to i64
; CHECK-NEXT:    [[TMP37:%.*]] = lshr i64 [[TMP36]], 3
; CHECK-NEXT:    [[TMP38:%.*]] = add i64 [[TMP37]], 2147450880
; CHECK-NEXT:    [[TMP39:%.*]] = inttoptr i64 [[TMP38]] to ptr
; CHECK-NEXT:    [[TMP40:%.*]] = load i8, ptr [[TMP39]], align 1
; CHECK-NEXT:    [[TMP41:%.*]] = icmp ne i8 [[TMP40]], 0
; CHECK-NEXT:    [[TMP42:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP41]])
; CHECK-NEXT:    [[TMP43:%.*]] = icmp ne i64 [[TMP42]], 0
; CHECK-NEXT:    br i1 [[TMP43]], label [[ASAN_REPORT:%.*]], label [[TMP44:%.*]], !prof [[PROF0]]
; CHECK:       asan.report:
; CHECK-NEXT:    br i1 [[TMP41]], label [[TMP45:%.*]], label [[TMP94:%.*]]
; CHECK:       19:
; CHECK-NEXT:    call void @__asan_report_load8(i64 [[TMP36]]) #[[ATTR6]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label [[TMP94]]
; CHECK:       20:
; CHECK-NEXT:    br label [[TMP44]]
; CHECK:       21:
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr addrspace(4) [[TMP10]], align 8
; CHECK-NEXT:    store i64 [[TMP11]], ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 1), align 8
; CHECK-NEXT:    [[TMP12:%.*]] = add i64 [[TMP11]], 7
; CHECK-NEXT:    [[TMP13:%.*]] = udiv i64 [[TMP12]], 8
; CHECK-NEXT:    [[TMP14:%.*]] = mul i64 [[TMP13]], 8
; CHECK-NEXT:    store i64 [[TMP14]], ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 2), align 8
; CHECK-NEXT:    [[TMP15:%.*]] = add i64 [[TMP8]], [[TMP14]]
; CHECK-NEXT:    store i64 [[TMP15]], ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 3, i32 0), align 8
; CHECK-NEXT:    [[TMP16:%.*]] = load i64, ptr addrspace(4) [[TMP10]], align 8
; CHECK-NEXT:    store i64 [[TMP16]], ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 3, i32 1), align 8
; CHECK-NEXT:    [[TMP17:%.*]] = add i64 [[TMP16]], 7
; CHECK-NEXT:    [[TMP18:%.*]] = udiv i64 [[TMP17]], 8
; CHECK-NEXT:    [[TMP19:%.*]] = mul i64 [[TMP18]], 8
; CHECK-NEXT:    store i64 [[TMP19]], ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 3, i32 2), align 8
; CHECK-NEXT:    [[TMP20:%.*]] = add i64 [[TMP15]], [[TMP19]]
; CHECK-NEXT:    [[TMP21:%.*]] = call ptr addrspace(1) @malloc(i64 [[TMP20]])
; CHECK-NEXT:    store ptr addrspace(1) [[TMP21]], ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
; CHECK-NEXT:    [[TMP22:%.*]] = load i64, ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 3), align 8
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP21]], i64 [[TMP22]]
; CHECK-NEXT:    [[TMP24:%.*]] = ptrtoint ptr addrspace(1) [[TMP23]] to i64
; CHECK-NEXT:    [[TMP25:%.*]] = load i64, ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 4), align 8
; CHECK-NEXT:    call void @__asan_poison_region(i64 [[TMP24]], i64 [[TMP25]])
; CHECK-NEXT:    [[TMP26:%.*]] = load i64, ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 0, i32 3), align 8
; CHECK-NEXT:    [[TMP27:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP21]], i64 [[TMP26]]
; CHECK-NEXT:    [[TMP28:%.*]] = ptrtoint ptr addrspace(1) [[TMP27]] to i64
; CHECK-NEXT:    [[TMP29:%.*]] = load i64, ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 0, i32 4), align 8
; CHECK-NEXT:    call void @__asan_poison_region(i64 [[TMP28]], i64 [[TMP29]])
; CHECK-NEXT:    br label [[TMP30]]
; CHECK:       41:
; CHECK-NEXT:    [[XYZCOND:%.*]] = phi i1 [ false, [[WID:%.*]] ], [ true, [[TMP44]] ]
; CHECK-NEXT:    call void @llvm.amdgcn.s.barrier()
; CHECK-NEXT:    [[TMP31:%.*]] = load i32, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, align 4
; CHECK-NEXT:    [[TMP32:%.*]] = getelementptr inbounds i8, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 [[TMP31]]
; CHECK-NEXT:    [[TMP33:%.*]] = load i32, ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 0), align 4
; CHECK-NEXT:    [[TMP34:%.*]] = getelementptr inbounds i8, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 [[TMP33]]
; CHECK-NEXT:    call void @use_variables()
; CHECK-NEXT:    [[TMP46:%.*]] = ptrtoint ptr addrspace(3) [[TMP32]] to i64
; CHECK-NEXT:    [[TMP47:%.*]] = lshr i64 [[TMP46]], 3
; CHECK-NEXT:    [[TMP48:%.*]] = add i64 [[TMP47]], 2147450880
; CHECK-NEXT:    [[TMP49:%.*]] = inttoptr i64 [[TMP48]] to ptr
; CHECK-NEXT:    [[TMP50:%.*]] = load i8, ptr [[TMP49]], align 1
; CHECK-NEXT:    [[TMP51:%.*]] = icmp ne i8 [[TMP50]], 0
; CHECK-NEXT:    [[TMP52:%.*]] = and i64 [[TMP46]], 7
; CHECK-NEXT:    [[TMP53:%.*]] = trunc i64 [[TMP52]] to i8
; CHECK-NEXT:    [[TMP54:%.*]] = icmp sge i8 [[TMP53]], [[TMP50]]
; CHECK-NEXT:    [[TMP55:%.*]] = and i1 [[TMP51]], [[TMP54]]
; CHECK-NEXT:    [[TMP56:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP55]])
; CHECK-NEXT:    [[TMP57:%.*]] = icmp ne i64 [[TMP56]], 0
; CHECK-NEXT:    br i1 [[TMP57]], label [[ASAN_REPORT1:%.*]], label [[TMP60:%.*]], !prof [[PROF0]]
; CHECK:       asan.report1:
; CHECK-NEXT:    br i1 [[TMP55]], label [[TMP58:%.*]], label [[TMP59:%.*]]
; CHECK:       58:
; CHECK-NEXT:    call void @__asan_report_store1(i64 [[TMP46]]) #[[ATTR6]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label [[TMP59]]
; CHECK:       59:
; CHECK-NEXT:    br label [[TMP60]]
; CHECK:       60:
; CHECK-NEXT:    store i8 7, ptr addrspace(3) [[TMP32]], align 1
; CHECK-NEXT:    [[TMP61:%.*]] = ptrtoint ptr addrspace(3) [[TMP34]] to i64
; CHECK-NEXT:    [[TMP62:%.*]] = add i64 [[TMP61]], 3
; CHECK-NEXT:    [[TMP63:%.*]] = inttoptr i64 [[TMP62]] to ptr addrspace(3)
; CHECK-NEXT:    [[TMP64:%.*]] = ptrtoint ptr addrspace(3) [[TMP34]] to i64
; CHECK-NEXT:    [[TMP65:%.*]] = lshr i64 [[TMP64]], 3
; CHECK-NEXT:    [[TMP66:%.*]] = add i64 [[TMP65]], 2147450880
; CHECK-NEXT:    [[TMP67:%.*]] = inttoptr i64 [[TMP66]] to ptr
; CHECK-NEXT:    [[TMP68:%.*]] = load i8, ptr [[TMP67]], align 1
; CHECK-NEXT:    [[TMP69:%.*]] = icmp ne i8 [[TMP68]], 0
; CHECK-NEXT:    [[TMP70:%.*]] = and i64 [[TMP64]], 7
; CHECK-NEXT:    [[TMP71:%.*]] = trunc i64 [[TMP70]] to i8
; CHECK-NEXT:    [[TMP72:%.*]] = icmp sge i8 [[TMP71]], [[TMP68]]
; CHECK-NEXT:    [[TMP73:%.*]] = and i1 [[TMP69]], [[TMP72]]
; CHECK-NEXT:    [[TMP74:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP73]])
; CHECK-NEXT:    [[TMP75:%.*]] = icmp ne i64 [[TMP74]], 0
; CHECK-NEXT:    br i1 [[TMP75]], label [[ASAN_REPORT2:%.*]], label [[TMP78:%.*]], !prof [[PROF0]]
; CHECK:       asan.report2:
; CHECK-NEXT:    br i1 [[TMP73]], label [[TMP76:%.*]], label [[TMP77:%.*]]
; CHECK:       76:
; CHECK-NEXT:    call void @__asan_report_store_n(i64 [[TMP64]], i64 4) #[[ATTR6]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label [[TMP77]]
; CHECK:       77:
; CHECK-NEXT:    br label [[TMP78]]
; CHECK:       78:
; CHECK-NEXT:    [[TMP79:%.*]] = ptrtoint ptr addrspace(3) [[TMP63]] to i64
; CHECK-NEXT:    [[TMP80:%.*]] = lshr i64 [[TMP79]], 3
; CHECK-NEXT:    [[TMP81:%.*]] = add i64 [[TMP80]], 2147450880
; CHECK-NEXT:    [[TMP82:%.*]] = inttoptr i64 [[TMP81]] to ptr
; CHECK-NEXT:    [[TMP83:%.*]] = load i8, ptr [[TMP82]], align 1
; CHECK-NEXT:    [[TMP84:%.*]] = icmp ne i8 [[TMP83]], 0
; CHECK-NEXT:    [[TMP85:%.*]] = and i64 [[TMP79]], 7
; CHECK-NEXT:    [[TMP86:%.*]] = trunc i64 [[TMP85]] to i8
; CHECK-NEXT:    [[TMP87:%.*]] = icmp sge i8 [[TMP86]], [[TMP83]]
; CHECK-NEXT:    [[TMP88:%.*]] = and i1 [[TMP84]], [[TMP87]]
; CHECK-NEXT:    [[TMP89:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP88]])
; CHECK-NEXT:    [[TMP90:%.*]] = icmp ne i64 [[TMP89]], 0
; CHECK-NEXT:    br i1 [[TMP90]], label [[ASAN_REPORT3:%.*]], label [[TMP93:%.*]], !prof [[PROF0]]
; CHECK:       asan.report3:
; CHECK-NEXT:    br i1 [[TMP88]], label [[TMP91:%.*]], label [[TMP92:%.*]]
; CHECK:       91:
; CHECK-NEXT:    call void @__asan_report_store_n(i64 [[TMP79]], i64 4) #[[ATTR6]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label [[TMP92]]
; CHECK:       92:
; CHECK-NEXT:    br label [[TMP93]]
; CHECK:       93:
; CHECK-NEXT:    store i32 8, ptr addrspace(3) [[TMP34]], align 2
; CHECK-NEXT:    br label [[CONDFREE:%.*]]
; CHECK:       CondFree:
; CHECK-NEXT:    call void @llvm.amdgcn.s.barrier()
; CHECK-NEXT:    br i1 [[XYZCOND]], label [[FREE:%.*]], label [[END:%.*]]
; CHECK:       Free:
; CHECK-NEXT:    [[TMP35:%.*]] = load ptr, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
; CHECK-NEXT:    call void @free(ptr [[TMP35]])
; CHECK-NEXT:    br label [[END]]
; CHECK:       End:
; CHECK-NEXT:    ret void
;
WId:
  %0 = call i32 @llvm.amdgcn.workitem.id.x()
  %1 = call i32 @llvm.amdgcn.workitem.id.y()
  %2 = call i32 @llvm.amdgcn.workitem.id.z()
  %3 = or i32 %0, %1
  %4 = or i32 %3, %2
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %Malloc, label %22

Malloc:                                           ; preds = %WId
  %6 = load i64, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 0), align 8
  %7 = load i64, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 2), align 8
  %8 = add i64 %6, %7
  %9 = call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %10 = getelementptr inbounds ptr addrspace(4), ptr addrspace(4) %9, i32 15
  store i64 %8, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 0), align 8
  %11 = load i64, ptr addrspace(4) %10, align 8
  store i64 %11, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 1), align 8
  %12 = add i64 %11, 7
  %13 = udiv i64 %12, 8
  %14 = mul i64 %13, 8
  store i64 %14, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 2), align 8
  %15 = add i64 %8, %14
  store i64 %15, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 3, i32 0), align 8
  %16 = load i64, ptr addrspace(4) %10, align 8
  store i64 %16, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 3, i32 1), align 8
  %17 = add i64 %16, 7
  %18 = udiv i64 %17, 8
  %19 = mul i64 %18, 8
  store i64 %19, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 3, i32 2), align 8
  %20 = add i64 %15, %19
  %21 = call ptr addrspace(1) @malloc(i64 %20)
  store ptr addrspace(1) %21, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
  br label %22

22:                                               ; preds = %Malloc, %WId
  %xyzCond = phi i1 [ false, %WId ], [ true, %Malloc ]
  call void @llvm.amdgcn.s.barrier()
  %23 = load i32, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, align 4
  %24 = getelementptr inbounds i8, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 %23
  %25 = load i32, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 0), align 4
  %26 = getelementptr inbounds i8, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 %25
  call void @use_variables()
  store i8 7, ptr addrspace(3) %24, align 1
  store i32 8, ptr addrspace(3) %26, align 2
  br label %CondFree

CondFree:                                         ; preds = %22
  call void @llvm.amdgcn.s.barrier()
  br i1 %xyzCond, label %Free, label %End

Free:                                             ; preds = %CondFree
  %27 = load ptr, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
  call void @free(ptr %27)
  br label %End

End:                                              ; preds = %Free, %CondFree
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workitem.id.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workitem.id.y() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workitem.id.z() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare align 4 ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr() #0

declare ptr addrspace(1) @malloc(i64)

; Function Attrs: convergent nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #1

declare void @free(ptr)

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.lds.kernel.id() #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nofree nounwind willreturn }

!0 = !{i32 0}
;.
; CHECK: [[PROF0]] = !{!"branch_weights", i32 1, i32 100000}
; CHECK: [[META1]] = !{i32 0}
;.
