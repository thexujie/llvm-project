// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --check-globals all --include-generated-funcs --version 4
// RUN: %clang_cc1 -triple arm64-apple-macosx -emit-llvm -o - %s | FileCheck %s

struct DSLKind {
  const char *name;
  constexpr DSLKind(const char *name = __builtin_VARIABLE_NAME()) : name(name) {}
};

const char *check_local() {
    DSLKind halide;
    return halide.name;
}

namespace dsls {
    DSLKind spirit;
}

const char *check_global() {
    return dsls::spirit.name;
}

//.
// CHECK: @.str = private unnamed_addr constant [7 x i8] c"halide\00", align 1
// CHECK: @.str.1 = private unnamed_addr constant [13 x i8] c"dsls::spirit\00", align 1
// CHECK: @_ZN4dsls6spiritE = global %struct.DSLKind { ptr @.str.1 }, align 8
//.
// CHECK-LABEL: define noundef ptr @_Z11check_localv(
// CHECK-SAME: ) #[[ATTR0:[0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[HALIDE:%.*]] = alloca [[STRUCT_DSLKIND:%.*]], align 8
// CHECK-NEXT:    [[CALL:%.*]] = call noundef ptr @_ZN7DSLKindC1EPKc(ptr noundef nonnull align 8 dereferenceable(8) [[HALIDE]], ptr noundef @.str)
// CHECK-NEXT:    [[NAME:%.*]] = getelementptr inbounds [[STRUCT_DSLKIND]], ptr [[HALIDE]], i32 0, i32 0
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[NAME]], align 8
// CHECK-NEXT:    ret ptr [[TMP0]]
//
//
// CHECK-LABEL: define linkonce_odr noundef ptr @_ZN7DSLKindC1EPKc(
// CHECK-SAME: ptr noundef nonnull returned align 8 dereferenceable(8) [[THIS:%.*]], ptr noundef [[NAME:%.*]]) unnamed_addr #[[ATTR0]] align 2 {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[NAME_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// CHECK-NEXT:    store ptr [[NAME]], ptr [[NAME_ADDR]], align 8
// CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[NAME_ADDR]], align 8
// CHECK-NEXT:    [[CALL:%.*]] = call noundef ptr @_ZN7DSLKindC2EPKc(ptr noundef nonnull align 8 dereferenceable(8) [[THIS1]], ptr noundef [[TMP0]])
// CHECK-NEXT:    ret ptr [[THIS1]]
//
//
// CHECK-LABEL: define noundef ptr @_Z12check_globalv(
// CHECK-SAME: ) #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr @_ZN4dsls6spiritE, align 8
// CHECK-NEXT:    ret ptr [[TMP0]]
//
//
// CHECK-LABEL: define linkonce_odr noundef ptr @_ZN7DSLKindC2EPKc(
// CHECK-SAME: ptr noundef nonnull returned align 8 dereferenceable(8) [[THIS:%.*]], ptr noundef [[NAME:%.*]]) unnamed_addr #[[ATTR0]] align 2 {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[NAME_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// CHECK-NEXT:    store ptr [[NAME]], ptr [[NAME_ADDR]], align 8
// CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CHECK-NEXT:    [[NAME2:%.*]] = getelementptr inbounds [[STRUCT_DSLKIND:%.*]], ptr [[THIS1]], i32 0, i32 0
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[NAME_ADDR]], align 8
// CHECK-NEXT:    store ptr [[TMP0]], ptr [[NAME2]], align 8
// CHECK-NEXT:    ret ptr [[THIS1]]
//
//.
// CHECK: attributes #[[ATTR0]] = { mustprogress noinline nounwind optnone "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
//.
// CHECK: [[META0:![0-9]+]] = !{i32 1, !"wchar_size", i32 4}
// CHECK: [[META1:![0-9]+]] = !{!"{{.*}}clang version {{.*}}"}
//.
